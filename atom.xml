<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓婷成长记录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-04T08:10:25.577Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiaoting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue实现路由的按需加载</title>
    <link href="http://yoursite.com/2019/11/04/Vue%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E7%9A%84%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/11/04/Vue实现路由的按需加载/</id>
    <published>2019-11-04T08:05:07.000Z</published>
    <updated>2019-11-04T08:10:25.577Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>vue异步组件</p></li><li><p>es提案的import()</p></li><li><p>webpack的require,ensure()</p><p>vue异步组件技术 ==== 异步加载<br>vue-router配置路由 , 使用vue的异步组件技术 , 可以实现按需加载 .<br>但是,这种情况下一个组件生成一个js文件</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* vue异步组件技术 */</span><br><span class="line">&#123;</span><br><span class="line">  path: &apos;/home&apos;,</span><br><span class="line">  name: &apos;home&apos;,</span><br><span class="line">  component: resolve =&gt; require([&apos;@/components/home&apos;],resolve)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  path: &apos;/index&apos;,</span><br><span class="line">  name: &apos;Index&apos;,</span><br><span class="line">  component: resolve =&gt; require([&apos;@/components/index&apos;],resolve)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  path: &apos;/about&apos;,</span><br><span class="line">  name: &apos;about&apos;,</span><br><span class="line">  component: resolve =&gt; require([&apos;@/components/about&apos;],resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件懒加载方案二 路由懒加载(使用import)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 下面2行代码，没有指定webpackChunkName，每个组件打包成一个js文件。</span><br><span class="line">/* const Home = () =&gt; import(&apos;@/components/home&apos;)</span><br><span class="line">const Index = () =&gt; import(&apos;@/components/index&apos;)</span><br><span class="line">const About = () =&gt; import(&apos;@/components/about&apos;) */</span><br><span class="line">// 下面2行代码，指定了相同的webpackChunkName，会合并打包成一个js文件。 把组件按组分块</span><br><span class="line">const Home =  () =&gt; import(/* webpackChunkName: &apos;ImportFuncDemo&apos; */ &apos;@/components/home&apos;)</span><br><span class="line">const Index = () =&gt; import(/* webpackChunkName: &apos;ImportFuncDemo&apos; */ &apos;@/components/index&apos;)</span><br><span class="line">const About = () =&gt; import(/* webpackChunkName: &apos;ImportFuncDemo&apos; */ &apos;@/components/about&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &apos;/about&apos;,</span><br><span class="line">  component: About</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  path: &apos;/index&apos;,</span><br><span class="line">  component: Index</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  path: &apos;/home&apos;,</span><br><span class="line">  component: Home</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack提供的require.ensure()<br>vue-router配置路由，使用webpack的require.ensure技术，也可以实现按需加载。<br>这种情况下，多个路由指定相同的chunkName，会合并打包成一个js文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* 组件懒加载方案三: webpack提供的require.ensure() */</span><br><span class="line">&#123;</span><br><span class="line">  path: &apos;/home&apos;,</span><br><span class="line">  name: &apos;home&apos;,</span><br><span class="line">  component: r =&gt; require.ensure([], () =&gt; r(require(&apos;@/components/home&apos;)), &apos;demo&apos;)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  path: &apos;/index&apos;,</span><br><span class="line">  name: &apos;Index&apos;,</span><br><span class="line">  component: r =&gt; require.ensure([], () =&gt; r(require(&apos;@/components/index&apos;)), &apos;demo&apos;)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  path: &apos;/about&apos;,</span><br><span class="line">  name: &apos;about&apos;,</span><br><span class="line">  component: r =&gt; require.ensure([], () =&gt; r(require(&apos;@/components/about&apos;)), &apos;demo-01&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000011519350" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011519350</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;vue异步组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;es提案的import()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;webpack的require,ensure()&lt;/p&gt;
&lt;p&gt;vue异步组件技术 ==== 异步加载&lt;br&gt;vue-router配置路由 , 
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中nextTick正确使用</title>
    <link href="http://yoursite.com/2019/11/04/Vue%E4%B8%ADnextTick%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/11/04/Vue中nextTick正确使用/</id>
    <published>2019-11-04T07:49:44.000Z</published>
    <updated>2019-11-04T08:02:00.050Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档解释如下：</p><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p><p>获取更新后的DOM言外之意就是什么操作需要用到了更新后的DOM而不能使用之前的DOM或者使用更新前的DOM或出问题，所以就衍生出了这个获取更新后的DOM的Vue方法。所以放在Vue.nextTick()回调函数中的执行的应该是会对DOM进行操作的 js代码.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div ref=&quot;msg&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div v-if=&quot;msg1&quot;&gt;msg1 ****&#123;&#123;msg1&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div v-if=&quot;msg2&quot;&gt;msg2 ****&#123;&#123;msg2&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div v-if=&quot;msg3&quot;&gt;msg3 ****&#123;&#123;msg3&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;changeMsg&quot; style=&quot;width:100px;height: 30px;&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        msg: &apos;Hello Vue.&apos;,</span><br><span class="line">        msg1: &apos;&apos;,</span><br><span class="line">        msg2: &apos;&apos;,</span><br><span class="line">        msg3: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeMsg()&#123;</span><br><span class="line">        this.msg = &quot;Hello world.&quot;</span><br><span class="line">        this.msg1 = this.$refs.msg.innerHTML</span><br><span class="line">        this.$nextTick(() =&gt; &#123;</span><br><span class="line">          this.msg2 = this.$refs.msg.innerHTML</span><br><span class="line">        &#125;)</span><br><span class="line">        this.msg3 = this.$refs.msg.innerHTML</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>点击前</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201812/1249970-20181225173222675-1187052446.png" alt="img"></p><p>点击后</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201812/1249970-20181225173309466-1782014173.png" alt="img"></p><p>msg2显示的内容是变换之后的。其根本原因是因为Vue中DOM更新是异步的。</p><h3 id="什么时候需要用的Vue-nextTick"><a href="#什么时候需要用的Vue-nextTick" class="headerlink" title="什么时候需要用的Vue.nextTick()"></a>什么时候需要用的Vue.nextTick()</h3><p>1.你在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。原因是什么呢，原因是在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。</p><p>2.在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中。</p><p>原因是，Vue是异步执行dom更新的，一旦观察到数据变化，Vue就会开启一个队列，然后把在同一个事件循环 (event loop) 当中观察到数据变化的 watcher 推送进这个队列。如果这个watcher被触发多次，只会被推送到队列一次。这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和DOm操作。而在下一个事件循环时，Vue会清空队列，并进行必要的DOM更新。<br>当你设置this.msg1 = this.$refs.msg.innerHTML,DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官方文档解释如下：&lt;/p&gt;
&lt;p&gt;在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。&lt;/p&gt;
&lt;p&gt;获取更新后的DOM言外之意就是什么操作需要用到了更新后的DOM而不能使用之前的DOM或者使用更新前的DOM或出问题，所以就衍
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>云端有个小卖部</title>
    <link href="http://yoursite.com/2019/10/31/%E4%BA%91%E7%AB%AF%E6%9C%89%E4%B8%AA%E5%B0%8F%E5%8D%96%E9%83%A8/"/>
    <id>http://yoursite.com/2019/10/31/云端有个小卖部/</id>
    <published>2019-10-31T03:58:23.693Z</published>
    <updated>2019-11-04T07:47:13.066Z</updated>
    
    <content type="html"><![CDATA[<p>​       一次坐火车去闺蜜那里,到的太早,闲来无事去书店买了这本云端有个小卖部,今天写下读完的感受.</p><p>​        我几乎是含泪看完的这本书,主人公并没有天赋异禀,也没有帅气多金,他只是一个普通的不能在普通的凡人,甚至在牛大田和毛婷婷,连小球球都比不上的让人深刻,相反他的外婆王莺莺确很出彩,火急火燎的暴脾气,每天开着拖拉机去进货,甚至把刘十三从一个城市拉回老家,她从不去表达自己对刘十三的爱,确又无时不刻不在展现她的爱.她不想让刘十三在外面闯荡,却不会去阻拦他,甚至心疼他在外过的拮据,偷偷塞钱,做刘十三爱吃的饭菜.知道自己癌症后隐瞒把刘十三接回来陪自己.可能是隔代亲,也可能刘十三是唯一的把他和自己的女儿联系在一起的那个人,遗憾的是他最后都没有在见到过自己的女儿.<br>​        刘十三,一个拼了命想去大城市的年轻人,他妈妈留下的笔记就是去大城市工作,找个爱的女孩结婚,考上清货北大.他和我们是一样的普通到不能再普通,事业一直停滞不前,同事之间的关系也很现实,当你在低谷,没有人会拉你,他们还会使劲的去踩踏你,感情上他一直忘不掉女神，一直恋恋不舍，直到时间模糊了他的记忆，这也是人生吧，当时觉得天大的事情，若干年后回头看时，也不过尔尔。难过可以，伤心可以，但是不能放弃自己，很庆幸刘十三遇到了程霜，那个女孩带她走了出来，让他明白了什么是爱.<br>​        小球球让人心疼到骨子里,在该拥有童真童趣的年纪要伪装自己的情绪,担负起责任,甚至知道被误解了都不会去为自己辩解,他的懂事让人心疼.<br>​        程霜,是个那么开朗，又让人那么心疼的姑娘，和病魔抗争了那么久，最终还是离开了，生命不知道何时就会终止,拼全力去努力生活享受所有好的与坏的处境,没有什么比活着更幸福.<br>​         最后的最后,王莺莺和程霜都离开了刘十三,球球去了福利院,美好的事情从来都不属于生活,生活本来就是悲喜交加的.毛婷婷不管弟弟怎么做,从没有放弃过他,毛婷婷的婚礼上，一直在等她的弟弟，不过没有能够等到。她在婚礼之后，就要离开云边镇，去到远方，这也是一个姐姐对自己的唯一亲人的告别吧。,牛大田烧掉棋牌室为了秦小贞,都是生活的影子,也是这些事情丰富了刘十三的生活.</p><p>​     悲伤和希望，都是一缕光，得与失从来都是成对出现的。</p><ol><li>有朵盛开的云，缓缓滑过山顶，随风飘向天边 ，我们慢慢明白，有些告别，就是最后一面。</li><li>山风微微，像月光下晃动的海浪， 温和而柔软，停留在时光的背后， 变成小时候听过的故事。 在遥远的城市，陌生的地方， 有他未曾见过的山和海。　</li><li>人和人之间舒服的关系，是可以一直不说话，也可以随时说话。　　</li><li>生命是有光的。 在我熄灭以前，能够照亮你一点，就是我所有能做的了。 我爱你，你要记得我。　　</li><li>有些人刻苦铭心， 没几年会遗忘。 有些人不论生死， 都陪在身旁。　</li><li>等待而已， 也叫努力? 是在等别人离开， 还是在等自己放弃?　　</li><li>云边有个小卖部，货架堆着岁月和夕阳，背后就是山。老人靠着躺椅假装睡着，小孩子偷走了一块糖。泪水几点钟落地，飞鸟要去向何方。人们聚和离，云朵来又往。讲故事的人，总有一个故事不愿讲。时光飞逝，悄悄话变成纸张。　　</li><li>夏夜的歌声，冬至的歌声， 都从水面掠过，皱起一层波纹， 像天空坠落的泪水，又归于天空。 人们随口说的一些话，跌落墙角， 风吹不走，阳光烧不掉，独自沉眠。　　</li><li>“我有很重要的事， 输了的话， 我就真的一无所有了。”　　</li><li>这世上大部分抒情，都会被认作是无病呻吟。能理解你得了什么病，基本上就是知己。</li><li>刘十三的家在山间，院子开了一个小卖部，从窗户伸出手去，彷佛摸到云朵　</li><li>程霜离开的时候，春风穿过云边镇，花瓣纷飞，好像幸福真的存在似的。　</li><li>原来世界上很多事情，不是你有计划，有毅力就能做到的。　　</li><li>他一无所知，无法描绘所有人创造的未来世界里，如何创造一个家。他孜孜不倦地承诺和分享，只是把扎根他每个细胞的小镇生涯，换了本日历，成为他反复的描绘。　　</li><li>如果每件事情都算来算去，那么等到想明白，可能就来不及做了。　</li><li>比你强的人，要么对你怜悯，要么对你无视。　　</li><li>印象中，水库秋冬弥漫水雾，春夏明艳斑斓，白天水波娴静温柔，深不见底。它能包裹孩子仰面漂游，也能藏着吃人水猴的传说。　</li><li>山这边是刘十三的童年，山那边是外婆的海。山风微微，像月光下晃动的海浪，有的，没的，温和而柔软，停留在时光的背后，变成小时候听过的故事。　　</li><li>有些人刻骨铭心，没几年就遗忘。有些人不论生死，都陪在你身旁。　　</li><li>再习惯等待，等不来依旧难过，那种难过，书上说叫做失望。直到长大后，他才明白，还有更大的难过，叫做绝望。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​       一次坐火车去闺蜜那里,到的太早,闲来无事去书店买了这本云端有个小卖部,今天写下读完的感受.&lt;/p&gt;
&lt;p&gt;​        我几乎是含泪看完的这本书,主人公并没有天赋异禀,也没有帅气多金,他只是一个普通的不能在普通的凡人,甚至在牛大田和毛婷婷,连小球球都比不
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>人间失格</title>
    <link href="http://yoursite.com/2019/10/24/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/"/>
    <id>http://yoursite.com/2019/10/24/人间失格/</id>
    <published>2019-10-24T09:39:33.592Z</published>
    <updated>2019-11-04T07:46:22.357Z</updated>
    
    <content type="html"><![CDATA[<ul><li><pre><code></code></pre></li></ul><p>小时候的叶藏是一个心思很重的孩子，太早的成熟使他有着同龄人所没有的敏感。虽然生活在所有人中间，但是给人的感觉确实离群索居的，与周围的人显得那么格格不入。在很小的时候他就知道他的幸福观与这世上所有人的幸福观都大相径庭，并为此而彻夜难眠痛苦呻吟走火入魔，这种状态，在其他人看来或许是离经叛道的，一旦他表露这种想法的话，大概会被人当做精神病人送进冷冰冰的医院吧。</p><p>他决定扮演一个小丑，来掩饰自己真实的内心世界，来取悦这世上所有的人，自己的亲人朋友，自己的老师同学，乃至周围的各种形形色色的所有人。读到这里，心真的很难不痛，这本不是一个孩子应该承受的！</p><p>长大后的叶藏越发的颓废，逃课、酗酒、抽烟、娼妓，糜烂的生活像极了我们眼中坏小子的形象。他陷得越来越深了，终于在某一天，与常子一起跳入了冰冷的河水中，常子死了，叶藏还活着，只是这种活着真的是叶藏所需要的吗？行尸走肉一般卑微的活着。。。除了压抑，还是压抑，找不到别的形容词更能形容读人间失格的感觉。</p><p>与其说人间失格是太宰治最后的遗著，不如说这是他留给这个冷冰冰的世界的遗书更合适。太宰治在《人间失格》中，藉大庭叶藏的独白表达他的人生与思想：「信赖是罪吗？」「已经没有回头路了，不论怎麼做，做什麼，都只会徒劳无功，只会让人觉得更差耻吧了！」「苟活著就是罪恶的种子！我的不幸，是无力拒绝他人的不幸。一旦拒绝，不论对方或是自己心裏，永远都有一道无法弥补的白色裂痕。我被这样的恐惧胁迫著。问问老天：不抵抗是罪吗？」</p><p>非常沉重的独白，是人生绝望的极致。太了解人生，也就绝对悲观。这也许就是太宰治的成就，也是他的悲剧。</p><p>活在自己的世界里，卑微而自由，这是叶藏或者是太宰治的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小时候的叶藏是一个心思很重的孩子，太早的成熟使他有着同龄人所没有的敏感。虽然生活在所有人中间，但是给人的感觉确实离群索居的，与周围的人显得那么格格不入。在很小的时候他就知道他的幸福观与
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue.js+element实现全选反选</title>
    <link href="http://yoursite.com/2019/10/24/vue.js+element%E5%AE%9E%E7%8E%B0%E5%85%A8%E9%80%89%E5%8F%8D%E9%80%89/"/>
    <id>http://yoursite.com/2019/10/24/vue.js+element实现全选反选/</id>
    <published>2019-10-24T09:15:56.257Z</published>
    <updated>2019-10-24T09:15:56.258Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-for=&quot;(item,index) in List&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;el-checkbox  v-model=&apos;checkArr&apos; :label=item.id  @change=&quot;changevalue&quot;&gt;&lt;/el-checkbox&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;el-checkbox v-model=&apos;cheackAllChecked&apos; @change=&apos;checkAllFun&apos;&gt;全选&lt;/el-checkbox&gt;</span><br><span class="line">    &lt;span @click=&quot;reverseChecked&quot;&gt;反选&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      List: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;1&quot;,</span><br><span class="line">          name:&apos;香蕉&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;2&quot;,</span><br><span class="line">          name:&apos;苹果&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;3&quot;,</span><br><span class="line">          name:&apos;橙子&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;4&quot;,</span><br><span class="line">          name:&apos;鸭梨&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: &quot;5&quot;,</span><br><span class="line">          name:&apos;葡萄&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      cheackAllChecked: false,</span><br><span class="line">      checkArr: [],</span><br><span class="line">      checkCompleteArr: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //实现全选</span><br><span class="line">    checkAllFun() &#123;</span><br><span class="line">      var _this = this;</span><br><span class="line">      this.checkArr = [];</span><br><span class="line">      if (this.cheackAllChecked) &#123;</span><br><span class="line">        this.List.forEach(function(item, index) &#123;</span><br><span class="line">          if (index &gt;= 0) &#123;</span><br><span class="line">            _this.checkArr.push(item.id);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //实现反选</span><br><span class="line">    reverseChecked() &#123;</span><br><span class="line">      var changeArr = [];</span><br><span class="line">      this.List.forEach(function(item, index) &#123;</span><br><span class="line">        if (index &gt;= 0) &#123;</span><br><span class="line">          changeArr.push(item.id);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      this.removeByValue(changeArr, this.checkArr);</span><br><span class="line">    &#125;,</span><br><span class="line">    //反选过滤函数</span><br><span class="line">    removeByValue(changearr, checkarr) &#123;</span><br><span class="line">      var _this = this;</span><br><span class="line">      for (var j = 0; j &lt; checkarr.length; j++) &#123;</span><br><span class="line">        for (var i = 0; i &lt; changearr.length; i++) &#123;</span><br><span class="line">          if (changearr[i] === checkarr[j]) &#123;</span><br><span class="line">            changearr.splice(i, 1);</span><br><span class="line">            break;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      this.checkArr = changearr;</span><br><span class="line">      if (changearr.length &lt;= _this.checkCompleteArr.length) &#123;</span><br><span class="line">        this.cheackAllChecked = false;</span><br><span class="line">      &#125;</span><br><span class="line">      if (changearr.length === _this.checkCompleteArr.length) &#123;</span><br><span class="line">        this.cheackAllChecked = true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    //选项的change事件</span><br><span class="line">    changevalue() &#123;</span><br><span class="line">      var _this = this;</span><br><span class="line">      if (this.checkArr.length &lt;= _this.checkCompleteArr.length) &#123;</span><br><span class="line">        this.cheackAllChecked = false;</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.checkArr.length === _this.checkCompleteArr.length) &#123;</span><br><span class="line">        this.cheackAllChecked = true;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //全选或反选用到的完整数组值</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    var _this = this;</span><br><span class="line">    this.List.forEach(function(item, index) &#123;</span><br><span class="line">      if (index &gt;= 0) &#123;</span><br><span class="line">        _this.checkCompleteArr.push(item.id);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS 如何为一个元素怎么绑定多个事件</title>
    <link href="http://yoursite.com/2019/10/24/JS%20%E5%A6%82%E4%BD%95%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E6%80%8E%E4%B9%88%E7%BB%91%E5%AE%9A%E5%A4%9A%E4%B8%AA%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/10/24/JS 如何为一个元素怎么绑定多个事件/</id>
    <published>2019-10-24T09:15:11.921Z</published>
    <updated>2019-10-24T09:21:26.939Z</updated>
    
    <content type="html"><![CDATA[<p>onclick()这种写法是DOM0级规范的写法，是所有的浏览器支持的，但是这种写法有不能同时绑定多个事件、使代码耦合在了一起的弊端。但是addEventListener() 是DOM2标准中定义的方法，它可以控制是在事件捕获阶段或者是在冒泡阶段调用事件处理程序。既然这个是DOM2标准中定义的，那么只有支持DOM2级事件处理程序的浏览器才支持这个方法（IE9,Firefox,Safari,Chrome和Opera支持）。</p><h3 id="一、onclick-方式"><a href="#一、onclick-方式" class="headerlink" title="一、onclick()方式"></a><strong>一、onclick()方式</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;绑定多个事件&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function()&#123;</span><br><span class="line">            document.getElementById(&apos;btn&apos;).onclick = function () &#123;</span><br><span class="line">                alert(1);</span><br><span class="line">            &#125;;</span><br><span class="line">            document.getElementById(&apos;btn&apos;).onclick = function () &#123;</span><br><span class="line">                alert(2);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>运行结果是第二个onclick把第一个onclick给覆盖了，虽然大部分情况用on就可以完成想要的结果，但是有时又需要执行多个相同的事件，很明显如果用on不能完成</p><h3 id="二、addEventListener-方法"><a href="#二、addEventListener-方法" class="headerlink" title="二、addEventListener()方法"></a>二、addEventListener()方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;绑定多个事件&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function()&#123;</span><br><span class="line">            document.getElementById(&apos;btn&apos;).addEventListener(&apos;click&apos;, function()&#123;</span><br><span class="line">                alert(1);</span><br><span class="line">            &#125;, false);</span><br><span class="line">            document.getElementById(&apos;btn&apos;).addEventListener(&apos;click&apos;, function()&#123;</span><br><span class="line">                alert(2);</span><br><span class="line">            &#125;, false);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>addEventListenert方法第一个参数填写事件名，第二个参数是一个函数，第三个参数是指在冒泡阶段还是捕获阶段处理事件处理程序。true代表捕获阶段处理， false代表冒泡阶段处理。第三个参数可以省略，大多数情况也不需要用到第三个参数，不写第三个参数默认false</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;onclick()这种写法是DOM0级规范的写法，是所有的浏览器支持的，但是这种写法有不能同时绑定多个事件、使代码耦合在了一起的弊端。但是addEventListener() 是DOM2标准中定义的方法，它可以控制是在事件捕获阶段或者是在冒泡阶段调用事件处理程序。既然这个是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS数组去重的两种方法</title>
    <link href="http://yoursite.com/2019/10/24/JS%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/24/JS数组去重的两种方法/</id>
    <published>2019-10-24T08:21:00.012Z</published>
    <updated>2019-10-24T08:21:00.013Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、循环遍历法（传统思路）"><a href="#一、循环遍历法（传统思路）" class="headerlink" title="一、循环遍历法（传统思路）"></a><strong>一、循环遍历法（传统思路）</strong></h5><p>最简单粗暴的算法，新建一个空数组，然后遍历原数组，将不在新数组中的项添加到新数组，最后返回新数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> compare(arr) &#123;</span><br><span class="line">    var newarr = [];//新建空数组</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; arr.length; i++) &#123;//遍历原数组</span><br><span class="line">        var isadd = <span class="literal">true</span>;//设置标记</span><br><span class="line">        <span class="keyword">for</span> (var j = 0; j &lt; newarr.length; j++) &#123;//遍历新数组</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === newarr[j]) &#123;</span><br><span class="line">                isadd = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;//如果当前原数组中的项，在新数组中存在，则标记为‘不添加’，并跳出新数组遍历</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isadd) &#123;</span><br><span class="line">            newarr.push(arr[i]);</span><br><span class="line">        &#125;//若标记为‘添加’（即遍历新数组后，没有发现相同项），则添加进新数组</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newarr;//返回新数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [1, 4, 5, 3, 2, 4, 5, 6, 5]</span><br><span class="line">console.log(compare(arr))</span><br></pre></td></tr></table></figure><p><strong>二、排序比较法（巧妙转换）</strong></p><p>相对第一种方法，需要每次遍历新旧两个数组，效率不高的情况。此方法先对原数组进行排序，这样每次只要与新数组的最后一项比较即可，大大提高效率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> sortarr(arr) &#123;</span><br><span class="line">    var arrsort = arr.sort();//对原数组进行排序</span><br><span class="line">    var newarr = [];//新建空数组</span><br><span class="line">    newarr.push(arrsort[0]);//将排序后数值的第一项给添加到新数组</span><br><span class="line">    <span class="keyword">for</span> (var i = 1; i &lt; arrsort.length; i++) &#123;//遍历排序后的数组</span><br><span class="line">        <span class="keyword">if</span> (arrsort[i] !== newarr[newarr.length - 1]) &#123;</span><br><span class="line">            newarr.push(arrsort[i])</span><br><span class="line">        &#125;//若当前项与新数组最后一项不同，这添加到新数组</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newarr;//返回新数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [1, 4, 5, 3, 2, 4, 5, 6, 5]</span><br><span class="line">console.log(sortarr(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;一、循环遍历法（传统思路）&quot;&gt;&lt;a href=&quot;#一、循环遍历法（传统思路）&quot; class=&quot;headerlink&quot; title=&quot;一、循环遍历法（传统思路）&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、循环遍历法（传统思路）&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;最简单粗暴的算法，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>10个常用的Win键快捷键 相当实用！</title>
    <link href="http://yoursite.com/2019/10/24/10%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84Win%E9%94%AE%E5%BF%AB%E6%8D%B7%E9%94%AE%20%E7%9B%B8%E5%BD%93%E5%AE%9E%E7%94%A8%EF%BC%81/"/>
    <id>http://yoursite.com/2019/10/24/10个常用的Win键快捷键 相当实用！/</id>
    <published>2019-10-24T07:00:47.000Z</published>
    <updated>2019-11-04T08:02:37.961Z</updated>
    
    <content type="html"><![CDATA[<p>1、Win + R 运行命令窗，cmd等必备。</p><p>2、Win + E 快速打开 文件资源管理器（我的电脑）。</p><p>3、Win+D：最小化桌面</p><p>按下此组合键后，屏幕上所有窗口都会瞬间最小化，再按一次又会恢复。</p><p>4、Ctrl + Alt + Del：任务管理器菜单</p><p>5、Win+→/↑/←/↓：窗口排版</p><p>Win键的搭配下，使用↑/↓/←/→四个按键就可以生成最大化、最小化、侧屏、右侧屏四个基础的排版功能。如果当前窗口已经处在左侧屏或右侧屏状态时，按下Win+↑/↓还可以进一步将变为左上、左下、右上、右下四个高级状态。</p><p>6、Win+++：放大镜</p><p>按下Win键不放，然后+++…… 别忘了用Win+—再缩小回来。</p><p>7、Win+P：启动投影仪/无线显示器</p><p>按下此组合键后，系统会在右窗格弹出一个菜单，根据需要选择即可，非常方便。如有无线显示器，也可以使用这个功能投射。</p><p>8、Win+Home：快速清理活动窗口</p><p>窗口打开太多，一个个关闭很麻烦。按下此组合键后，除当前窗口外的所有窗口都会最小化。</p><p>9、Win + TAB：</p><p>使用Win + Tab键可以预览所有当前打开的窗口，并且可以按需进行快速切换。</p><p>10、Win + Ctrl + D：新建虚拟桌面 Win + Ctrl + F4 关闭虚拟桌面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、Win + R 运行命令窗，cmd等必备。&lt;/p&gt;
&lt;p&gt;2、Win + E 快速打开 文件资源管理器（我的电脑）。&lt;/p&gt;
&lt;p&gt;3、Win+D：最小化桌面&lt;/p&gt;
&lt;p&gt;按下此组合键后，屏幕上所有窗口都会瞬间最小化，再按一次又会恢复。&lt;/p&gt;
&lt;p&gt;4、Ctrl +
      
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>理解cookie、session、token</title>
    <link href="http://yoursite.com/2019/10/24/%E7%90%86%E8%A7%A3cookie%E3%80%81session%E3%80%81token/"/>
    <id>http://yoursite.com/2019/10/24/理解cookie、session、token/</id>
    <published>2019-10-24T07:00:47.000Z</published>
    <updated>2019-11-04T08:02:19.669Z</updated>
    
    <content type="html"><![CDATA[<p>1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮。</p><p>2、但是随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统， 哪些人往自己的购物车中放商品， 也就是说我必须把每个人区分开，这就是一个不小的挑战，因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id), 说白了就是一个随机的字串，每个人收到的都不一样， 每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了</p><p>3、这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！如果访问服务器多了， 就得由成千上万，甚至几十万个。</p><p>这对服务器说是一个巨大的开销 ， 严重的限制了服务器扩展能力， 比如说我用两个机器组成了一个集群， 小F通过机器A登录了系统， 那session id会保存在机器A上， 假设小F的下一次请求被转发到机器B怎么办？机器B可没有小F的 session id啊。</p><p>有时候会采用一点小伎俩： session sticky ， 就是让小F的请求一直粘连在机器A上， 但是这也不管用， 要是机器A挂掉了， 还得转到机器B去。</p><p>那只好做session 的复制了， 把session id 在两个机器之间搬来搬去， 快累死了。</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805103343671-2135311210.jpg" alt="img"></p><p>后来有个叫Memcached的支了招：把session id 集中存储到一个地方， 所有的机器都来访问这个地方的数据， 这样一来，就不用复制了， 但是增加了单点失败的可能性， 要是那个负责session 的机器挂了， 所有人都得重新登录一遍， 估计得被人骂死。</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805103438150-856870524.png" alt="img"></p><p>也尝试把这个单点的机器也搞出集群，增加可靠性， 但不管如何， 这小小的session 对我来说是一个沉重的负担</p><p>4、于是有人就一直在思考， 我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？</p><p>可是如果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？ 如果不去验证，我们都不知道他们是不是合法登录的用户， 那些不怀好意的家伙们就可以伪造session id , 为所欲为了。</p><p>嗯，对了，关键点就是验证 ！</p><p>比如说， 小F已经登录了系统， 我给他发一个令牌(token)， 里边包含了小F的 user id， 下一次小F 再次通过Http 请求访问我的时候， 把这个token 通过Http header 带过来不就可以了。</p><p>不过这和session id没有本质区别啊， 任何人都可以可以伪造， 所以我得想点儿办法， 让别人伪造不了。</p><p>那就对数据做一个签名吧， 比如说我用HMAC-SHA256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805104156788-1424808925.jpg" alt="img"></p><p>这个token 我不保存， 当小F把这个token 给我发过来的时候，我再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较， 如果相同， 我就知道小F已经登录过了，并且可以直接取到小F的user id , 如果不相同， 数据部分肯定被人篡改过， 我就告诉发送者：对不起，没有认证。</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805104353147-552978511.jpg" alt="img"></p><p>Token 中的数据是明文保存的（虽然我会用Base64做下编码， 但那不是加密）， 还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。</p><p>当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。</p><p>这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的CPU计算时间获取了我的session 存储空间 ！</p><p>解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。这种无状态的感觉实在是太好了！</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p><p>cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p><p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p><p>服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。</p><p>以下几点特性会让你在程序中使用基于Token的身份验证</p><ol><li>无状态、可扩展</li><li>支持移动设备</li><li>跨程序调用</li><li>安全</li></ol><p>那些使用基于Token的身份验证的大佬们</p><p>大部分你见到过的API和Web应用都使用tokens。例如Facebook, Twitter, Google+, GitHub等。</p><h3 id="Token的起源"><a href="#Token的起源" class="headerlink" title="Token的起源"></a>Token的起源</h3><p>在介绍基于Token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的。</p><h4 id="基于服务器的验证"><a href="#基于服务器的验证" class="headerlink" title="基于服务器的验证"></a>基于服务器的验证</h4><p>我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。</p><p>在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。</p><p>随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。</p><h4 id="基于服务器验证方式暴露的一些问题"><a href="#基于服务器验证方式暴露的一些问题" class="headerlink" title="基于服务器验证方式暴露的一些问题"></a>基于服务器验证方式暴露的一些问题</h4><ol><li>Seesion：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。</li><li>可扩展性：在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。</li><li>CORS(跨域资源共享)：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。</li><li>CSRF(跨站请求伪造)：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。</li></ol><p>在这些问题中，可扩展行是最突出的。因此我们有必要去寻求一种更有行之有效的方法。</p><h4 id="基于Token的验证原理"><a href="#基于Token的验证原理" class="headerlink" title="基于Token的验证原理"></a>基于Token的验证原理</h4><p>基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。</p><p>这种概念解决了在服务端存储信息时的许多问题</p><blockquote><p>NoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。</p></blockquote><p>基于Token的身份验证的过程如下:</p><ol><li>用户通过用户名和密码发送请求。</li><li>程序验证。</li><li>程序返回一个签名的token 给客户端。</li><li>客户端储存token,并且每次用于每次发送请求。</li><li>服务端验证token并返回数据。</li></ol><p>每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin:* ，让服务器能接受到来自所有域的请求。</p><p>需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。</p><p>实现思路：</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805105115541-1590753355.jpg" alt="img"></p><ol><li>用户登录校验，校验成功后就返回Token给客户端。</li><li>客户端收到数据后保存在客户端</li><li>客户端每次访问API是携带Token到服务器端。</li><li>服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</li></ol><p>当我们在程序中认证了信息并取得token之后，我们便能通过这个Token做许多的事情。</p><p>我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只有在我们允许的特定的token）</p><h3 id="Tokens的优势"><a href="#Tokens的优势" class="headerlink" title="Tokens的优势"></a>Tokens的优势</h3><p>无状态、可扩展</p><p>在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。</p><p>如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成一些拥堵。</p><p>但是不要着急。使用tokens之后这些问题都迎刃而解，因为tokens自己hold住了用户的验证信息。</p><p>安全性</p><p>请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。</p><p>token是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。</p><p>可扩展性</p><p>Tokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(Fackbook或是Twitter)联系起来。当通过服务登录Twitter(我们将这个过程Buffer)时，我们可以将这些Buffer附到Twitter的数据流上(we are allowing Buffer to post to our Twitter stream)。</p><p>使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的API，得出特殊权限的tokens。</p><p>多平台跨域</p><p>我们提前先来谈论一下CORS(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各种的设备和应用程序。</p><blockquote><p>Having our API just serve data, we can also make the design choice to serve assets from a CDN. This eliminates the issues that CORS brings up after we set a quick header configuration for our application.</p></blockquote><p>只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><p>基于标准创建token的时候，你可以设定一些选项。我们在后续的文章中会进行更加详尽的描述，但是标准的用法会在JSON Web Tokens体现。</p><p>最近的程序和文档是供给JSON Web Tokens的。它支持众多的语言。这意味在未来的使用中你可以真正的转换你的认证机制。</p><p>转自原文链接<a href="http://www.cnblogs.com/moyand/p/9047978.html" target="_blank" rel="noopener">http://www.cnblogs.com/moyand/p/9047978.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
</feed>
