<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓婷成长记录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-24T09:05:42.532Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiaoting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端兼容性问题</title>
    <link href="http://yoursite.com/2019/10/24/%E5%89%8D%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/10/24/前端兼容性问题/</id>
    <published>2019-10-24T09:03:28.775Z</published>
    <updated>2019-10-24T09:05:42.532Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 前端兼容性问题</span><br><span class="line">date: 2019-10-24 15:00:47</span><br><span class="line">tags:</span><br></pre></td></tr></table></figure><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端:"></a>移动端:</h3><p>1.圆角bug</p><p>某些Android手机圆角失效</p><p>background-clip: padding-box;</p><p>\2. IOS移动端click事件300ms的延迟响应</p><p>移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。这是由于区分单击事件和双击屏幕缩放的历史原因造成的,</p><p>在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</p><p>解决方案：</p><p>fastclick可以解决在手机上点击事件的300ms延迟</p><p>zepto的touch模块，tap事件也是为了解决在click的延迟问题</p><p>触摸事件的响应顺序为 touchstart –&gt; touchmove –&gt; touchend –&gt; click,也可以通过绑定ontouchstart事件，加快对事件的响应，解决300ms延迟问题</p><p>3.一些情况下对非可点击元素如(label,span)监听click事件，ios下不会触发，css增加cursor:pointer就搞定了。</p><p>4.fixed定位缺陷</p><p>ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位</p><p>android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位</p><p>ios4下不支持position:fixed</p><p>解决方案： 可用iScroll插件解决这个问题</p><p>5.Input 的placeholder会出现文本位置偏上的情况</p><p>input 的placeholder会出现文本位置偏上的情况：PC端设置line-height等于height能够对齐，而移动端仍然是偏上，解决是设置line-height：normal</p><p>6.在移动端修改难看的点击的高亮效果，iOS和安卓下都有效：</p><p>* {-webkit-tap-highlight-color:rgba(0,0,0,0);}</p><p>7.消除 transition 闪屏</p><p>-webkit-transform-style: preserve-3d;     /<em>设置内嵌的元素在 3D 空间如何呈现：保留 3D</em>/</p><p>-webkit-backface-visibility: hidden;      /<em>(设置进行转换的元素的背面在面对用户时是否可见：隐藏)</em>/</p><p>8.安卓浏览器看背景图片，有些设备会模糊，原因是手机的分辨率太小</p><p>解决方案： 用2X图片来代替img标签，然后background-size: contain</p><p>\9. 防止手机中页面放大或缩小：</p><p>在meta中设置viewport user-scalable = no</p><p>10.上下拉滚动条卡顿：</p><p>overflow-scrolling: touch;</p><p>\11. 禁止复制选中文本：</p><p>user-select: none;</p><p>\12. 长时间按住页面出现闪退：</p><p>-webkit-touch-callout: none;</p><p>\13. 动画定义3D硬件加速：</p><p>transform: translate 3d(0,0,0);</p><p>14.formate-detection 启动或禁止自动识别页面中的电话号码，</p><p>content = “yes/no”</p><p>15.a标签添加tel是拨号功能</p><p>16.横平时字体加粗不一致：</p><p>text-size-adjust: 100%;</p><h3 id="PC端："><a href="#PC端：" class="headerlink" title="PC端："></a><strong>PC端：</strong></h3><p>1.rgba不支持IE8 用opacity属性代替rgba设置透明度</p><p>\2. 图片加a标签在IE9中出现边框 解决方案： img{border: none;}</p><p>\3. IE6不支持display: inline-block       设置为： display: inline</p><p>\4. position : fixed 不支持IE5/IE6 </p><p>\5. IE6，Firfox中，width = width + padding + border</p><p>\6. min-height比兼容IE6/IE7</p><p>\7. display:inline-block ie6/7不支持</p><p>display:inline-block;</p><p>*display:inline;</p><p>8.height不能小于16px,设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度</p><p>解决方案:overflow设置为hidden</p><p>9.img浮动  img标签打回车会造成每个图片之间有缝隙</p><p>解决方案:可以删除之间的回车键也可以让这些图片浮动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>理解cookie、session、token</title>
    <link href="http://yoursite.com/2019/10/24/%E7%90%86%E8%A7%A3cookie%E3%80%81session%E3%80%81token/"/>
    <id>http://yoursite.com/2019/10/24/理解cookie、session、token/</id>
    <published>2019-10-24T09:00:17.649Z</published>
    <updated>2019-10-24T09:00:20.541Z</updated>
    
    <content type="html"><![CDATA[<p>1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮。</p><p>2、但是随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统， 哪些人往自己的购物车中放商品， 也就是说我必须把每个人区分开，这就是一个不小的挑战，因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id), 说白了就是一个随机的字串，每个人收到的都不一样， 每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了</p><p>3、这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！如果访问服务器多了， 就得由成千上万，甚至几十万个。</p><p>这对服务器说是一个巨大的开销 ， 严重的限制了服务器扩展能力， 比如说我用两个机器组成了一个集群， 小F通过机器A登录了系统， 那session id会保存在机器A上， 假设小F的下一次请求被转发到机器B怎么办？机器B可没有小F的 session id啊。</p><p>有时候会采用一点小伎俩： session sticky ， 就是让小F的请求一直粘连在机器A上， 但是这也不管用， 要是机器A挂掉了， 还得转到机器B去。</p><p>那只好做session 的复制了， 把session id 在两个机器之间搬来搬去， 快累死了。</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805103343671-2135311210.jpg" alt="img"></p><p>后来有个叫Memcached的支了招：把session id 集中存储到一个地方， 所有的机器都来访问这个地方的数据， 这样一来，就不用复制了， 但是增加了单点失败的可能性， 要是那个负责session 的机器挂了， 所有人都得重新登录一遍， 估计得被人骂死。</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805103438150-856870524.png" alt="img"></p><p>也尝试把这个单点的机器也搞出集群，增加可靠性， 但不管如何， 这小小的session 对我来说是一个沉重的负担</p><p>4、于是有人就一直在思考， 我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？</p><p>可是如果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？ 如果不去验证，我们都不知道他们是不是合法登录的用户， 那些不怀好意的家伙们就可以伪造session id , 为所欲为了。</p><p>嗯，对了，关键点就是验证 ！</p><p>比如说， 小F已经登录了系统， 我给他发一个令牌(token)， 里边包含了小F的 user id， 下一次小F 再次通过Http 请求访问我的时候， 把这个token 通过Http header 带过来不就可以了。</p><p>不过这和session id没有本质区别啊， 任何人都可以可以伪造， 所以我得想点儿办法， 让别人伪造不了。</p><p>那就对数据做一个签名吧， 比如说我用HMAC-SHA256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805104156788-1424808925.jpg" alt="img"></p><p>这个token 我不保存， 当小F把这个token 给我发过来的时候，我再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较， 如果相同， 我就知道小F已经登录过了，并且可以直接取到小F的user id , 如果不相同， 数据部分肯定被人篡改过， 我就告诉发送者：对不起，没有认证。</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805104353147-552978511.jpg" alt="img"></p><p>Token 中的数据是明文保存的（虽然我会用Base64做下编码， 但那不是加密）， 还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。</p><p>当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。</p><p>这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的CPU计算时间获取了我的session 存储空间 ！</p><p>解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。这种无状态的感觉实在是太好了！</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p><p>cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p><p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p><p>服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。</p><p>以下几点特性会让你在程序中使用基于Token的身份验证</p><ol><li>无状态、可扩展</li><li>支持移动设备</li><li>跨程序调用</li><li>安全</li></ol><p>那些使用基于Token的身份验证的大佬们</p><p>大部分你见到过的API和Web应用都使用tokens。例如Facebook, Twitter, Google+, GitHub等。</p><h3 id="Token的起源"><a href="#Token的起源" class="headerlink" title="Token的起源"></a>Token的起源</h3><p>在介绍基于Token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的。</p><h4 id="基于服务器的验证"><a href="#基于服务器的验证" class="headerlink" title="基于服务器的验证"></a>基于服务器的验证</h4><p>我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。</p><p>在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。</p><p>随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。</p><h4 id="基于服务器验证方式暴露的一些问题"><a href="#基于服务器验证方式暴露的一些问题" class="headerlink" title="基于服务器验证方式暴露的一些问题"></a>基于服务器验证方式暴露的一些问题</h4><ol><li>Seesion：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。</li><li>可扩展性：在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。</li><li>CORS(跨域资源共享)：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。</li><li>CSRF(跨站请求伪造)：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。</li></ol><p>在这些问题中，可扩展行是最突出的。因此我们有必要去寻求一种更有行之有效的方法。</p><h4 id="基于Token的验证原理"><a href="#基于Token的验证原理" class="headerlink" title="基于Token的验证原理"></a>基于Token的验证原理</h4><p>基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。</p><p>这种概念解决了在服务端存储信息时的许多问题</p><blockquote><p>NoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。</p></blockquote><p>基于Token的身份验证的过程如下:</p><ol><li>用户通过用户名和密码发送请求。</li><li>程序验证。</li><li>程序返回一个签名的token 给客户端。</li><li>客户端储存token,并且每次用于每次发送请求。</li><li>服务端验证token并返回数据。</li></ol><p>每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin:* ，让服务器能接受到来自所有域的请求。</p><p>需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。</p><p>实现思路：</p><p><img src="https://img2018.cnblogs.com/blog/1249970/201908/1249970-20190805105115541-1590753355.jpg" alt="img"></p><ol><li>用户登录校验，校验成功后就返回Token给客户端。</li><li>客户端收到数据后保存在客户端</li><li>客户端每次访问API是携带Token到服务器端。</li><li>服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</li></ol><p>当我们在程序中认证了信息并取得token之后，我们便能通过这个Token做许多的事情。</p><p>我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只有在我们允许的特定的token）</p><h3 id="Tokens的优势"><a href="#Tokens的优势" class="headerlink" title="Tokens的优势"></a>Tokens的优势</h3><p>无状态、可扩展</p><p>在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。</p><p>如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成一些拥堵。</p><p>但是不要着急。使用tokens之后这些问题都迎刃而解，因为tokens自己hold住了用户的验证信息。</p><p>安全性</p><p>请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。</p><p>token是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。</p><p>可扩展性</p><p>Tokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(Fackbook或是Twitter)联系起来。当通过服务登录Twitter(我们将这个过程Buffer)时，我们可以将这些Buffer附到Twitter的数据流上(we are allowing Buffer to post to our Twitter stream)。</p><p>使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的API，得出特殊权限的tokens。</p><p>多平台跨域</p><p>我们提前先来谈论一下CORS(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各种的设备和应用程序。</p><blockquote><p>Having our API just serve data, we can also make the design choice to serve assets from a CDN. This eliminates the issues that CORS brings up after we set a quick header configuration for our application.</p></blockquote><p>只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><p>基于标准创建token的时候，你可以设定一些选项。我们在后续的文章中会进行更加详尽的描述，但是标准的用法会在JSON Web Tokens体现。</p><p>最近的程序和文档是供给JSON Web Tokens的。它支持众多的语言。这意味在未来的使用中你可以真正的转换你的认证机制。</p><p>转自原文链接<a href="http://www.cnblogs.com/moyand/p/9047978.html" target="_blank" rel="noopener">http://www.cnblogs.com/moyand/p/9047978.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮。&lt;/p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS数组去重的两种方法</title>
    <link href="http://yoursite.com/2019/10/24/JS%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/24/JS数组去重的两种方法/</id>
    <published>2019-10-24T08:21:00.012Z</published>
    <updated>2019-10-24T08:21:00.013Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、循环遍历法（传统思路）"><a href="#一、循环遍历法（传统思路）" class="headerlink" title="一、循环遍历法（传统思路）"></a><strong>一、循环遍历法（传统思路）</strong></h5><p>最简单粗暴的算法，新建一个空数组，然后遍历原数组，将不在新数组中的项添加到新数组，最后返回新数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> compare(arr) &#123;</span><br><span class="line">    var newarr = [];//新建空数组</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; arr.length; i++) &#123;//遍历原数组</span><br><span class="line">        var isadd = <span class="literal">true</span>;//设置标记</span><br><span class="line">        <span class="keyword">for</span> (var j = 0; j &lt; newarr.length; j++) &#123;//遍历新数组</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === newarr[j]) &#123;</span><br><span class="line">                isadd = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;//如果当前原数组中的项，在新数组中存在，则标记为‘不添加’，并跳出新数组遍历</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isadd) &#123;</span><br><span class="line">            newarr.push(arr[i]);</span><br><span class="line">        &#125;//若标记为‘添加’（即遍历新数组后，没有发现相同项），则添加进新数组</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newarr;//返回新数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [1, 4, 5, 3, 2, 4, 5, 6, 5]</span><br><span class="line">console.log(compare(arr))</span><br></pre></td></tr></table></figure><p><strong>二、排序比较法（巧妙转换）</strong></p><p>相对第一种方法，需要每次遍历新旧两个数组，效率不高的情况。此方法先对原数组进行排序，这样每次只要与新数组的最后一项比较即可，大大提高效率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> sortarr(arr) &#123;</span><br><span class="line">    var arrsort = arr.sort();//对原数组进行排序</span><br><span class="line">    var newarr = [];//新建空数组</span><br><span class="line">    newarr.push(arrsort[0]);//将排序后数值的第一项给添加到新数组</span><br><span class="line">    <span class="keyword">for</span> (var i = 1; i &lt; arrsort.length; i++) &#123;//遍历排序后的数组</span><br><span class="line">        <span class="keyword">if</span> (arrsort[i] !== newarr[newarr.length - 1]) &#123;</span><br><span class="line">            newarr.push(arrsort[i])</span><br><span class="line">        &#125;//若当前项与新数组最后一项不同，这添加到新数组</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newarr;//返回新数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [1, 4, 5, 3, 2, 4, 5, 6, 5]</span><br><span class="line">console.log(sortarr(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;一、循环遍历法（传统思路）&quot;&gt;&lt;a href=&quot;#一、循环遍历法（传统思路）&quot; class=&quot;headerlink&quot; title=&quot;一、循环遍历法（传统思路）&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、循环遍历法（传统思路）&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;最简单粗暴的算法，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>10个常用的Win键快捷键 相当实用！</title>
    <link href="http://yoursite.com/2019/10/24/10%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84Win%E9%94%AE%E5%BF%AB%E6%8D%B7%E9%94%AE%20%E7%9B%B8%E5%BD%93%E5%AE%9E%E7%94%A8%EF%BC%81/"/>
    <id>http://yoursite.com/2019/10/24/10个常用的Win键快捷键 相当实用！/</id>
    <published>2019-10-24T07:00:47.000Z</published>
    <updated>2019-10-24T07:27:56.155Z</updated>
    
    <content type="html"><![CDATA[<p>1、Win + R 运行命令窗，cmd等必备。</p><p>2、Win + E 快速打开 文件资源管理器（我的电脑）。</p><p>3、Win+D：最小化桌面</p><p>按下此组合键后，屏幕上所有窗口都会瞬间最小化，再按一次又会恢复。</p><p>4、Ctrl + Alt + Del：任务管理器菜单</p><p>5、Win+→/↑/←/↓：窗口排版</p><p>Win键的搭配下，使用↑/↓/←/→四个按键就可以生成最大化、最小化、侧屏、右侧屏四个基础的排版功能。如果当前窗口已经处在左侧屏或右侧屏状态时，按下Win+↑/↓还可以进一步将变为左上、左下、右上、右下四个高级状态。</p><p>6、Win+++：放大镜</p><p>按下Win键不放，然后+++…… 别忘了用Win+—再缩小回来。</p><p>7、Win+P：启动投影仪/无线显示器</p><p>按下此组合键后，系统会在右窗格弹出一个菜单，根据需要选择即可，非常方便。如有无线显示器，也可以使用这个功能投射。</p><p>8、Win+Home：快速清理活动窗口</p><p>窗口打开太多，一个个关闭很麻烦。按下此组合键后，除当前窗口外的所有窗口都会最小化。</p><p>9、Win + TAB：</p><p>使用Win + Tab键可以预览所有当前打开的窗口，并且可以按需进行快速切换。</p><p>10、Win + Ctrl + D：新建虚拟桌面 Win + Ctrl + F4 关闭虚拟桌面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、Win + R 运行命令窗，cmd等必备。&lt;/p&gt;
&lt;p&gt;2、Win + E 快速打开 文件资源管理器（我的电脑）。&lt;/p&gt;
&lt;p&gt;3、Win+D：最小化桌面&lt;/p&gt;
&lt;p&gt;按下此组合键后，屏幕上所有窗口都会瞬间最小化，再按一次又会恢复。&lt;/p&gt;
&lt;p&gt;4、Ctrl +
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
