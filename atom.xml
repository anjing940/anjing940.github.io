<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓婷成长记录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-05T05:03:24.078Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiaoting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css小考验</title>
    <link href="http://yoursite.com/2020/04/05/css%E5%B0%8F%E8%80%83%E9%AA%8C/"/>
    <id>http://yoursite.com/2020/04/05/css小考验/</id>
    <published>2020-04-05T02:02:39.000Z</published>
    <updated>2020-04-05T05:03:24.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">复制<span class="comment">/* 标准模型 */</span></span><br><span class="line">box-sizing:content-box;</span><br><span class="line">红色区域的宽度(width+padding)</span><br><span class="line"><span class="number">2</span>rem+<span class="number">0.1</span>rem*<span class="number">2</span>=<span class="number">2.2</span>rem</span><br><span class="line">box整个区域的宽度(width+padding+border)</span><br><span class="line"><span class="number">2</span>rem+<span class="number">0.1</span>rem*<span class="number">2</span>+<span class="number">0.1</span>rem*<span class="number">2</span>=<span class="number">2.4</span>rem</span><br><span class="line">.box&#123;</span><br><span class="line">  width: <span class="number">2</span>rem;</span><br><span class="line">  height: <span class="number">2</span>rem;</span><br><span class="line">  background: red;</span><br><span class="line">  padding: <span class="number">0.1</span>rem;</span><br><span class="line">  border: <span class="number">0.1</span>rem solid black;;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/*IE模型*/</span></span><br><span class="line">box-sizing:border-box;</span><br><span class="line">红色区域的宽度(width-padding-border)</span><br><span class="line"><span class="number">2</span>rem<span class="number">-0.1</span>rem*<span class="number">2</span><span class="number">-0.1</span>rem*<span class="number">2</span>=<span class="number">1.6</span>rem</span><br><span class="line">box整个区域的宽度(width)</span><br><span class="line"><span class="number">2</span>rem=<span class="number">2</span>rem</span><br><span class="line">.box&#123;</span><br><span class="line">  width: <span class="number">2</span>rem;</span><br><span class="line">  height: <span class="number">2</span>rem;</span><br><span class="line">  background: paleturquoise;</span><br><span class="line">  padding: <span class="number">0.1</span>rem;</span><br><span class="line">  border: <span class="number">0.1</span>rem solid palevioletred;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一行水平居中，多行居左"><a href="#一行水平居中，多行居左" class="headerlink" title="一行水平居中，多行居左"></a>一行水平居中，多行居左</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是多行文字。我是多行文字。我是多行文字。我是多行文字。我是多行文字。我是多行文字。我是多行文字。我是多行文字。我是多行文字。我是多行文字。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一行文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">div&#123;text-align: center;&#125;</span><br><span class="line">div span&#123;<span class="attr">display</span>: inline-block;text-align: left;&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><h3 id="如何实现一个最大的正方形"><a href="#如何实现一个最大的正方形" class="headerlink" title="如何实现一个最大的正方形"></a>如何实现一个最大的正方形</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用 padding-bottom 撑开边距</span><br><span class="line"> section &#123;</span><br><span class="line">    width:<span class="number">100</span>%;</span><br><span class="line">    padding-bottom: <span class="number">100</span>%;</span><br><span class="line">    background: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两栏布局，左边固定，右边自适应，左右不重叠"><a href="#两栏布局，左边固定，右边自适应，左右不重叠" class="headerlink" title="两栏布局，左边固定，右边自适应，左右不重叠"></a>两栏布局，左边固定，右边自适应，左右不重叠</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.left&#123;</span><br><span class="line">    float:left;</span><br><span class="line">    width:300px;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    overflow: hidden; /* 创建BFC */</span><br><span class="line">    background: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.home&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    width:2rem;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    flex:1;</span><br><span class="line">    background: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三栏布局，左右固定，中间自适应，不重叠"><a href="#三栏布局，左右固定，中间自适应，不重叠" class="headerlink" title="三栏布局，左右固定，中间自适应，不重叠"></a>三栏布局，左右固定，中间自适应，不重叠</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.home&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    width:1rem;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    width:1rem;</span><br><span class="line">    background: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.center&#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  background: burlywood;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.left&#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width:1rem;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.center&#123;</span><br><span class="line">  margin-left: 1rem;</span><br><span class="line">  margin-right: 1rem;</span><br><span class="line">  background: burlywood;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">  float: right;</span><br><span class="line">  width:1rem;</span><br><span class="line">  background: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="画三角形"><a href="#画三角形" class="headerlink" title="画三角形"></a>画三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.shape &#123;</span><br><span class="line">width: 0;</span><br><span class="line">height: 0;</span><br><span class="line">border-left: 20px solid transparent;</span><br><span class="line">border-right: 20px solid transparent;</span><br><span class="line">border-bottom: 20px solid transparent;</span><br><span class="line">border-top: 20px solid peachpuff;</span><br><span class="line">background: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="link-import导入css"><a href="#link-import导入css" class="headerlink" title="link @import导入css"></a>link @import导入css</h3><ol><li>link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS</li><li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载</li><li>link无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持</li><li>link支持使用Javascript控制DOM去改变样式；而@import不支持</li></ol><h3 id="水平垂直居中有哪几种方法？"><a href="#水平垂直居中有哪几种方法？" class="headerlink" title="水平垂直居中有哪几种方法？"></a>水平垂直居中有哪几种方法？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line">    &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head"</span> @<span class="attr">click</span>=<span class="string">"back()"</span>&gt;</span></span></span><br><span class="line">      &lt;van-icon name="arrow-left" class="icon-left" /&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> --&gt;</span></span><br><span class="line">    &lt;div class="box"&gt;</span><br><span class="line">      vvvvvvvklklklklkl</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;style lang=<span class="string">"scss"</span> scoped&gt;</span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">  .home&#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: <span class="number">500</span>px;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items:center;</span><br><span class="line">    background: yellow ;</span><br><span class="line">  &#125;</span><br><span class="line">  .box&#123;</span><br><span class="line">    background-color: cornflowerblue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">  .home&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: <span class="number">500</span>px;</span><br><span class="line">    background: yellow ;</span><br><span class="line">  &#125;</span><br><span class="line">  .box&#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    top:<span class="number">50</span>%;</span><br><span class="line">    transform: translate(<span class="number">-50</span>%, <span class="number">-50</span>%);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">  .home&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: <span class="number">500</span>px;</span><br><span class="line">    background: yellow ;</span><br><span class="line">  &#125;</span><br><span class="line">  .box&#123;</span><br><span class="line">      width: <span class="number">200</span>px;</span><br><span class="line">      height: <span class="number">200</span>px;</span><br><span class="line">      border: <span class="number">2</span>px solid red;</span><br><span class="line">      background-color: blue;</span><br><span class="line">      position: absolute;</span><br><span class="line">      left: <span class="number">0</span>;</span><br><span class="line">      right: <span class="number">0</span>;</span><br><span class="line">      top: <span class="number">0</span>;</span><br><span class="line">      bottom: <span class="number">0</span>;</span><br><span class="line">      margin: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex弹性盒模型？"><a href="#flex弹性盒模型？" class="headerlink" title="flex弹性盒模型？"></a>flex弹性盒模型？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">.flex&#123;</span><br><span class="line">     display: flex;</span><br><span class="line">     display: -webkit-flex;<span class="comment">/*Webkit内核的浏览器，必须加上-webkit前缀。*/</span></span><br><span class="line">     <span class="comment">/*注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。*/</span></span><br><span class="line">     flex-direction: row;<span class="comment">/*决定主轴的方向，即子项目（子元素）横向排列还是纵向排列*/</span></span><br><span class="line">     <span class="comment">/*row（默认值）：主轴为水平方向，起点在左端。</span></span><br><span class="line"><span class="comment">     row-reverse：主轴为水平方向，起点在右端。</span></span><br><span class="line"><span class="comment">     column：主轴为垂直方向，起点在上沿。</span></span><br><span class="line"><span class="comment">     column-reverse：主轴为垂直方向，起点在下沿。*/</span></span><br><span class="line">     flex-wrap:nowrap;<span class="comment">/*定义如果一条轴线排不下，如何换行*/</span></span><br><span class="line">     <span class="comment">/*nowrap（默认）：不换行。</span></span><br><span class="line"><span class="comment">     wrap：换行，第一行在上方。</span></span><br><span class="line"><span class="comment">     wrap-reverse：换行，第一行在下方。*/</span></span><br><span class="line">     justify-content: flex-start;<span class="comment">/*定义了项目在主轴上的对齐方式。*/</span></span><br><span class="line">     <span class="comment">/*flex-start（默认值）：左对齐</span></span><br><span class="line"><span class="comment">     flex-end：右对齐</span></span><br><span class="line"><span class="comment">     center： 居中</span></span><br><span class="line"><span class="comment">     space-between：两端对齐，项目之间的间隔都相等。</span></span><br><span class="line"><span class="comment">     space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。*/</span></span><br><span class="line">     align-items: flex-start;<span class="comment">/*定义项目在交叉轴上如何对齐。*/</span></span><br><span class="line">     <span class="comment">/*flex-start：交叉轴的起点对齐。</span></span><br><span class="line"><span class="comment">     flex-end：交叉轴的终点对齐。</span></span><br><span class="line"><span class="comment">     center：交叉轴的中点对齐。</span></span><br><span class="line"><span class="comment">     baseline: 项目的第一行文字的基线对齐。</span></span><br><span class="line"><span class="comment">     stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。*/</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*项目，容器里的子元素默认成为项目，并拥有项目的默认属性*/</span></span><br><span class="line"> .flex-item&#123;</span><br><span class="line">     order:<span class="number">0</span>;<span class="comment">/*定义项目的排列顺序。数值越小，排列越靠前，默认为0。*/</span></span><br><span class="line">     flex-grow:<span class="number">0</span>;<span class="comment">/*定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。*/</span></span><br><span class="line">     <span class="comment">/*如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。*/</span></span><br><span class="line">     flex-shrink:<span class="number">1</span>;<span class="comment">/*定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。*/</span></span><br><span class="line">     flex-basis:auto;<span class="comment">/*定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。*/</span></span><br><span class="line">     flex:<span class="number">0</span> <span class="number">1</span> auto;<span class="comment">/*flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。*/</span></span><br><span class="line">     align-self:auto;<span class="comment">/*允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性*/</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>常用的布局：</p><p><img src="https://img2020.cnblogs.com/blog/1249970/202003/1249970-20200328170753031-1902182557.png" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left-box"</span>&gt;我是左左&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="right-box"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div class="right-top"&gt;我是佑佑一&lt;/</span>div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right-bottom"</span>&gt;我是佑佑二&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;style lang=<span class="string">"scss"</span> scoped&gt;</span><br><span class="line">.home&#123;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">  height: <span class="number">2</span>rem;</span><br><span class="line">  background: burlywood;</span><br><span class="line">  display: flex;</span><br><span class="line">  color: aliceblue;</span><br><span class="line">  .left-box&#123;</span><br><span class="line">    flex: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span>rem;    </span><br><span class="line">      <span class="comment">//order:1；</span></span><br><span class="line">  &#125;</span><br><span class="line">  .right-box&#123;　</span><br><span class="line">      <span class="comment">//order:0;</span></span><br><span class="line">    flex: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    .right-top&#123;</span><br><span class="line">      flex: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span>rem;</span><br><span class="line">      background: pink;</span><br><span class="line">    &#125;</span><br><span class="line">    .right-bottom&#123;</span><br><span class="line">      flex: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">      background: powderblue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>加order改变排列顺序</p><p><img src="https://img2020.cnblogs.com/blog/1249970/202003/1249970-20200328171331595-1758060546.png" alt="img"></p><p>宫格布局</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="item"&gt;2&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;<span class="number">3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="item"&gt;4&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;<span class="number">5</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="item"&gt;6&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="regexp">.home&#123;</span></span><br><span class="line"><span class="regexp">  width: 100%;</span></span><br><span class="line"><span class="regexp">  height: 3rem;</span></span><br><span class="line"><span class="regexp">  background: burlywood;</span></span><br><span class="line"><span class="regexp">  display: flex;</span></span><br><span class="line"><span class="regexp">  color: aliceblue;</span></span><br><span class="line"><span class="regexp">  flex-wrap: wrap;</span></span><br><span class="line"><span class="regexp">  font-size: 20px;</span></span><br><span class="line"><span class="regexp">  text-align: center;</span></span><br><span class="line"><span class="regexp">  .item&#123;</span></span><br><span class="line"><span class="regexp">    background: pink;</span></span><br><span class="line"><span class="regexp">    flex: 0 1 50%;</span></span><br><span class="line"><span class="regexp">    border: 0.02rem solid white;</span></span><br><span class="line"><span class="regexp">    height: 1rem;</span></span><br><span class="line"><span class="regexp">    box-sizing: border-box;</span></span><br><span class="line"><span class="regexp">    line-height: 1rem;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  .item:nth-child(odd)&#123;</span></span><br><span class="line"><span class="regexp">    border-right: 0rem;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  .item &#123;</span></span><br><span class="line"><span class="regexp">    border-bottom: 0rem;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1249970/202003/1249970-20200328202254426-2052158803.png" alt="img"></p><h3 id="父盒子中子盒子浮动有什么后果？"><a href="#父盒子中子盒子浮动有什么后果？" class="headerlink" title="父盒子中子盒子浮动有什么后果？"></a>父盒子中子盒子浮动有什么后果？</h3><p>会产生高度塌陷；</p><p>解决办法：</p><p>1.父盒子添加高度</p><p>2.父盒子添加overflow: hidden;</p><p>3.在高度塌陷的父元素后面添加一个空白的div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"clear"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;style lang=<span class="string">"scss"</span> scoped&gt;</span><br><span class="line">.clear&#123;</span><br><span class="line">clear: both;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定位有哪些属性？相对定位是相对什么定位？"><a href="#定位有哪些属性？相对定位是相对什么定位？" class="headerlink" title="定位有哪些属性？相对定位是相对什么定位？"></a>定位有哪些属性？相对定位是相对什么定位？</h3><p>在CSS中关于定位的内容是：</p><p>position:relative | absolute | static | fixed</p><p>• static 自动定位，自动定位就是元素在页面普通文档流中由HTML自动定位，普通文档里中的元素也称为流动元素。不能通过z-index进行层次分级。</p><p>• relative 相对定位，相对定位不脱离文档流，参考其在原来文档流中的位置，通过 top,bottom,left,right 定位，并且可以通过z-index进行层次分级。</p><p>• absolute 绝对定位，绝对定位脱离文档流，依据最近的已经定位（绝对、相对或固定定位）的父元素，通过 top,bottom,left,right 定位。当父级 position 为 static 时，absolute元素将依据body根元素（浏览器窗口）进行定 位，可以通过z-index进行层次分级。</p><p>• fixed 固定定位，固定定位与父元素无关（无论父元素是否定位），直接根据浏览器窗口定位，且不随滚动条拖动 页面而滚动，可通过z-index进行层次分级。</p><p><a href="https://www.cnblogs.com/anjing940/p/12589582.html" target="_blank" rel="noopener">https://www.cnblogs.com/anjing940/p/12589582.html</a></p><h3 id="行内元素块元素和行内块元素有什么区别？行内块元素在同一行显示时有默认空隙，如何解决？"><a href="#行内元素块元素和行内块元素有什么区别？行内块元素在同一行显示时有默认空隙，如何解决？" class="headerlink" title="行内元素块元素和行内块元素有什么区别？行内块元素在同一行显示时有默认空隙，如何解决？"></a>行内元素块元素和行内块元素有什么区别？行内块元素在同一行显示时有默认空隙，如何解决？</h3><p>　　HTML可以将元素分类方式分为行内元素、块状元素和行内块状元素三种。首先需要说明的是，这三者是可以互相转换的，使用display属性能够将三者任意转换：</p><p>　　(1)display:inline;转换为行内元素</p><p>　　(2)display:block;转换为块状元素</p><p>　　(3)display:inline-block;转换为行内块状元素</p><p><strong>对于标签，为inline元素，默认的垂直对齐方式是为以父元素的baseline，但是展示时又是以bottomline为对齐方式，因此造成了上下两个标签之间的间隙。</strong></p><p>div{font-size:0};//推荐-把父元素的文字大小设置为0<br>img{vertical-align:top;}//改变其垂直对齐方式<br>img{display:block}; //将其改变为block元素<br>给图片设置浮动</p><p>常见的块级元素有：<h1>~<h6>,<p>,<div>,<ul>,<ol>,<li>    等</p><p>常见的行内元素有：<a>,<strong>,<b>,<em>,<del>,<span>等</p><p>在行内元素中有几个特殊的标签，<img/>,<input/>,<td/>,可以设置它们的宽高度以及对齐属性</p><h3 id="css3中的变形（transform）、过渡-transtion-、动画-animation"><a href="#css3中的变形（transform）、过渡-transtion-、动画-animation" class="headerlink" title="css3中的变形（transform）、过渡(transtion)、动画(animation)"></a>css3中的变形（transform）、过渡(transtion)、动画(animation)</h3><p>动画是使元素从一种样式逐渐变化为另一种样式的效果。</p><h6 id="帧动画-animation"><a href="#帧动画-animation" class="headerlink" title="帧动画(animation)"></a><strong>帧动画(animation)</strong></h6><p>不仅有开始和结束状态，还可以用关键帧来定义中间的状态，做出比较复杂的动画。</p><p>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</p><p>0% 是动画的开始，100% 是动画的完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@keyframes规定动画。</span><br><span class="line">animation所有动画属性的简写属性，除了 animation-play-state 属性。</span><br><span class="line">animation-name规定 @keyframes 动画的名称。</span><br><span class="line">animation-duration规定动画完成一个周期所花费的秒或毫秒。默认是 <span class="number">0</span>。</span><br><span class="line">animation-timing-<span class="function"><span class="keyword">function</span>规定动画的速度曲线。默认是 "<span class="title">ease</span>"。</span></span><br><span class="line"><span class="function"><span class="title">animation</span>-<span class="title">delay</span>规定动画何时开始。默认是 0。</span></span><br><span class="line"><span class="function"><span class="title">animation</span>-<span class="title">iteration</span>-<span class="title">count</span>规定动画被播放的次数。默认是 1。</span></span><br><span class="line"><span class="function"><span class="title">animation</span>-<span class="title">direction</span>规定动画是否在下一周期逆向地播放。默认是 "<span class="title">normal</span>"。</span></span><br><span class="line"><span class="function"><span class="title">animation</span>-<span class="title">play</span>-<span class="title">state</span>规定动画是否正在运行或暂停。默认是 "<span class="title">running</span>"。</span></span><br><span class="line"><span class="function"><span class="title">animation</span>-<span class="title">fill</span>-<span class="title">mode</span>规定对象动画时间之外的状态。</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="number">102</span>-动画模块-其它属性下&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        *&#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .box1 &#123;</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            height: 50px;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">            left: 0;</span></span><br><span class="line"><span class="regexp">            top: 0;</span></span><br><span class="line"><span class="regexp">            animation-name: sport;</span></span><br><span class="line"><span class="regexp">            animation-duration: 5s;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        @keyframes sport &#123;</span></span><br><span class="line"><span class="regexp">            0%&#123;</span></span><br><span class="line"><span class="regexp">                left: 0;</span></span><br><span class="line"><span class="regexp">                top: 0;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            25%&#123;</span></span><br><span class="line"><span class="regexp">                left: 300px;</span></span><br><span class="line"><span class="regexp">                top: 0;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            70%&#123;</span></span><br><span class="line"><span class="regexp">                left: 300px;</span></span><br><span class="line"><span class="regexp">                top: 300px;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            95%&#123;</span></span><br><span class="line"><span class="regexp">                left: 0;</span></span><br><span class="line"><span class="regexp">                top: 300px;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            100%&#123;</span></span><br><span class="line"><span class="regexp">                left: 0;</span></span><br><span class="line"><span class="regexp">                top: 0;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="box1"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h6 id="补间动画（transition）"><a href="#补间动画（transition）" class="headerlink" title="补间动画（transition）"></a><strong>补间动画（transition）</strong></h6><p>只有开始和结束两种状态，补齐中间的动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transition-property规定设置过渡效果的 CSS 属性的名称。</span><br><span class="line">transition-duration规定完成过渡效果需要多少秒或毫秒。</span><br><span class="line">transition-timing-<span class="function"><span class="keyword">function</span>规定速度效果的速度曲线。</span></span><br><span class="line"><span class="function"><span class="title">transition</span>-<span class="title">delay</span>定义过渡效果何时开始。</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">把鼠标指针放到 div 元素上，其宽度会从 <span class="number">100</span>px 逐渐变为 <span class="number">300</span>px：</span><br><span class="line">div</span><br><span class="line">&#123;</span><br><span class="line">width:<span class="number">100</span>px;</span><br><span class="line">transition: width <span class="number">2</span>s;</span><br><span class="line">-moz-transition: width <span class="number">2</span>s; <span class="comment">/* Firefox 4 */</span></span><br><span class="line">-webkit-transition: width <span class="number">2</span>s; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">-o-transition: width <span class="number">2</span>s; <span class="comment">/* Opera */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h6><p>属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">translate(x,y)水平方向和垂直方向同时移动 transform:translate(<span class="number">100</span>px,<span class="number">20</span>px):</span><br><span class="line">scale(x,y)scale(x,y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）；</span><br><span class="line">rotate(angle)通过指定的角度参数对原元素指定一个<span class="number">2</span>D rotation（<span class="number">2</span>D 旋转） transform:rotate(<span class="number">30</span>deg)；</span><br><span class="line">skew(x-angle,y-angle)skew(x,y)使元素在水平和垂直方向同时扭曲。transform:skew(<span class="number">30</span>deg,<span class="number">10</span>deg)；</span><br></pre></td></tr></table></figure><h4 id="CSS3-新特性"><a href="#CSS3-新特性" class="headerlink" title="CSS3 新特性"></a>CSS3 新特性</h4><h6 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:last-child /* 选择元素最后一个孩子 */</span><br><span class="line">:first-child /* 选择元素第一个孩子 */</span><br><span class="line">:nth-child(1) /* 按照第几个孩子给它设置样式 */</span><br><span class="line">:nth-child(even) /* 按照偶数 */</span><br><span class="line">:nth-child(odd)  /* 按照奇数 */</span><br><span class="line">:disabled /* 选择每个禁用的E元素 */</span><br><span class="line">:checked /* 选择每个被选中的E元素 */</span><br><span class="line">:not(selector) /* 选择非 selector 元素的每个元素 */</span><br><span class="line">::selection /* 选择被用户选取的元素部分 */</span><br></pre></td></tr></table></figure><h6 id="背景和边框"><a href="#背景和边框" class="headerlink" title="背景和边框"></a>背景和边框</h6><ul><li>背景：<br>background-size：规定背景图片的尺寸（cover：填充；100% 100%：拉伸）<br>background-origin：规定背景图片的定位区域<br>对于 background-origin 属性，有如下属性<br>背景图片可以放置于 content-box、padding-box 或 border-box 区域</li><li>边框：<br>border-radius：圆角<br>box-shadow / text-shadow：阴影<br>border-image：边框图片</li></ul><h3 id="文本效果"><a href="#文本效果" class="headerlink" title="文本效果"></a>文本效果</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>text-shadow</td><td>向文本添加阴影</td></tr><tr><td>text-justify</td><td>规定当 text-align 设置为 “justify” 时所使用的对齐方法</td></tr><tr><td>text-emphasis</td><td>向元素的文本应用重点标记以及重点标记的前景色</td></tr><tr><td>text-outline</td><td>规定文本的轮廓</td></tr><tr><td>text-overflow</td><td>规定当文本溢出包含元素时发生的事情</td></tr><tr><td>text-wrap</td><td>规定文本的换行规则</td></tr><tr><td>word-break</td><td>规定非中日韩文本的换行规则</td></tr><tr><td>word-wrap</td><td>允许对长的不可分割的单词进行分割并换行到下一行</td></tr><tr><td>text-decoration</td><td>文本修饰符：overline、line-through、underline 分别是上划线、中划线、下划线</td></tr></tbody></table><h3 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h3><h6 id="1-元素选择器"><a href="#1-元素选择器" class="headerlink" title="1.元素选择器"></a>1.元素选择器</h6><p>p{} //为所有的p元素设置样式。</p><h6 id="2-ID选择器"><a href="#2-ID选择器" class="headerlink" title="2.ID选择器"></a>2.ID选择器</h6><p> #box{} //为id为box的元素设置样式。<strong>id值唯一，不能重复</strong></p><h6 id="3-类选择器"><a href="#3-类选择器" class="headerlink" title="3.类选择器"></a>3.类选择器</h6><p> .box{} //为所有的class值为box的元素设置样式。</p><h6 id="4-分组选择器（也叫并集选择器）"><a href="#4-分组选择器（也叫并集选择器）" class="headerlink" title="4.分组选择器（也叫并集选择器）"></a>4.分组选择器（也叫并集选择器）</h6><p> #box1,.box2,p{} //为为id为box1，class为box2和p的元素共同设置样式。</p><h6 id="5-交集选择器"><a href="#5-交集选择器" class="headerlink" title="5.交集选择器"></a>5.交集选择器</h6><p>p.box1{} //为class值为box1的p元素设置样式，注意id为唯一值，一般id选择器不会存在于交集选择器中（没必要）。</p><h6 id="6-后代选择器"><a href="#6-后代选择器" class="headerlink" title="6.后代选择器"></a>6.后代选择器</h6><p>语法：选择器1 选择器2{}</p><h6 id="7-子元素选择器"><a href="#7-子元素选择器" class="headerlink" title="7.子元素选择器"></a>7.子元素选择器</h6><p>p&gt;.box{} //选中制定父元素p的制定子元素。box。<strong>注意与后代元素选择器的区别</strong></p><h6 id="8-伪类选择器"><a href="#8-伪类选择器" class="headerlink" title="8.伪类选择器"></a>8.伪类选择器</h6><p>伪类可以用来表示一些特殊的状态：<br><strong>由于选择器优先级的问题，给超链接a设置伪类时，需要注意他们的顺序，一般的顺序是：</strong><br><strong>love hate</strong> 记作（爱与恨）,方便记忆<br>:link&gt;:visited&gt;:hover&gt;:active</p><h6 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h6><p>为同一个元素设置多个样式时，此时哪个样式生效由选择器的优先级确定：</p><p>选择器的优先级（权重）：</p><table><thead><tr><th align="center">·</th><th align="center">内联样式</th><th align="center">id选择器</th><th align="center">类和伪类选择器</th><th align="center">元素选择器</th><th align="center">统配选择器</th><th align="center">继承的样式</th></tr></thead><tbody><tr><td align="center">优先级</td><td align="center">1000</td><td align="center">100</td><td align="center">10</td><td align="center">1</td><td align="center">0</td><td align="center">无</td></tr></tbody></table><h2 id="H5部分"><a href="#H5部分" class="headerlink" title="H5部分"></a>H5部分</h2><h3 id="H5新增的语义化标签"><a href="#H5新增的语义化标签" class="headerlink" title="H5新增的语义化标签"></a>H5新增的语义化标签</h3><p>html5增加了<main><header><footer><aside><section><video><audio><time><data>之类的语义化标签, 搜索引擎会利用爬虫分析抓取页面结构内容，有利于SEO，页面结构更加清晰，利于维护.提高页面可访问性，不会在样式加载不正常的时候一团乱，维持基本结构。利于部分残障人士页面阅读器解析</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>浮动脱离了正常文档流,会导致父元素高度塌陷，后面元素会挤到浮动元素下方，造成布局错乱。</p><h6 id="清除浮动："><a href="#清除浮动：" class="headerlink" title="清除浮动："></a>清除浮动：</h6><p>添加额外标签</p><p>浮动元素末尾添加一个空的标签例如 <div style="clear:both"></div>，其他标签br等亦可。</p><p>使用 br标签和其自身的 html属性</p><br clear="all" /><p>父元素设置 overflow：hidden</p><p> 通过设置父元素overflow值设置为hidden(在支持BFC的浏览器触发BFC)；在IE6,IE7中还需要触发 hasLayout ，例如 zoom：1</p><p>父元素设置 overflow：auto 属性</p><p>父元素设置 overflow：auto 属性(在支持BFC的浏览器触发BFC)　同样IE6,IE7需要触发hasLayout，</p><p>父元素也设置浮动</p><p>父元素设置display:table</p><p>使用 :after 伪元素</p><h3 id="html第一行！doctype"><a href="#html第一行！doctype" class="headerlink" title="html第一行！doctype"></a>html第一行！doctype</h3><!DOCTYPE><p> 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;盒模型&quot;&gt;&lt;a href=&quot;#盒模型&quot; class=&quot;headerlink&quot; title=&quot;盒模型&quot;&gt;&lt;/a&gt;盒模型&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="H5C3" scheme="http://yoursite.com/categories/H5C3/"/>
    
    
      <category term="H5C3" scheme="http://yoursite.com/tags/H5C3/"/>
    
  </entry>
  
  <entry>
    <title>js小考验</title>
    <link href="http://yoursite.com/2020/04/03/js%E5%B0%8F%E8%80%83%E9%AA%8C/"/>
    <id>http://yoursite.com/2020/04/03/js小考验/</id>
    <published>2020-04-03T05:20:05.000Z</published>
    <updated>2020-04-03T05:23:32.128Z</updated>
    
    <content type="html"><![CDATA[<p>一：字符串自己实现翻转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> a=<span class="string">'我是一个小画家'</span></span><br><span class="line"> <span class="keyword">var</span> b=a.split(<span class="string">""</span>);;</span><br><span class="line"> <span class="keyword">var</span> newStr = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = b.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">newStr +=b[i]</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(newStr);<span class="comment">//家画小个一是我</span></span><br></pre></td></tr></table></figure><p>二：0到100被5整除的数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> str=[];</span><br><span class="line">  <span class="keyword">var</span> str2=[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>&amp;&amp;i&gt;<span class="number">80</span>)&#123;</span><br><span class="line">str2 +=i</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(str2)<span class="comment">//85 90 95 100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一：字符串自己实现翻转&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>vue $router和$route的区别</title>
    <link href="http://yoursite.com/2020/04/01/vue%20$router%E5%92%8C$route%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2020/04/01/vue $router和$route的区别/</id>
    <published>2020-04-01T01:56:21.000Z</published>
    <updated>2020-04-01T02:12:10.376Z</updated>
    
    <content type="html"><![CDATA[<p>router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象。。。经常用的跳转链接就可以用this.$router.push，和router-link跳转一样。。。</p><p>this.$router.push会往history栈中添加一个新的记录。。详细见vue官方文档<a href="https://router.vuejs.org/zh/guide/essentials/navigation.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/navigation.html</a></p><p>route相当于当前正在跳转的路由对象。。可以从里面获取name,path,params,query等。。</p><p>打印this.$route和this.$router。</p><p><img src="https://img-blog.csdn.net/20180806212532808?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdndW95dTE5OTY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>路由传参的方式</p><p>1.可以手写完整的path：</p><p>this.$router.push({path:<code>/user/${userId}</code>})</p><p>这样传递参数的话，配置路由的时候需要在path上加参数path：user/：userId。</p><p>这种接收参数的方式是this.$route.params.userId。</p><p>2.也可以用params传递：</p><p>router.push({name:’user’,params:{userId:123}})</p><p>3.也可以用query传递：</p><p>router.push({path:’user’,query:{userId:123}})</p><p>query传参是针对path的，params传参是针对name的。。接收参数的方式都差不多。。this.$route.query.和this.$route.params.</p><p>注意这只是跳转url，跳转到这个url显示什么组件，得配置路由。router跳转和<router-link>标签跳转，规则差不多。</p><p>展示上的话：</p><p><img src="https://img-blog.csdn.net/20180608212308239?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdndW95dTE5OTY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>注意：如果提供了path，params将会被忽略，但是query不属于这种情况。。。</p><p>如果使用完整路径和query传参，刷新页面时不会造成路由传参的参数丢失。</p><p>有时候配置路由时path有时候会加 ‘/‘ 有时候不加,例如path:’name’和path:’/name’。区别其实官方文档说了，我当时没仔细看，导致这个问题还困扰了我很久。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象。。。经常用的跳转链接就可以用this.$router.push，和router-link跳转一样。。。&lt;/p&gt;
&lt;p&gt;this.$router.push会往
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>解决vue修改数据页面不重新渲染问题</title>
    <link href="http://yoursite.com/2020/03/31/%E8%A7%A3%E5%86%B3vue%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E9%A1%B5%E9%9D%A2%E4%B8%8D%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/03/31/解决vue修改数据页面不重新渲染问题/</id>
    <published>2020-03-31T14:15:37.000Z</published>
    <updated>2020-03-31T14:28:20.043Z</updated>
    
    <content type="html"><![CDATA[<p>vue渲染机制和如何解决数据修改页面不刷新问题的多种方法<br>本文不讲原理，只讲干货易懂易学，(感觉能学到知识，麻烦给小编来个赞！)</p><p>首先 第一点，vue底层是 将data对象传人，使用Object.definePropety,转换为getter和setter，所以，vue不支持IE8.</p><p>1.简单介绍一下Object.definePropety,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line">obj</span><br><span class="line">要在其上定义属性的对象。</span><br><span class="line">prop</span><br><span class="line">要定义或修改的属性的名称。</span><br><span class="line">descriptor</span><br><span class="line">将被定义或修改的属性描述符</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'我的名字叫'</span>+name);</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(value) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'你叫'</span>+value)</span><br><span class="line">      name = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">    obj.name =<span class="string">'张三'</span>;<span class="comment">//你叫张三</span></span><br><span class="line">    obj.name<span class="comment">//我的名字叫张三</span></span><br></pre></td></tr></table></figure><p>从上述我们可以简单发现。当我们对这个对象的name属性赋值的时候，就会触发set方法，获取name属性的时候就会触发get方法；</p><p>2.因此在vue中写在data中的属性是是可以转换成getter和setter，换一句话就是响应式的，其他定义在data之外的数据，是无法响应的渲染，意思就是改变数据页面也不会刷新，所以一切要渲染到页面上的数据，必须写在data中，</p><p>不需要的，可以定义在this上，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    a:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// `vm.a` 是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.b = <span class="number">2</span></span><br><span class="line"><span class="comment">// `vm.b` 是非响应式的</span></span><br></pre></td></tr></table></figure><p>3.简单介绍完了，我们来列举几个不刷新的实例当然上述也是一种</p><p>第一种：修改对象的某一属性</p><p>vue只会将已经在data中声明的属性变为响应，没有声明的是不响应的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div v-<span class="keyword">for</span>=<span class="string">'item in list'</span>&gt;&#123;&#123;item&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click='click'&gt;改变&lt;/</span>button&gt;</span><br><span class="line">      &lt;button @click=<span class="string">'hadelClick'</span>&gt;解决方法&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default(&#123;</span></span><br><span class="line"><span class="regexp">    data()&#123;</span></span><br><span class="line"><span class="regexp">      return&#123;</span></span><br><span class="line"><span class="regexp">        list:&#123;a:'a',b:'b'&#125;,</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">          click() &#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/  未声明不触发渲染</span></span><br><span class="line"><span class="regexp">           this.list.c='c'</span></span><br><span class="line"><span class="regexp">             &#125;,</span></span><br><span class="line"><span class="regexp">      hadelClick()&#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 解决方法，使用vue提供的$set方法来触发渲染</span></span><br><span class="line"><span class="regexp">        this.$set(this.list,'d','d')</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>当然如果我们要添加多个属性，可以使用 Object.assign() 用于将所有可枚举属性的值从一个或多个源对象复制到目标对象，并返回目标对象。(简单说就是合并到第一个参数中)</p><p>this.list = Object.assign({},this.list,{c:’c’,d:’d’})</p><h6 id="第二种：修改数组对象的某一属性"><a href="#第二种：修改数组对象的某一属性" class="headerlink" title="第二种：修改数组对象的某一属性"></a>第二种：修改数组对象的某一属性</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div v-for=&apos;item in list&apos;&gt;&#123;&#123;item.a&#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;button @click=&apos;click&apos;&gt;改变&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&apos;hadelClick&apos;&gt;解决方法&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default(&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        list:[&#123;a:&apos;vue&apos;&#125;,&#123;a:&apos;react&apos;&#125;,&#123;a:&apos;js&apos;&#125;],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">          click() &#123;</span><br><span class="line">            //想这样直接给数组中的某一个对象直接赋值，是无法动态渲染的（即改变了数据，页面不渲染）</span><br><span class="line">            this.list[0] = &#123;a:&apos;css&apos;&#125; //页面不渲染</span><br><span class="line">            console.log(this.list)  //[&#123;a:&apos;css&apos;&#125;,&#123;a:&apos;react&apos;&#125;,&#123;a:&apos;js&apos;&#125;]</span><br><span class="line">          &#125;,</span><br><span class="line">          hadelClick()&#123;</span><br><span class="line">            // 解决方法，使用vue提供的$set方法来触发渲染</span><br><span class="line">            this.$set(this.list[1],&apos;a&apos;,&apos;css&apos;)</span><br><span class="line">            console.log(this.list)//[&#123;a:&apos;css&apos;&#125;,&#123;a:&apos;css&apos;&#125;,&#123;a:&apos;js&apos;&#125;]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当然前文讲过，vue会遍历data中的数据，将对象转换成setter和getter。所以数组中的也不例外，所以上述操作</p><p>改成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">click()&#123;</span><br><span class="line"><span class="keyword">this</span>.list[<span class="number">0</span>].a = css <span class="comment">//依旧能够触发setter。实现数据重新渲染</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue中更多的是数组的操作不刷新，一种是通过索引赋值，一种是修改数组长度，如何解决呢？</p><p>vue官方也给了方法</p><p>数组的API，中能够改变原始数组的都能触发更新；</p><p>push()<br>pop()<br>shift()<br>unshift()<br>splice()<br>sort()<br>reverse()<br>第二种是返回一个新数组的，这种数组在引用地址上已经发生根本改变，这样的赋值操作是能触发更新的（这是处理不刷新的思路，就是改变引用地址，重新赋值触发更新）</p><p>简单说，用数组的API就是直接用原数组接收改变的数组，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  &lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div v-<span class="keyword">for</span>=<span class="string">'item in list'</span>&gt;&#123;&#123;item.a&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click='click'&gt;改变原数组&lt;/</span>button&gt;</span><br><span class="line">      &lt;button @click=<span class="string">'hadelClick'</span>&gt;不改变原数组&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default(&#123;</span></span><br><span class="line"><span class="regexp">    data()&#123;</span></span><br><span class="line"><span class="regexp">      return&#123;</span></span><br><span class="line"><span class="regexp">       list:[&#123;a:'vue'&#125;,&#123;a:'react'&#125;,&#123;a:'js'&#125;],</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">          click() &#123;</span></span><br><span class="line"><span class="regexp">           /</span><span class="regexp">/改变数组刷新页面</span></span><br><span class="line"><span class="regexp">              this.list.push(&#123;a:'css'&#125;)</span></span><br><span class="line"><span class="regexp">          &#125;,</span></span><br><span class="line"><span class="regexp">          hadelClick()&#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/重新赋值刷新页面      </span></span><br><span class="line"><span class="regexp">            this.list =  this.list.map(item=&gt;&#123;</span></span><br><span class="line"><span class="regexp">                  item.a = 'css'</span></span><br><span class="line"><span class="regexp">                  return item</span></span><br><span class="line"><span class="regexp">                &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>最后提供解决思路（以上都搞不定的话）</p><p>对象和数组都是引用传递，要变成新数组，来接受，就需要改变源，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">第一种</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = []<span class="comment">//新数组</span></span><br><span class="line"><span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;  <span class="comment">//需要渲染的数组</span></span><br><span class="line">    <span class="comment">//执行你的操作，最后用放到arr中</span></span><br><span class="line">    arr.push(item)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">this</span>.list = arr <span class="comment">//相当于返回一个新数组可以触发渲染</span></span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line"></span><br><span class="line"><span class="comment">//想要直接改变渲染数组中的数据，但没有渲染</span></span><br><span class="line"><span class="comment">//解决方法：</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">this</span>.list.slice(<span class="number">0</span>);<span class="comment">//深拷贝，（等价一个新的数组）</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//执行你的操作</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//赋值操作</span></span><br><span class="line"><span class="keyword">this</span>.list =  arr</span><br></pre></td></tr></table></figure><p>js数组深拷贝详解<br>上述如果都无法执行，但你的数据缺实修改了，可以使用this.$forceUpdate()方法 （强制刷新）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div v-<span class="keyword">for</span>=<span class="string">'item in list'</span>&gt;&#123;&#123;item.a&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click='click'&gt;改变&lt;/</span>button&gt;</span><br><span class="line">      &lt;button @click=<span class="string">'hadelClick'</span>&gt;解决方法&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default(&#123;</span></span><br><span class="line"><span class="regexp">    data()&#123;</span></span><br><span class="line"><span class="regexp">      return&#123;</span></span><br><span class="line"><span class="regexp">        list:[&#123;a:'vue'&#125;,&#123;a:'react'&#125;,&#123;a:'js'&#125;],</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">          click() &#123;</span></span><br><span class="line"><span class="regexp">            this.list[0] = &#123;a:'css'&#125; /</span><span class="regexp">/页面不渲染</span></span><br><span class="line"><span class="regexp">            console.log(this.list)  /</span><span class="regexp">/[&#123;a:'css'&#125;,&#123;a:'react'&#125;,&#123;a:'js'&#125;]</span></span><br><span class="line"><span class="regexp">          &#125;,</span></span><br><span class="line"><span class="regexp">          hadelClick()&#123;</span></span><br><span class="line"><span class="regexp">            this.list[0] = &#123;a:'css'&#125; /</span><span class="regexp">/页面不渲染</span></span><br><span class="line"><span class="regexp">            console.log(this.list)  /</span><span class="regexp">/[&#123;a:'css'&#125;,&#123;a:'react'&#125;,&#123;a:'js'&#125;]</span></span><br><span class="line"><span class="regexp">              this.$forceUpdate();/</span><span class="regexp">/强制刷新</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue渲染机制和如何解决数据修改页面不刷新问题的多种方法&lt;br&gt;本文不讲原理，只讲干货易懂易学，(感觉能学到知识，麻烦给小编来个赞！)&lt;/p&gt;
&lt;p&gt;首先 第一点，vue底层是 将data对象传人，使用Object.definePropety,转换为getter和sette
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>最近面试遇到的问题</title>
    <link href="http://yoursite.com/2020/03/31/%E6%9C%80%E8%BF%91%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/03/31/最近面试遇到的问题/</id>
    <published>2020-03-31T13:57:01.000Z</published>
    <updated>2020-04-02T14:09:12.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="箭头函数-写法"><a href="#箭头函数-写法" class="headerlink" title="箭头函数 写法"></a>箭头函数 写法</h2><p>附加规则</p><p>当函数参数只有一个时，可省略小括号，但没有时，不能省略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b=<span class="function"><span class="params">Counter</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">444</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数体（中括号）中有且只有一行return语句时，中括号和return关键字可以省略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b=<span class="function"><span class="params">Counter</span>=&gt;</span><span class="number">444</span></span><br></pre></td></tr></table></figure><p>函数返回json对象，且只有一行return语句时，返回的简写要加小括号;如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">a</span> =&gt;</span>(&#123;“a”:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span>, …, 参数N) =&gt; &#123; 函数声明 &#125;</span><br><span class="line"><span class="comment">//相当于：(参数1, 参数2, …, 参数N) =&gt;&#123; return 表达式; &#125;</span></span><br><span class="line">(参数<span class="number">1</span>, 参数<span class="number">2</span>, …, 参数N) =&gt; 表达式（单一）</span><br><span class="line"><span class="comment">// 当只有一个参数时，圆括号是可选的：</span></span><br><span class="line">(单一参数) =&gt; &#123;函数声明&#125;</span><br><span class="line">单一参数 =&gt; &#123;函数声明&#125;</span><br><span class="line"><span class="comment">// 没有参数的函数应该写成一对圆括号。</span></span><br><span class="line">() =&gt; &#123;函数声明&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b=<span class="function"><span class="keyword">function</span> (<span class="params">Counter</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">444</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b());</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="function"><span class="params">Counter</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">444</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b());</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">    <span class="keyword">let</span> b=<span class="function"><span class="params">Counter</span>=&gt;</span><span class="number">444</span></span><br><span class="line"><span class="built_in">console</span>.log(b());</span><br></pre></td></tr></table></figure><h2 id="object的key与value"><a href="#object的key与value" class="headerlink" title="object的key与value"></a>object的key与value</h2><p>根据动态key得到某对象中相对应的value的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key=<span class="string">"name1"</span></span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line"><span class="string">"name1"</span>:<span class="string">"张三"</span>,</span><br><span class="line"><span class="string">"name2"</span>:<span class="string">"李四"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))<span class="comment">// ["name1", "name2"]</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name1)<span class="comment">//张三</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.key)<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[key])<span class="comment">//张三</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">'name1'</span>] )<span class="comment">//张三</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p);<span class="comment">//   取得是key值</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj[p]);<span class="comment">//取得是value值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue中props的默认写法"><a href="#vue中props的默认写法" class="headerlink" title="vue中props的默认写法"></a>vue中props的默认写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  rowClick: &#123;</span><br><span class="line">    type: <span class="built_in">Function</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">"标题"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  display: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">"table"</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  columnCount: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="number">4</span></span><br><span class="line">  &#125;,</span><br><span class="line">  columns: &#123;</span><br><span class="line">    type: <span class="built_in">Array</span>,</span><br><span class="line">    <span class="keyword">default</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  showPage: &#123;</span><br><span class="line">    type: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  api: &#123;</span><br><span class="line">    type: <span class="built_in">Object</span>,</span><br><span class="line">    <span class="keyword">default</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  parameter: &#123;</span><br><span class="line">    type: <span class="built_in">Object</span>,</span><br><span class="line">    <span class="keyword">default</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  defaultParameter: &#123;</span><br><span class="line">    type: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">default</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>// 如果是数组或对象，默认值必须是一个函数来返回*而不是直接写，否则报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确：</span></span><br><span class="line"> menu:&#123;</span><br><span class="line">     type:<span class="built_in">Array</span>,</span><br><span class="line">     <span class="keyword">default</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> []</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">propE: &#123;</span><br><span class="line">type: <span class="built_in">Array</span>,</span><br><span class="line"><span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义一个验证函数</span></span><br><span class="line">propF: &#123;</span><br><span class="line">validator: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> value &gt; <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//错误</span></span><br><span class="line"> menu:&#123;</span><br><span class="line">     type:<span class="built_in">Array</span>,</span><br><span class="line">     <span class="keyword">default</span>:[]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>或者直接跟上面第一个代码一样，不管什么类型，都写在函数返回中。</p><h2 id="VUE-create与mounted的区别"><a href="#VUE-create与mounted的区别" class="headerlink" title="VUE-create与mounted的区别"></a>VUE-create与mounted的区别</h2><p>create与mounted的区别</p><pre><code>1）created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。2）mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</code></pre><h2 id="let与const的区别"><a href="#let与const的区别" class="headerlink" title="let与const的区别"></a>let与const的区别</h2><p>let与const都是只在声明所在的块级作用域内有效。</p><p>let声明的变量可以改变，值和类型都可以改变，没有限制。</p><p>const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a ;<span class="comment">//报错,一旦声明变量，应该立即赋值！！const b = 2;b = 3//报错，因为定义常量之后不能成重新赋值！！</span></span><br></pre></td></tr></table></figure><p>对于复合类型的变量，如数组和对象，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [];names = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">//出错，因为变量names指向的地址不能发生改变，应始终指向[]所在的地址！！！[1,2,3]与[]不是同一个地址</span></span><br><span class="line"><span class="comment">//不会报错，因为names指向的地址不变，改变的只是内部数据const names = [];</span></span><br><span class="line">names[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">names[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">names[<span class="number">2</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure><p> 如果想让定义的对象或数组的内部数据也不能够修改和改变，可以使用object.freeze(names)进行冻结，这样为对象添加新属性就不起作用。</p><p>除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> constantize = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach( <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span> ) &#123;</span><br><span class="line">      constantize( obj[key] );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断数据类型的方法"><a href="#判断数据类型的方法" class="headerlink" title="判断数据类型的方法"></a>判断数据类型的方法</h2><h6 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><strong>typeof</strong></h6><p>如果使用typeof来判断Number，String，Boolean，Function，undefined，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(</span><br><span class="line">    typeof 123, //&quot;number&quot;</span><br><span class="line">    typeof &apos;dsfsf&apos;, //&quot;string&quot;</span><br><span class="line">    typeof false, //&quot;boolean&quot;</span><br><span class="line">    typeof function()&#123;console.log(&apos;aaa&apos;);&#125;, //&quot;function&quot;</span><br><span class="line">    typeof undefined, //&quot;undefined&quot;</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h6><p>instanceof运算符需要指定一个构造函数，或者说指定一个特定的类型，它用来判断这个构造函数的原型是否在给定对象的原型链上。Array  Object  Function Date</p><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(</span><br><span class="line">    [1,2,3] instanceof Array, //true</span><br><span class="line">    &#123;a:1,b:2,c:3&#125; instanceof Object, //true</span><br><span class="line">    function()&#123;console.log(&apos;aaa&apos;);&#125; instanceof Function, //true</span><br><span class="line">    new Date() instanceof Date, //true</span><br><span class="line">    /^[a-zA-Z]&#123;5,20&#125;$/ instanceof RegExp, //true</span><br><span class="line">    new Error() instanceof Error //true</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Number，String，Boolean没有检测出他们的类型，但是如果使用下面的写法则可以检测出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var num = new Number(123);</span><br><span class="line">var str = new String(&apos;dsfsf&apos;);</span><br><span class="line">var boolean = new Boolean(false);</span><br></pre></td></tr></table></figure><p>还需要注意null和undefined都返回了false，这是因为它们的类型就是自己本身，并不是Object创建出来它们，所以返回了false。</p><h6 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a><strong>constructor</strong></h6><p>constructor是prototype对象上的属性，指向构造函数。根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用constructor属性的。</p><p>如果输出一个类型的实例的constructor，就如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(new Number(123).constructor)</span><br><span class="line">//ƒ Number() &#123; [native code] &#125;</span><br></pre></td></tr></table></figure><p>可以看到它指向了Number的构造函数，因此，可以使用num.constructor==Number来判断一个变量是不是Number类型的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var num  = 123;</span><br><span class="line">var str  = &apos;abcdef&apos;;</span><br><span class="line">var bool = true;</span><br><span class="line">var arr  = [1, 2, 3, 4];</span><br><span class="line">var json = &#123;name:&apos;wenzi&apos;, age:25&#125;;</span><br><span class="line">var func = function()&#123; console.log(&apos;this is function&apos;); &#125;</span><br><span class="line">var und  = undefined;</span><br><span class="line">var nul  = null;</span><br><span class="line">var date = new Date();</span><br><span class="line">var reg  = /^[a-zA-Z]&#123;5,20&#125;$/;</span><br><span class="line">var error= new Error();</span><br><span class="line"></span><br><span class="line">function Person()&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">var tom = new Person();</span><br><span class="line"></span><br><span class="line">// undefined和null没有constructor属性</span><br><span class="line">console.log(</span><br><span class="line">    tom.constructor==Person,</span><br><span class="line">    num.constructor==Number,</span><br><span class="line">    str.constructor==String,</span><br><span class="line">    bool.constructor==Boolean,</span><br><span class="line">    arr.constructor==Array,</span><br><span class="line">    json.constructor==Object,</span><br><span class="line">    func.constructor==Function,</span><br><span class="line">    date.constructor==Date,</span><br><span class="line">    reg.constructor==RegExp,</span><br><span class="line">    error.constructor==Error</span><br><span class="line">);</span><br><span class="line">//所有结果均为true</span><br></pre></td></tr></table></figure><p>除了undefined和null之外，其他类型都可以通过constructor属性来判断类型。</p><h6 id="使用toString-检测对象类型"><a href="#使用toString-检测对象类型" class="headerlink" title="使用toString()检测对象类型"></a>使用toString()检测对象类型</h6><p>可以通过toString() 来获取每个对象的类型。为了每个对象都能通过 Object.prototype.toString() 来检测，需要以 Function.prototype.call() 或者 Function.prototype.apply() 的形式来调用，传递要检查的对象作为第一个参数，称为thisArg。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var toString = Object.prototype.toString;</span><br><span class="line"></span><br><span class="line">toString.call(123); //&quot;[object Number]&quot;</span><br><span class="line">toString.call(&apos;abcdef&apos;); //&quot;[object String]&quot;</span><br><span class="line">toString.call(true); //&quot;[object Boolean]&quot;</span><br><span class="line">toString.call([1, 2, 3, 4]); //&quot;[object Array]&quot;</span><br><span class="line">toString.call(&#123;name:&apos;wenzi&apos;, age:25&#125;); //&quot;[object Object]&quot;</span><br><span class="line">toString.call(function()&#123; console.log(&apos;this is function&apos;); &#125;); //&quot;[object Function]&quot;</span><br><span class="line">toString.call(undefined); //&quot;[object Undefined]&quot;</span><br><span class="line">toString.call(null); //&quot;[object Null]&quot;</span><br><span class="line">toString.call(new Date()); //&quot;[object Date]&quot;</span><br><span class="line">toString.call(/^[a-zA-Z]&#123;5,20&#125;$/); //&quot;[object RegExp]&quot;</span><br><span class="line">toString.call(new Error()); //&quot;[object Error]&quot;</span><br></pre></td></tr></table></figure><p>这样可以看到使用Object.prototype.toString.call()的方式来判断一个变量的类型是最准确的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;箭头函数-写法&quot;&gt;&lt;a href=&quot;#箭头函数-写法&quot; class=&quot;headerlink&quot; title=&quot;箭头函数 写法&quot;&gt;&lt;/a&gt;箭头函数 写法&lt;/h2&gt;&lt;p&gt;附加规则&lt;/p&gt;
&lt;p&gt;当函数参数只有一个时，可省略小括号，但没有时，不能省略。&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的兼容性问题及解决方案</title>
    <link href="http://yoursite.com/2020/03/31/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2020/03/31/浏览器的兼容性问题及解决方案/</id>
    <published>2020-03-31T12:09:44.000Z</published>
    <updated>2020-03-31T12:11:11.463Z</updated>
    
    <content type="html"><![CDATA[<p>常见的浏览器内核：<br>常见的浏览器内核可以分四种：Trident、Gecko、Blink、Webkit<br>IE浏览器    Trident内核，也成为IE内核<br>Chrome浏览器    Webkit内核，现在是Blink内核<br>Firefox浏览器    Gecko内核，俗称Firefox内核<br>Safari浏览器    Webkit内核<br>Opera浏览器    最初是自己的Presto内核，后来加入谷歌大军，从Webkit又到了Blink内核；<br>360浏览器    IE+Chrome双内核<br>猎豹浏览器    IE+Chrome双内核<br>百度浏览器    IE内核<br>QQ浏览器    Trident（兼容模式）+Webkit（高速模式）<br>常见的兼容性问题：<br>1、不同浏览器的标签默认的外补丁( margin )和内补丁(padding)不同<br>解决方案： css 里增加通配符 * { margin: 0; padding: 0; }</p><p>2、IE6双边距问题；在 IE6中设置了float , 同时又设置margin , 就会出现边距问题<br>解决方案：设置display:inline;</p><p>3、当标签的高度设置小于10px，在IE6、IE7中会超出自己设置的高度<br>解决方案：超出高度的标签设置overflow:hidden,或者设置line-height的值小于你的设置高度</p><p>4、图片默认有间距<br>解决方案：使用float 为img 布局</p><p>5、IE9一下浏览器不能使用opacity<br>解决方案：<br>opacity: 0.5;filter: alpha(opacity = 50);filter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50);</p><p>6、边距重叠问题；当相邻两个元素都设置了margin 边距时，margin 将取最大值，舍弃最小值；<br>解决方案：为了不让边重叠，可以给子元素增加一个父级元素，并设置父级元素为overflow:hidden；</p><p>7、cursor:hand 显示手型在safari 上不支持<br>解决方案：统一使用 cursor:pointer</p><p>8、两个块级元素，父元素设置了overflow:auto；子元素设置了position:relative ;且高度大于父元素，在IE6、IE7会被隐藏而不是溢出；<br>解决方案：父级元素设置position:relative</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常见的浏览器内核：&lt;br&gt;常见的浏览器内核可以分四种：Trident、Gecko、Blink、Webkit&lt;br&gt;IE浏览器    Trident内核，也成为IE内核&lt;br&gt;Chrome浏览器    Webkit内核，现在是Blink内核&lt;br&gt;Firefox浏览器    
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>js三大事件</title>
    <link href="http://yoursite.com/2020/03/30/js%E4%B8%89%E5%A4%A7%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/03/30/js三大事件/</id>
    <published>2020-03-30T13:16:12.000Z</published>
    <updated>2020-03-30T13:31:01.012Z</updated>
    
    <content type="html"><![CDATA[<h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>click：单击<br>dblclick：双击<br>mousedown：鼠标按下<br>mouseup：鼠标抬起<br>mouseover：鼠标悬浮<br>mouseout：鼠标离开<br>mousemove：鼠标移动<br>mouseenter：鼠标进入<br>mouseleave：鼠标离开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button οnclick=&quot;myClick()&quot;&gt;鼠标单击&lt;/button&gt;</span><br><span class="line">&lt;button οndblclick=&quot;myDBClick()&quot;&gt;鼠标双击&lt;/button&gt;</span><br><span class="line">&lt;button οnmοusedοwn=&quot;myMouseDown()&quot; οnmοuseup=&quot;myMouseUp()&quot;&gt;鼠标按下和抬起&lt;/button&gt;</span><br><span class="line">&lt;button οnmοuseοver=&quot;myMouseOver()&quot; οnmοuseοut=&quot;myMouseOut()&quot;&gt;鼠标悬浮和离开&lt;/button&gt;</span><br><span class="line">&lt;button οnmοusemοve=&quot;myMouseMove()&quot;&gt;鼠标移动&lt;/button&gt;</span><br><span class="line">&lt;button οnmοuseenter=&quot;myMouseEnter()&quot; οnmοuseleave=&quot;myMouseLeave()&quot;&gt;鼠标进入和离开&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你单击了按钮！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myDBClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你双击了按钮！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myMouseDown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"鼠标按下了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myMouseUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"鼠标抬起了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myMouseOver</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"鼠标悬浮！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myMouseOut</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"鼠标离开！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myMouseMove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"鼠标移动！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myMouseEnter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"鼠标进入！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myMouseLeave</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"鼠标离开！"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>keydown：按键按下</p><p>keyup：按键抬起</p><p>keypress：按键按下抬起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input id=<span class="string">"name"</span> type=<span class="string">"text"</span> οnkeydοwn=<span class="string">"myKeyDown(this.id)"</span> οnkeyup=<span class="string">"myKeyUp(this.id)"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*输出输入的字符*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myKeyDown</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(id).value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*按键结束，字体转换为大写*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myKeyUp</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(id).value;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(id).value = text.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML事件"><a href="#HTML事件" class="headerlink" title="HTML事件"></a>HTML事件</h3><p>load：文档加载完成</p><p>select：被选中的时候</p><p>change：内容被改变</p><p>focus：得到光标</p><p>resize：窗口尺寸变化</p><p>scroll：滚动条移动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body οnlοad=<span class="string">"loaded()"</span>&gt;</span><br><span class="line">&lt;div style=<span class="string">"height: 3000px"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"name"</span> οnselect=<span class="string">"mySelect(this.id)"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"name2"</span> οnchange=<span class="string">"myChange(this.id)"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"name3"</span> οnfοcus=<span class="string">"myFocus()"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"文档加载完毕！"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*window.onunload = function () &#123;</span></span><br><span class="line"><span class="comment">     alert("文档被关闭！");</span></span><br><span class="line"><span class="comment">     &#125;;*/</span></span><br><span class="line">    <span class="comment">/*打印选中的文本*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mySelect</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(id).value;</span><br><span class="line">        <span class="built_in">console</span>.log(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*内容被改变时*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myChange</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(id).value;</span><br><span class="line">        <span class="built_in">console</span>.log(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*得到光标*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myFocus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"得到光标！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*窗口尺寸变化*/</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"窗口变化！"</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*滚动条移动*/</span></span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"滚动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件模型："><a href="#事件模型：" class="headerlink" title="事件模型："></a>事件模型：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--脚本模型：行内绑定--&gt;</span><br><span class="line">&lt;button οnclick=<span class="string">"alert('hello')"</span>&gt;hello&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--内联模型--&gt;</span></span><br><span class="line"><span class="regexp">&lt;button οnclick="showHello()"&gt;hello2&lt;/</span>button&gt;</span><br><span class="line">&lt;!--动态绑定--&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;hello3&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*DOM0：同一个元素只能添加一个同类事件</span></span><br><span class="line"><span class="comment">     * 如果添加多个，后面的会把前面的覆盖掉*/</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*DOM2:可以给一个元素添加多个同类事件*/</span></span><br><span class="line">    btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"hello1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"hello2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/*不同浏览器的兼容写法*/</span></span><br><span class="line">    <span class="comment">/*IE*/</span></span><br><span class="line">    <span class="keyword">if</span> (btn.attachEvent) &#123;</span><br><span class="line">        btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello3"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">/*W3C*/</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"hello4"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件冒泡与事件捕获："><a href="#事件冒泡与事件捕获：" class="headerlink" title="事件冒泡与事件捕获："></a>事件冒泡与事件捕获：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        #div1&#123;</span><br><span class="line">            width: <span class="number">400</span>px;</span><br><span class="line">            height: <span class="number">400</span>px;</span><br><span class="line">            background-color: #0dfaff;</span><br><span class="line">        &#125;</span><br><span class="line">        #div2&#123;</span><br><span class="line">            width: <span class="number">300</span>px;</span><br><span class="line">            height: <span class="number">300</span>px;</span><br><span class="line">            background-color: #33ff66;</span><br><span class="line">        &#125;</span><br><span class="line">        #div3&#123;</span><br><span class="line">            width: <span class="number">200</span>px;</span><br><span class="line">            height: <span class="number">200</span>px;</span><br><span class="line">            background-color: #fff24a;</span><br><span class="line">        &#125;</span><br><span class="line">        #div4&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background-color: #ff4968;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"div1"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"div2"</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">"div3"</span>&gt;</span><br><span class="line">            &lt;div id=<span class="string">"div4"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var div1 = document.getElementById("div1");</span></span><br><span class="line"><span class="regexp">    div1.addEventListener("click",function (event) &#123;</span></span><br><span class="line"><span class="regexp">        /</span>*阻止事件冒泡*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        event.stopPropagation();</span></span><br><span class="line"><span class="regexp">        alert("div1");</span></span><br><span class="line"><span class="regexp">    &#125;,false);</span></span><br><span class="line"><span class="regexp">    var div2 = document.getElementById("div2");</span></span><br><span class="line"><span class="regexp">    div2.addEventListener("click",function (event) &#123;</span></span><br><span class="line"><span class="regexp">        /</span>*阻止事件冒泡*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        event.stopPropagation();</span></span><br><span class="line"><span class="regexp">        alert("div2");</span></span><br><span class="line"><span class="regexp">    &#125;,false);</span></span><br><span class="line"><span class="regexp">    var div3 = document.getElementById("div3");</span></span><br><span class="line"><span class="regexp">    div3.addEventListener("click",function (event) &#123;</span></span><br><span class="line"><span class="regexp">        /</span>*阻止事件冒泡*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        event.stopPropagation();</span></span><br><span class="line"><span class="regexp">        alert("div3");</span></span><br><span class="line"><span class="regexp">    &#125;,false);</span></span><br><span class="line"><span class="regexp">    var div4 = document.getElementById("div4");</span></span><br><span class="line"><span class="regexp">    div4.addEventListener("click",function (event) &#123;</span></span><br><span class="line"><span class="regexp">        /</span>*阻止事件冒泡*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">        event.stopPropagation();</span></span><br><span class="line"><span class="regexp">        alert("div4");</span></span><br><span class="line"><span class="regexp">    &#125;,false);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="阻止默认事件："><a href="#阻止默认事件：" class="headerlink" title="阻止默认事件："></a>阻止默认事件：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">"http://www.baidu.com"</span> οnclick=<span class="string">"stop(event)"</span>&gt;百度&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.preventDefault()) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(<span class="string">"不跳转！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;鼠标事件&quot;&gt;&lt;a href=&quot;#鼠标事件&quot; class=&quot;headerlink&quot; title=&quot;鼠标事件&quot;&gt;&lt;/a&gt;鼠标事件&lt;/h3&gt;&lt;p&gt;click：单击&lt;br&gt;dblclick：双击&lt;br&gt;mousedown：鼠标按下&lt;br&gt;mouseup：鼠标抬起&lt;br&gt;m
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>js事件委托</title>
    <link href="http://yoursite.com/2020/03/30/js%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <id>http://yoursite.com/2020/03/30/js事件委托/</id>
    <published>2020-03-30T12:50:37.000Z</published>
    <updated>2020-03-31T13:58:30.499Z</updated>
    
    <content type="html"><![CDATA[<p>事件代理（event delegation）：事件代理又称事件委托，是javaScript中绑定事件的常用技巧。顾名思义，‘事件代理’就是把原本需要绑定的事件委托给父元素，让父元素负责事件监听。事件代理的原理是DOM元素的事件冒泡。使用事件代理的好处是可以提高性能<br>由一个案例来引出：<br>现在有一个需求：点击li添加背景颜色，并排他，点哪个哪个有背景颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"selected"</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;6&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">7</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;8&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/css</span></span><br><span class="line"><span class="regexp">*&#123;</span></span><br><span class="line"><span class="regexp">            margin: 0;</span></span><br><span class="line"><span class="regexp">            padding: 0;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        ul&#123;</span></span><br><span class="line"><span class="regexp">            list-style: none;</span></span><br><span class="line"><span class="regexp">            width: 400px;</span></span><br><span class="line"><span class="regexp">            border: 1px solid #000;</span></span><br><span class="line"><span class="regexp">            margin: 100px auto;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        li&#123;</span></span><br><span class="line"><span class="regexp">            width: 100%;</span></span><br><span class="line"><span class="regexp">            height: 50px;</span></span><br><span class="line"><span class="regexp">            border-bottom: 1px solid #000;</span></span><br><span class="line"><span class="regexp">            box-sizing: border-box;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .selected&#123;</span></span><br><span class="line"><span class="regexp">            background-color: red;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/js</span></span><br><span class="line"><span class="regexp">    let oItems = document.querySelectorAll('li');</span></span><br><span class="line"><span class="regexp">    let currentItem = oItems[0];</span></span><br><span class="line"><span class="regexp">    for (let item of oItems)&#123;</span></span><br><span class="line"><span class="regexp">        item.onclick = change;/</span><span class="regexp">/一定不要写成了item.onclick = change();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    function change() &#123;</span></span><br><span class="line"><span class="regexp">        currentItem.className = '';</span></span><br><span class="line"><span class="regexp">        this.className = 'selected';</span></span><br><span class="line"><span class="regexp">        currentItem = this;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure><p>事件委托的做法：监听ul的点击，而不是直接监听li的点击，li将事件冒泡到它的父元素ul，再通过事件对象拿到当前被点击的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oUl = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span><br><span class="line">   <span class="keyword">let</span> oLi = <span class="built_in">document</span>.querySelector(<span class="string">'.selected'</span>);</span><br><span class="line">   oUl.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">       event = event || <span class="built_in">window</span>.event;<span class="comment">//兼容所有浏览器</span></span><br><span class="line">       oLi.className = <span class="string">''</span>;</span><br><span class="line">       <span class="keyword">let</span> item = event.target;<span class="comment">//event.target为当前点击的li</span></span><br><span class="line">       item.className = <span class="string">'selected'</span>;</span><br><span class="line">       oLi = item;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事件代理（event delegation）：事件代理又称事件委托，是javaScript中绑定事件的常用技巧。顾名思义，‘事件代理’就是把原本需要绑定的事件委托给父元素，让父元素负责事件监听。事件代理的原理是DOM元素的事件冒泡。使用事件代理的好处是可以提高性能&lt;br&gt;由
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>this的指向</title>
    <link href="http://yoursite.com/2020/03/30/this%E7%9A%84%E6%8C%87%E5%90%91/"/>
    <id>http://yoursite.com/2020/03/30/this的指向/</id>
    <published>2020-03-30T10:41:03.000Z</published>
    <updated>2020-03-30T11:07:47.770Z</updated>
    
    <content type="html"><![CDATA[<p> 想要理解this，你可以先记住以下两点：<br> 1：this永远指向一个对象；<br> 2：this的指向完全取决于函数调用的位置；<br> 针对以上的第一点特别好理解，不管在什么地方使用this，它必然会指向某个对象；确定了第一点后，也引出了一个问题，就是this使用的地方到底在哪里，而第二点就解释了这个问题，但关键是在JavaScript语言之中，一切皆对象，运行环境也是对象，所以函数都是在某个对象下运行，而this就是函数运行时所在的对象（环境）。这本来并不会让我们糊涂，但是JavaScript支持运行环境动态切换，也就是说，this的指向是动态的，很难事先确定到底指向哪个对象，这才是最让我们感到困惑的地方。</p><p>先看原理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    s:<span class="string">'1'</span>,</span><br><span class="line">    f:fun</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'2'</span>;</span><br><span class="line"></span><br><span class="line">obj.f(); <span class="comment">//1</span></span><br><span class="line">fun(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>上述代码中，fun函数被调用了两次，显而易见的是两次的结果不一样；<br> 很多人都会这样解释，obj.f()的调用中，因为运行环境在obj对象内，因此函数中的this指向对象obj;<br> 而在全局作用域下调用 fun() ，函数中的 this 就会指向全局作用域对象window;<br> 但是大部分人不会告诉你，this的指向为什么会发生改变，this指向的改变到底是什么时候发生的；<br> 而搞懂了这些，this的使用才不会出现意外；</p><p>首先我们应该知道，在JS中，数组、函数、对象都是引用类型，在参数传递时也就是引用传递；</p><p>上面的代码中，obj 对象有两个属性，但是属性的值类型是不同的，在内存中的表现形式也是不同的；</p><p><img src="https:////upload-images.jianshu.io/upload_images/760002-93bf4ce441a2d935.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><a href="mailto:QQ20180624-152138@2x.png" target="_blank" rel="noopener">QQ20180624-152138@2x.png</a></p><p>调用时就成了这个样子：</p><p><img src="https:////upload-images.jianshu.io/upload_images/760002-dd79914dcaab6128.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><a href="mailto:QQ20180624-152547@2x-1.png" target="_blank" rel="noopener">QQ20180624-152547@2x-1.png</a></p><p>因为函数在js中既可以当做值传递和返回，也可当做对象和构造函数，所有函数在运行时需要确定其当前的运行环境，this就出生了，所以，this会根据运行环境的改变而改变，同时，函数中的this也只能在运行时才能最终确定运行环境；</p><p>再来看下面的代码，你可能会更加理解this对于运行环境的动态切换规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">   name: <span class="string">'张三'</span>,</span><br><span class="line">   f: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'姓名：'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">   name: <span class="string">'李四'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">B.f = A.f;</span><br><span class="line">B.f()   <span class="comment">// 姓名：李四</span></span><br><span class="line">A.f()   <span class="comment">// 姓名：张三</span></span><br></pre></td></tr></table></figure><p>上面代码中，A.f属性被赋给B.f，也就是A对象将匿名函数的 地址 赋值给B对象；<br> 那么在调用时，函数分别根据运行环境的不同，指向对象A和B;</p><p><img src="https:////upload-images.jianshu.io/upload_images/760002-421ce8e0e2b38ddf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><a href="mailto:QQ20180624-155603@2x-1.png" target="_blank" rel="noopener">QQ20180624-155603@2x-1.png</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    fn: foo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    o1: obj2</span><br><span class="line">&#125;;</span><br><span class="line">obj1.o1.fn(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>obj1对象的o1属性值是obj2对象的地址，而obj2对象的fn属性的值是函数foo的地址；<br> 函数foo的调用环境是在obj2中的，因此this指向对象obj2;</p><p>那么接下来，我们对this使用最频繁的几种情况做一个总结，最常见的基本就是以下5种：<br> 对象中的方法，事件绑定 ，构造函数 ，定时器，函数对象的call()、apply() 方法；<br> 上面在讲解this原理是，我们使用对象的方法中的this来说明的，在此就不重复讲解了，不懂的同学们，请返回去重新阅读；</p><p>事件绑定中的this<br> 事件绑定共有三种方式：行内绑定、动态绑定、事件监听；<br> 行内绑定的两种情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">onclick</span>=<span class="string">"clickFun()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">clickFun</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span> <span class="comment">// 此函数的运行环境在全局window对象下，因此this指向window;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">onclick</span>=<span class="string">"this"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 运行环境在节点对象中，因此this指向本节点对象 --&gt;</span></span><br></pre></td></tr></table></figure><p>行内绑定事件的语法是在html节点内，以节点属性的方式绑定，属性名是事件名称前面加’on’，属性的值则是一段可执行的 JS 代码段；而属性值最常见的就是一个函数调用；<br> 当事件触发时，属性值就会作为JS代码被执行，当前运行环境下没有clickFun函数，因此浏览器就需要跳出当前运行环境，在整个环境中寻找一个叫clickFun的函数并执行这个函数，所以函数内部的this就指向了全局对象window；如果不是一个函数调用，直接在当前节点对象环境下使用this，那么显然this就会指向当前节点对象；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">动态绑定与事件监听：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="actionscript">   btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">this</span> ;  <span class="comment">// this指向本节点对象</span></span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为动态绑定的事件本就是为节点对象的属性(事件名称前面加’on’)重新赋值为一个匿名函数，因此函数在执行时就是在节点对象的环境下，this自然就指向了本节点对象；<br>事件监听中this指向的原理与动态绑定基本一致，所以不再阐述；</p><p>构造函数中的this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pro</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="string">'1'</span>;</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Pro();</span><br></pre></td></tr></table></figure><p><img src="https:////upload-images.jianshu.io/upload_images/760002-d72224112ba63899.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>20180815-160135-1.jpg</p><p>对于接触过 JS 面向对象编程的同学来说，上面的代码和图示基本都能看懂，new 一个构造函数并执行函数内部代码的过程就是这个五个步骤，当 JS 引擎指向到第3步的时候，会强制的将this指向新创建出来的这个对象；基本不需要理解，因为这本就是 JS 中的语法规则，记住就可以了；</p><p>window定时器中的this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(obj.fun,<span class="number">1000</span>);      <span class="comment">// this指向window对象</span></span><br><span class="line">setInterval(<span class="string">'obj.fun()'</span>,<span class="number">1000</span>);  <span class="comment">// this指向obj对象</span></span><br></pre></td></tr></table></figure><p>setInterval() 是window对象下内置的一个方法，接受两个参数，第一个参数允许是一个函数或者是一段可执行的 JS 代码，第二个参数则是执行前面函数或者代码的时间间隔；<br> 在上面的代码中，setInterval(obj.fun,1000) 的第一个参数是obj对象的fun ，因为 JS 中函数可以被当做值来做引用传递，实际就是将这个函数的地址当做参数传递给了 setInterval 方法，换句话说就是 setInterval 的第一参数接受了一个函数，那么此时1000毫秒后，函数的运行就已经是在window对象下了，也就是函数的调用者已经变成了window对象，所以其中的this则指向的全局window对象；<br> 而在 setInterval(‘obj.fun()’,1000) 中的第一个参数，<strong>实际则是传入的一段可执行的 JS 代码；</strong> <strong>1000毫秒后当 JS 引擎来执行这段代码时，则是通过 obj 对象来找到 fun 函数并调用执行</strong>，那么函数的运行环境依然在 对象 obj 内，所以函数内部的this也就指向了 obj 对象；</p><p>函数对象的call()、apply() 方法<br><strong>函数作为对象提供了call()，apply() 方法，他们也可以用来调用函数，这两个方法都接受一个对象作为参数，用来指定本次调用时函数中this的指向；</strong></p><p>call()方法<br> call方法使用的语法规则<br> 函数名称.call(obj,arg1,arg2…argN);<br> 参数说明:<br> obj:函数内this要指向的对象,<br> arg1,arg2…argN :参数列表，参数与参数之间使用一个逗号隔开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lisi = &#123;<span class="attr">names</span>:<span class="string">'lisi'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> zs = &#123;<span class="attr">names</span>:<span class="string">'zhangsan'</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.names);</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">23</span>);<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将f函数中的this指向固定到对象zs上；</span></span><br><span class="line">f.call(zs,<span class="number">32</span>);<span class="comment">//zhangsan</span></span><br></pre></td></tr></table></figure><p>apply()方法<br> 函数名称.apply(obj,[arg1,arg2…,argN])<br> 参数说明:<br> obj :this要指向的对象<br> [arg1,arg2…argN] : 参数列表，要求格式为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lisi = &#123;<span class="attr">name</span>:<span class="string">'lisi'</span>&#125;; </span><br><span class="line"><span class="keyword">var</span> zs = &#123;<span class="attr">name</span>:<span class="string">'zhangsan'</span>&#125;; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+age+sex); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将f函数中的this指向固定到对象zs上；</span></span><br><span class="line">f.apply(zs,[<span class="number">23</span>,<span class="string">'nan'</span>]);</span><br></pre></td></tr></table></figure><p>注意：call和apply的作用一致，区别仅仅在函数实参参数传递的方式上；</p><p>这个两个方法的最大作用基本就是用来强制指定函数调用时this的指向；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 想要理解this，你可以先记住以下两点：&lt;br&gt; 1：this永远指向一个对象；&lt;br&gt; 2：this的指向完全取决于函数调用的位置；&lt;br&gt; 针对以上的第一点特别好理解，不管在什么地方使用this，它必然会指向某个对象；确定了第一点后，也引出了一个问题，就是this使用
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>整理一些前端基础技能点</title>
    <link href="http://yoursite.com/2020/03/27/%E6%95%B4%E7%90%86%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD%E7%82%B9/"/>
    <id>http://yoursite.com/2020/03/27/整理一些前端基础技能点/</id>
    <published>2020-03-27T10:08:33.000Z</published>
    <updated>2020-04-05T05:11:11.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><h3 id="get和post有什么区别？"><a href="#get和post有什么区别？" class="headerlink" title="get和post有什么区别？"></a>get和post有什么区别？</h3><p>（1）get的参数会显示在浏览器地址栏中，而post的参数不会显示在浏览器地址栏中；</p><p>（2）使用post提交的页面在点击【刷新】按钮的时候浏览器一般会提示“是否重新提交”，而get则不会；</p><p>（3）用get的页面可以被搜索引擎抓取，而用post的则不可以；</p><p>（4）用post可以提交的数据量非常大，而用get可以提交的数据量则非常小(2k)，受限于网页地址的长度。</p><p>（5）用post可以进行文件的提交，而用get则不可以。</p><h3 id="给DOM元素绑定事件有哪些方法？"><a href="#给DOM元素绑定事件有哪些方法？" class="headerlink" title="给DOM元素绑定事件有哪些方法？"></a>给DOM元素绑定事件有哪些方法？</h3><h6 id="1-在html标签中直接绑定；"><a href="#1-在html标签中直接绑定；" class="headerlink" title="1. 在html标签中直接绑定；"></a><strong>1. 在html标签中直接绑定；</strong></h6><h6 id="2-在js中获取到相应的dom元素后绑定；"><a href="#2-在js中获取到相应的dom元素后绑定；" class="headerlink" title="2. 在js中获取到相应的dom元素后绑定；"></a><strong>2. 在js中获取到相应的dom元素后绑定；</strong></h6><h6 id="3-在js中使用addEventListener（）实现绑定；"><a href="#3-在js中使用addEventListener（）实现绑定；" class="headerlink" title="3. 在js中使用addEventListener（）实现绑定；"></a><strong>3. 在js中使用addEventListener（）实现绑定；</strong></h6><h3 id="JS中的闭包指什么？"><a href="#JS中的闭包指什么？" class="headerlink" title="JS中的闭包指什么？"></a>JS中的闭包指什么？</h3><p>闭包就是能够读取其他函数内部变量的函数。</p><h6 id="我们首先知道闭包有3个特性："><a href="#我们首先知道闭包有3个特性：" class="headerlink" title="我们首先知道闭包有3个特性："></a>我们首先知道闭包有3个特性：</h6><p>①函数嵌套函数</p><p>②函数内部可以引用函数外部的参数和变量</p><p>③参数和变量不会被垃圾回收机制回收</p><h6 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a><strong>变量作用域</strong></h6><p>要理解闭包，首先要理解javascript的特殊的变量作用域。</p><p>变量的作用域无非就两种：全局变量和局部变量。</p><p>javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。</p><p>注意点：在函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明的是一个全局变量！</p><p>闭包优点：</p><p>一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中</p><p>闭包缺点：</p><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><h3 id="JS执行机制详解"><a href="#JS执行机制详解" class="headerlink" title="JS执行机制详解"></a>JS执行机制详解</h3><h6 id="一、为什么JS是单线程"><a href="#一、为什么JS是单线程" class="headerlink" title="一、为什么JS是单线程"></a>一、为什么JS是单线程</h6><p>JS作为浏览器脚本语言，它的主要用途是与用户互动，以及操作DOM，因此js是单线程，也避免了同时操作同一个DOM的矛盾问题；</p><h6 id="二、为什么需要异步"><a href="#二、为什么需要异步" class="headerlink" title="二、为什么需要异步"></a>二、为什么需要异步</h6><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>如果JS中不存在异步,只能自上而下执行,如果上一行解析时间很长,那么下面的代码就会被阻塞。对于用户而言,阻塞就意味着”卡死”,这样就导致了很差的用户体验</p><h6 id="三、单线程是如何实现异步的"><a href="#三、单线程是如何实现异步的" class="headerlink" title="三、单线程是如何实现异步的"></a>三、单线程是如何实现异步的</h6><p>是通过事件循环(event loop),理解了event loop机制,就理解了JS的执行机制.<br>JavaScript语言的设计者意识到，所以他将JavaScript的任务分为两种，在主线程上执行的任务”同步任务”，被主线程挂载起来的任务”异步任务”,后者一般是放在一个叫任务队列的数据结构中。</p><p><strong>任务队列</strong><br>任务队列就是一个事件队列，其中最重要的是异步任务事件和定时事件。</p><p>异步任务事件：一般我们绑定一个事件，比如点击事件等等，都是在某一个时刻才触发执行的，这个时候就得放到任务队列里面，等待执行，而在某个DOM节点上绑定了事件，就要有相应的回调函数,它们是相辅相成的。<br>所谓回调函数，就是那些被挂载起来，等待执行的代码，主线程执行任务队列里面的异步任务，其实就是执行这些回调函数。<br>定时事件：setInterval 和 setTimeout</p><p><strong>同步任务和异步任务</strong><br>同步任务(synchronous)：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；<br>异步任务(asynchronous)：不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。 (异步任务事件，定时事件，页面渲染请求图片获取异步资源等)<br>异步执行机制如下：<br>所有同步任务都在主线程上执行，形成一个执行栈。<br>主线程之外，还有一个“任务队列”,只要异步任务有了运行结果，就在“任务队列”之中放置一个事件。<br>一旦“执行栈”中的所有同步任务执行完毕了，系统就会读取“任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br>主线程不断重复上面的三步。（事件循环）</p><p><strong>宏任务和微任务</strong><br>不同类型的任务会进入不同的Event Queue，有宏任务的队列和微任务的队列。<br>这里需要注意的是new Promise是会进入到主线程中立刻执行，而promise.then则属于微任务。<br>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后——开始第一轮循环执行完所有微任务——下一轮宏任务…</p><p>宏任务(macro-task)：整体代码script、setTimeOut、setInterval<br>微任务(mincro-task)：promise.then、process.nextTick(node)</p><p><strong>Event Loop</strong></p><p>综合以上事件循环步骤如下：<br><img src="https://img-blog.csdnimg.cn/20190727201859866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pENzE3ODIyMDIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>整体的script(作为第一个宏任务)开始执行的时候，会把所有代码分为两部分：“同步任务”、“异步任务”；<br>同步任务会直接进入主线程依次执行；<br>异步任务会再分为宏任务和微任务；<br>宏任务进入到Event Table中，并在里面注册回调函数，每当指定的事件完成时，Event Table会将这个函数移到Event Queue中；<br>微任务也会进入到另一个Event Table中，并在里面注册回调函数，每当指定的事件完成时，Event Table会将这个函数移到Event Queue中；<br>当主线程内的任务执行完毕，主线程为空时，会检查微任务的Event Queue，如果有任务，就全部执行，如果没有就执行下一个宏任务；<br>上述过程会不断重复，这就是Event Loop事件循环；</p><h3 id="JQuery与Vue的区别"><a href="#JQuery与Vue的区别" class="headerlink" title="JQuery与Vue的区别"></a>JQuery与Vue的区别</h3><ul><li>数据和视图的分离-&gt;解耦（开放封闭原则）<br>jq的数据与视图混在一块（意大利面条式代码），Vue的数据与视图分离</li><li>以数据驱动视图（只关心数据变化，DOM操作被封装）<br>jq直接用js修改视图，Vue以数据驱动视图</li></ul><h3 id="js的垃圾回收机制理解"><a href="#js的垃圾回收机制理解" class="headerlink" title="js的垃圾回收机制理解"></a>js的垃圾回收机制理解</h3><p>长话短说：<br>js的浏览器不同机制不同主要有1.标记清除，2.引用计数</p><h6 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h6><p>大多数浏览器都是标记清除。<br>当变量进入执行环境，将其标记为“进入环境”，当变量离开环境时标记为“离开环境”。<br>垃圾收集器在运行的时候会把内存中的变量都加上标记，然后去掉环境中的变量及被环境变量所引用的变量（即闭包），之后标记了的变量都是要回收的。</p><h6 id="引用计数-主要用在IE游览器"><a href="#引用计数-主要用在IE游览器" class="headerlink" title="引用计数(主要用在IE游览器)"></a>引用计数(主要用在IE游览器)</h6><p>引用计数就是跟踪每个变量被引用的次数。当声明了一个变量并将一个引用类型赋值给它时引用次数就是1.当这个引用次数变为0时就回收内存。<br>引用计数可能造成内存泄漏，因为循环引用变量。</p><h3 id="js的三种本地存储方法"><a href="#js的三种本地存储方法" class="headerlink" title="js的三种本地存储方法"></a>js的三种本地存储方法</h3><p>sessionStorage</p><p>localStorage</p><p>cookier</p><h6 id="相同点：都保存在浏览器端"><a href="#相同点：都保存在浏览器端" class="headerlink" title="相同点：都保存在浏览器端"></a>相同点：都保存在浏览器端</h6><h6 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h6><h6 id="①传递方式不同"><a href="#①传递方式不同" class="headerlink" title="①传递方式不同"></a>①传递方式不同</h6><p>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。</p><p>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</p><h6 id="②数据大小不同"><a href="#②数据大小不同" class="headerlink" title="②数据大小不同"></a>②数据大小不同</h6><p>cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。<br>存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。</p><p>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</p><h6 id="③数据有效期不同"><a href="#③数据有效期不同" class="headerlink" title="③数据有效期不同"></a>③数据有效期不同</h6><p>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；</p><p>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；</p><p>cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</p><h6 id="④作用域不同"><a href="#④作用域不同" class="headerlink" title="④作用域不同"></a>④作用域不同</h6><p>sessionStorage不能在不同的浏览器窗口中共享，即使是同一个页面；</p><p>localStorage 在所有同源窗口中都是共享的；</p><p>cookie也是在所有同源窗口中都是共享的。</p><p>Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。<br>Web Storage 的 api 接口使用更方便</p><h3 id="跨域的原因及解决办法"><a href="#跨域的原因及解决办法" class="headerlink" title="跨域的原因及解决办法"></a>跨域的原因及解决办法</h3><p>跨域浏览器安全策略造成，非同协议，源，端口　皆为跨域，为了避免csrf跨域请求伪造，请求会被浏览器拦截。解决跨域请求的常用方法是：</p><ul><li><p>通过代理来避免，比如使用 Nginx 在后端转发请求，避免了前端出现跨域的问题。</p></li><li><p>通过 Jsonp 跨域</p></li><li><p>其它跨域解决方案</p><p> Jsonp 跨域原理。浏览器的同源策略把跨域请求都禁止了但是页面中的 <script><img><iframe>标签是例外，不受同源策略限制。Jsonp 就是利用 <script> 标签跨域特性进行跨域数据访问。</p><p>JSONP 的缺点是：它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。</p><h6 id="vue跨域实现与原理（proxyTable）"><a href="#vue跨域实现与原理（proxyTable）" class="headerlink" title="vue跨域实现与原理（proxyTable）"></a>vue跨域实现与原理（proxyTable）</h6><p>在项目根目录下的config文件夹中的index.js中</p><p>proxyTable原理</p><p>浏览器是禁止跨域的，但是服务端不禁止，在本地运行npm run dev等命令时实际上是用node运行了一个服务器，因此proxyTable实际上是将请求发给自己的服务器，再由服务器转发给后台服务器，做了亦曾代理，因为不会出现跨域问题。</p></li></ul><h3 id="什么是-Cookie-和-Session"><a href="#什么是-Cookie-和-Session" class="headerlink" title="什么是 Cookie 和 Session ?"></a>什么是 Cookie 和 Session ?</h3><h6 id="什么是-Cookie"><a href="#什么是-Cookie" class="headerlink" title="什么是 Cookie"></a><strong>什么是 Cookie</strong></h6><p>HTTP Cookie（也叫 Web Cookie或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p><p>Cookie 主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><h6 id="什么是-Session"><a href="#什么是-Session" class="headerlink" title="什么是 Session"></a><strong>什么是 Session</strong></h6><p>Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</p><h6 id="Cookie-和-Session-有什么不同？"><a href="#Cookie-和-Session-有什么不同？" class="headerlink" title="Cookie 和 Session 有什么不同？"></a>Cookie 和 Session 有什么不同？</h6><ul><li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li><li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li><li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li><li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li><li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</li></ul><h3 id="for-in和for-of的区别？"><a href="#for-in和for-of的区别？" class="headerlink" title="for in和for of的区别？"></a>for in和for of的区别？</h3><h6 id="for…in是遍历数组、对象的key"><a href="#for…in是遍历数组、对象的key" class="headerlink" title="for…in是遍历数组、对象的key"></a>for…in是遍历数组、对象的key</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1, 2, 3];</span><br><span class="line">for (let i in arr) &#123;</span><br><span class="line">console.log(i)//0  1  2</span><br><span class="line">console.log(arr[i])//1 2 3</span><br><span class="line">&#125;</span><br><span class="line">let obj = &#123;</span><br><span class="line">name: &apos;wuxiaodi&apos;,</span><br><span class="line">age: 18,</span><br><span class="line">&#125;;</span><br><span class="line">for (let i in obj) &#123;</span><br><span class="line">console.log(i)//name  age</span><br><span class="line">console.log(obj[i])//wuxiaodi 18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="for-of是遍历数组的value"><a href="#for-of是遍历数组的value" class="headerlink" title="for...of是遍历数组的value"></a>for...of是遍历数组的value</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i)<span class="comment">//1  2  3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JS的基本类型和引用类型有哪些呢？"><a href="#JS的基本类型和引用类型有哪些呢？" class="headerlink" title="JS的基本类型和引用类型有哪些呢？"></a>JS的基本类型和引用类型有哪些呢？</h3><p>​    基本类型（单类型）：除Object。 String、Number、boolean、null、undefined。</p><p>​    引用类型：object。里面包含的 function、Array、Date。</p><p>JS数据类型：如何判断数据类型？</p><p>1､typeof 操作符（通用：上面有内容有讲到）</p><p>2､toString ( )    </p><pre><code>作用：其他类型转成 string 的方法支持：number、boolean、string、object 不支持：null 、undefined</code></pre><p>​    3､toLocaleString ( )</p><pre><code>把数组转成本地字符串  </code></pre><p> 4､检测数组类型的方法         </p><pre><code> ① instanceof  操作符②对象的 constructor 属性  ③ Array.isArray( ) 检验值是否为数组</code></pre><p>JS数据类型：null 和 undefined 有什么区别？</p><pre><code>Null 只有一个值，是 null。不存在的对象。Undefined 只有一个值，是undefined。没有初始化。undefined 是从 null 中派生出来的。简单理解就是：undefined 是没有定义的，null 是定义了但是为空。</code></pre><p>JS数据类型：== 和 === 有什么区别，什么场景下使用？</p><pre><code>== 表示相同。        比较的是物理地址，相当于比较两个对象的 hashCode ，肯定不相等的。        类型不同，值也可能相等。=== 表示严格相同。        例：同为 null／undefined ，相等。简单理解就是 == 就是先比较数据类型是否一样。=== 类型不同直接就是 false。</code></pre><p>JS数据类型：对象可以比较地？</p><pre><code>对象是可以比较，遍历比较key 和 value就行， Object.is(value1, value2)。</code></pre><p>JS数据类型</p><pre><code>Object 类型   ECMAjavascript中的对象其实就是一组数据和功能的集合。对象可以通过执行new操作符后跟要创建的对象类型的名称来创建。创建object类型的实例并为其添加属性（或）方法，就可以自定义创建对象。   如：var o = new Object( );   object 的每个实例都有下列属性和方法：   constructor：保存着用于创建当前对象的函数。（构造函数)constructor就是object();   hasOwnProperty(propertyName):用于检查给定的当前属性在当前对象实例中）而不是在实例原型中）是否存在。其中，作为参数的属性名（propertyName)必须以字稚串形式指定（例如：o.hasOwnProperty(“name”))。   isPrototypeOf(object):用于检查传入的对象是否是传入对象原型。   propertyIsEnumerable(propertyName):用于检查给定属性是否能够用for-in语句。与hasOwnProperty（）方法一样，作为参数的属性名必须以字符串形式指定。   toLocaleString( ):返回对象的字符串表示，该字符串与执行环境的地区对应。   toString( ):返回对象的字符串表示。   valueOf( ):返回对象的字符串、数值或者布尔值表示。通常与toString( )方法的返回值得相同。   ECMAJS中object是所有对象的基础，因些所有对象都具有这些基本的属性和方法。Symbol 类型   Symbol 类型的对象永远不相等，即便创建的时候传入相同的值。因此，可以用解决属性名冲突的问题（适用于多少编码），做为标记。   这是 es6 新增的数据类型。    </code></pre><h2 id="Es6部分"><a href="#Es6部分" class="headerlink" title="Es6部分"></a>Es6部分</h2><h3 id="let、const和var的区别"><a href="#let、const和var的区别" class="headerlink" title="let、const和var的区别"></a>let、const和var的区别</h3><h6 id="let"><a href="#let" class="headerlink" title="let:"></a>let:</h6><p>let 的用法类似于 var，但所声明的变量只在 let命令所在的代码块内有效（一个“{}”相当于一个代码块）</p><p>let它所声明的变量一定要在声明后使用，否则报错。</p><p>只要块级作用域内存在 let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p><p>不允许重复声明</p><h6 id="const"><a href="#const" class="headerlink" title="const:"></a>const:</h6><p>const 命令用来声明一个只读的常量（除了引用类型，一旦声明该常量的值就不能改变）</p><p>const一旦声明就必须立即初始化，不能留到以后赋值。</p><p>const的作用域与 let命令相同：只在当前所在的块级作用域内有效。</p><p>const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><p>不允许重复声明</p><p>const并非变量的值不能改，而是变量指向的那个内存地址所保存的数据不能改动。</p><h6 id="var"><a href="#var" class="headerlink" title="var:"></a>var:</h6><p>var在当前作用域有效能重复生明，存在变量提升，声明变量时可以不赋值</p><h3 id="es6常用的语法"><a href="#es6常用的语法" class="headerlink" title="es6常用的语法"></a>es6常用的语法</h3><h6 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a><strong>模板字符串</strong></h6><p>模板字符串就是一种字符串的新的表现形式</p><p>字符串和变量拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">` hello `</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">' hello '</span></span><br><span class="line"><span class="keyword">let</span> s3 =<span class="string">" a "</span> + s1 + <span class="string">" b "</span> + s2;</span><br><span class="line"><span class="keyword">let</span> s4 = <span class="string">` a <span class="subst">$&#123;s1&#125;</span> b <span class="subst">$&#123;s2&#125;</span>`</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(s3)<span class="comment">//a  hello  b  hello </span></span><br><span class="line"><span class="built_in">console</span>.log(s4)<span class="comment">//a  hello  b  hello</span></span><br></pre></td></tr></table></figure><h6 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h6><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p><p>对象结构赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123; <span class="attr">name</span>:<span class="string">"abc"</span>,<span class="attr">age</span>:<span class="number">18</span> &#125;;</span><br><span class="line">    <span class="comment">//用解构赋值的方式获取name、age</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123; name &#125; = obj; <span class="comment">//创建了一个变量name，值=obj.name</span></span><br><span class="line">    <span class="built_in">console</span>.log(name);  <span class="comment">//"abc"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123; age &#125; =obj;</span><br><span class="line">    <span class="built_in">console</span>.log(age);  <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>函数参数结构赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj.age);</span><br><span class="line">        <span class="built_in">console</span>.log(obj.height)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">&#123; age,height &#125;</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(age);</span><br><span class="line">        <span class="built_in">console</span>.log(height)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h6><p>ES6 允许使用“箭头”（=>）定义函数。</p><p>场景：用于替换匿名函数<br>复制代码<br>基本用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line">    div.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你好"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//箭头函数</span></span><br><span class="line">    div.onclick=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你好"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">有一个参数的箭头函数</span><br><span class="line"><span class="keyword">var</span> fn=<span class="function">(<span class="params">a</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//等价于：</span></span><br><span class="line">    <span class="keyword">var</span> fn=<span class="function"><span class="params">a</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="三点扩散运算符"><a href="#三点扩散运算符" class="headerlink" title="三点扩散运算符"></a>三点扩散运算符</h6><p>扩展运算符将一个<strong>数组</strong>转为用逗号分隔的<strong>参数序列</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(...[a, b, c])  </span><br><span class="line">// a b c</span><br></pre></td></tr></table></figure><p> 用于：</p><p>1 将一个数组，变为参数序列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">3</span>, <span class="number">45</span>];</span><br><span class="line"><span class="built_in">console</span>.log(add(...numbers))<span class="comment">//48</span></span><br></pre></td></tr></table></figure><p>2 使用扩展运算符展开数组代替apply方法，将数组转为函数的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5 取数组最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>, [<span class="number">654</span>, <span class="number">233</span>, <span class="number">727</span>]))；</span><br><span class="line"><span class="comment">//ES6 扩展运算符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...[<span class="number">654</span>, <span class="number">233</span>, <span class="number">727</span>]))</span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">654</span>, <span class="number">233</span>, <span class="number">727</span>))</span><br></pre></td></tr></table></figure><p>3 使用push将一个数组添加到另一个数组的尾部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5  写法  </span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  </span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];  </span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2); <span class="comment">//push方法的参数不能是数组，通过apply方法使用push方法 </span></span><br><span class="line"><span class="comment">// ES6  写法  </span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  </span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];  </span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure><p>4 合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];  </span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'c'</span>];  </span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];  </span><br><span class="line"><span class="comment">// ES5 的合并数组  </span></span><br><span class="line">arr1.concat(arr2, arr3);  </span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]  </span></span><br><span class="line"><span class="comment">// ES6 的合并数组  </span></span><br><span class="line">[...arr1, ...arr2, ...arr3]  </span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure><p>5 将字符串转换为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">'hello'</span>]  </span><br><span class="line"><span class="comment">// [ "h", "e", "l", "l", "o" ] </span></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line">str.split(<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>6 转换伪数组为真数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);  </span><br><span class="line"><span class="keyword">var</span> array = [...nodeList]; <span class="comment">//具有iterator接口的伪数组，非iterator对象用Array.from方法</span></span><br></pre></td></tr></table></figure><p>7 map结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line">[<span class="number">1</span>, <span class="string">'one'</span>],  </span><br><span class="line">[<span class="number">2</span>, <span class="string">'two'</span>],  </span><br><span class="line">[<span class="number">3</span>, <span class="string">'three'</span>],  </span><br><span class="line">]);  </span><br><span class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="Git部分"><a href="#Git部分" class="headerlink" title="Git部分"></a>Git部分</h2><h4 id="git常用操作"><a href="#git常用操作" class="headerlink" title="git常用操作"></a>git常用操作</h4><h6 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h6><p>git clone git@ip://<strong>.git              “ip”为远程仓库ip，“/**</strong>/**.git”为远程仓库在远程机器的路径</p><h6 id="克隆仓库到本地之后cd命令到本地仓库目录，可以对分支进行操作，"><a href="#克隆仓库到本地之后cd命令到本地仓库目录，可以对分支进行操作，" class="headerlink" title="克隆仓库到本地之后cd命令到本地仓库目录，可以对分支进行操作，"></a>克隆仓库到本地之后cd命令到本地仓库目录，可以对分支进行操作，</h6><p>   “git branch”---------查看本地分支</p><p>   “git branch -r”---------查看远程仓库所有名称</p><p>   “git branch -a”----- 查看本地分支和远程分支；</p><p>   "git branch a"---------则创建一个新的本地分支，git branch -d <name>删除分支；</p><p>   "git remote"-----------查看远程仓库名称</p><h6 id="更新本地仓库"><a href="#更新本地仓库" class="headerlink" title="更新本地仓库"></a>更新本地仓库</h6><p>   “git fetch origin 远程分支:本地分支”---------首先把需要需要更新的远程仓库fetch到本地        注：此操作不会与远程分支建立映射关系</p><p>   “git merge dev1”---------当前分支与dev1分支合并，dev1为从远程fetch下来的，合并时使用 --no-ff</p><p>   "git pull"----------------merge完成后用pul更新</p><p><strong>有时候有很多没有用的文件冲突强制更新：</strong></p><p>git fetch --all</p><p>git reset --hard origin/master</p><p>git pull</p><h6 id="本地仓库提交新文件"><a href="#本地仓库提交新文件" class="headerlink" title="本地仓库提交新文件"></a>本地仓库提交新文件</h6><p>   “git add 文件“-----------------添加到缓存</p><p>   “git commit -m ’****‘“-----------------提交到本地仓库</p><h6 id="将本地分支推送到远程仓库"><a href="#将本地分支推送到远程仓库" class="headerlink" title="将本地分支推送到远程仓库"></a>将本地分支推送到远程仓库</h6><p>   ”git push 远程主机名 本地分支名:远程分支名“</p><h6 id="本地创建一个新分支"><a href="#本地创建一个新分支" class="headerlink" title="本地创建一个新分支"></a>本地创建一个新分支</h6><p> git checkout -b test-----------------创建test分支并切换到此分支</p><p> git checkout test-----------------    切到test分支</p><p> git merge test---------------------合并test分支到当前分支</p><h6 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h6><p> git log --graph</p><h6 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h6><p> git reset HEAD <file></p><h6 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h6><p> git reset --hard 数字----------数字为log查看的一次提交</p><p> git reset --hard HEAD^-----------上一个版本</p><p> git clean -d -fx---------------------表示删除没有add的文件</p><h6 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h6><p>git status</p><h2 id="优化部分"><a href="#优化部分" class="headerlink" title="优化部分"></a>优化部分</h2><h3 id="如何进行SEO优化："><a href="#如何进行SEO优化：" class="headerlink" title="如何进行SEO优化："></a>如何进行SEO优化：</h3><p>关键字加粗</p><p>页面布局结构扁平化</p><p>结构元素语义化</p><p>标题权重划分</p><p>使用robots.txt</p><p>URL适当使用[nofollow]</p><p>URL链接优化</p><p>提供网站sitemap</p><p>提高网站打开速度</p><p>尽量不使用单页面</p><p>增加页面导航</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>(1) 避免head标签js堵塞：</p><p>　　所有放在head标签里面的js和css都会堵塞渲染；如果这些css和js需要加载很久的话，那么页面就空白了；</p><p>　　解决办法：一是把script放到body后面，这也是很多网站采取的方法。</p><p>　　　　　　　第二种是给script加defer或者async的属性，一旦script是defer或者async延迟的，那么这个script将会异步加载，但不会马上执行，会在readystatechange变为Interactive后按顺序依次执行；(做了解)</p><p>(2) 减少head里面的css资源：</p><p>　　css必须放在head标签里面，如果放在body里面会造成对layout好的dom进行重排造成页面闪烁；但是一旦放在head标签里面又会堵塞页面渲染；所以要尽可能的减小css体积。</p><p>(3) 压缩和缓存：</p><p>(4)延迟加载图片：</p><p>这里没有直接给src路径，而是在页面加载完成后用js操作src，减少了页面加载图片的时间，首先把整个页面结构呈现给用户；惰性加载图片也是差不多；当用户滑动页面到一定高度时（监听scroll事件），再动态的依次对图片进行处理；</p><p>(5) DNS解析优化：</p><p>　　DNS查询需要花费大量时间来返回一个主机名的IP地址；</p><p>　　在我们的网站中，可能会加载到很多个域的东西，比如引入了百度地图啊之类的sdk和一些自己的子域名服务；第一次打开网站时要做很多次DNS查找；DNS预读取能够加快网页打开时间；</p><p>解决办法：在head中写上几个link标签，对标签中的地址提前解析DNS，这个解析是并行发生的，不会堵塞页面渲染；</p><p>6）html别嵌套太多层，加重页面layout的压力；</p><p>7）css选择器的合理运用，减少匹配的计算量；</p><p>8）js中别滥用闭包，会加深作用域链，增加变量查找时间；</p><p>9）减少http请求等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS部分&quot;&gt;&lt;a href=&quot;#JS部分&quot; class=&quot;headerlink&quot; title=&quot;JS部分&quot;&gt;&lt;/a&gt;JS部分&lt;/h2&gt;&lt;h3 id=&quot;get和post有什么区别？&quot;&gt;&lt;a href=&quot;#get和post有什么区别？&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>vuex详解</title>
    <link href="http://yoursite.com/2020/03/26/vuex%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/03/26/vuex详解/</id>
    <published>2020-03-26T06:30:39.000Z</published>
    <updated>2020-03-26T08:08:49.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vuex是什么？"><a href="#vuex是什么？" class="headerlink" title="vuex是什么？"></a>vuex是什么？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vuex 是一个专门为vue.js应用程序开发的状态管理模式。</span><br></pre></td></tr></table></figure><p>这个状态我们可以理解为在data中的属性，需要共享给其他组件使用的部分。</p><p>也就是说，是我们需要共享的data，使用vuex进行统一集中式的管理</p><h2 id="vuex中，有默认的五种基本的对象："><a href="#vuex中，有默认的五种基本的对象：" class="headerlink" title="vuex中，有默认的五种基本的对象："></a><strong>vuex中，有默认的五种基本的对象：</strong></h2><ul><li>state：存储状态（变量）</li><li>getters：对数据获取之前的再次编译，可以理解为state的计算属性。我们在组件中使用 $sotre.getters.fun()</li><li>mutations：修改状态，并且是同步的。在组件中使用$store.commit(‘’,params)。这个和我们组件中的自定义事件类似。</li><li>actions：异步操作。在组件中使用是$store.dispath(‘’)</li><li>modules：store的子模块，为了开发大型项目，方便状态管理而使用的。</li></ul><h2 id="vuex的使用"><a href="#vuex的使用" class="headerlink" title="vuex的使用"></a>vuex的使用</h2><p>在命令行输入下面命令，安装vuex</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p><strong>安装成功之后，我们就可以在store.js中尽情玩耍我们的vuex了！</strong></p><p>在store.js文件中，引入vuex并且使用vuex，这里注意我的变量名是大写Vue和Vuex　</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./vuex/store'</span> <span class="comment">// 引入store</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    components: &#123; App &#125;,</span><br><span class="line">    template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然我我们在任意一个组件中就可以使用我们定义的count属性了。</p><p>这里我们在helloWorld中使用一下，去除helloworld.vue中不用的标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure><p>我们继续操作store.js文件</p><p>我们在sotre.js中定义mutations对象，该对象中有两个方法，mutations里面的参数，第一个默认为state，接下来的为自定义参数。</p><p>我们在mutations中定义两个方法，增加和减少，并且设置一个参数n，默认值为0，然后在Vuex.Store中使用它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mutations 里面放置的是我们操作state对象属性的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    mutationsAddCount(state, n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (state.count += n)</span><br><span class="line">    &#125;,</span><br><span class="line">    mutationsReduceCount(state, n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (state.count -= n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后我们在helloWorld.vue中，使用这个方法</p><p>还记得我们如何在组件中使用mutations吗？就和自定义事件非常相似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="handleAddClick(10)"&gt;增加&lt;/</span>button&gt;</span><br><span class="line">      &lt;button @click=<span class="string">"handleReduceClick(10)"</span>&gt;减少&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handleAddClick(n)&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'mutationsAddCount'</span>,n);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleReduceClick(n)&#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'mutationsReduceCount'</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>来浏览器看一下效果如何！</p><p>我们可以看到每当触发事件时，我们都可以在vue开发工具中看到我们触发的mutations方法，以及参数</p><p>接下来就是actions，actions是异步操作</p><p>创建actions对象，并且使用</p><p>这里我在两个方法中使用了两个不同的参数，一个是context，它是一个和store对象具有相同对象属性的参数。在第二个函数中，我是直接使用了这个对象的commit的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    actionsAddCount(context, n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(context)</span><br><span class="line">        <span class="keyword">return</span> context.commit(<span class="string">'mutationsAddCount'</span>, n)</span><br><span class="line">    &#125;,</span><br><span class="line">    actionsReduceCount(&#123; commit &#125;, n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> commit(<span class="string">'mutationsReduceCount'</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在helloWorld.vue中</p><p>在methods中，增加两个方法，使用dispath来触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;异步操作&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="handleActionsAdd(10)"&gt;异步增加&lt;/</span>button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"handleActionsReduce(10)"</span>&gt;异步减少&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handleActionsAdd(n)&#123;</span><br><span class="line">  <span class="keyword">this</span>.$store.dispatch(<span class="string">'actionsAddCount'</span>,n)</span><br><span class="line">&#125;,</span><br><span class="line">handleActionsReduce(n)&#123;</span><br><span class="line">  <span class="keyword">this</span>.$store.dispatch(<span class="string">'actionsReduceCount'</span>,n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入浏览器看下效果如何！</p><p>最后就是getters</p><p>我们一般使用getters来获取我们的state，因为它算是state的一个计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    getterCount(state, n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (state.count += n)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    getterCount(state) &#123;</span><br><span class="line">        <span class="keyword">return</span> (state.count += <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getters算是非常简单的了。</p><p>到这里，如果全都看懂了，vuex你已经没有压力了。</p><p>但是vuex官方给了我们一个更简单的方式来使用vuex， 也就是 {mapState, mapMutations, mapActions, mapGetters}</p><p>只要我们把上面基础的搞懂，这些都不在话下，只是方面我们书写罢了。</p><p>就这么简单，这里我们用到了es6的扩展运算符。如果不熟悉的同学还是去看看阮一峰大神的《Es6标准入门》这本书，我是看完了，受益匪浅！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;mapState, mapMutations, mapActions, mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      handleAddClick: <span class="string">'mutationsAddCount'</span>,</span><br><span class="line">      handleReduceClick: <span class="string">'mutationsReduceCount'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      handleActionsAdd: <span class="string">'actionsAddCount'</span>,</span><br><span class="line">      handleActionsReduce: <span class="string">'actionsReduceCount'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// handleAddClick(n)&#123;</span></span><br><span class="line">    <span class="comment">//   this.$store.commit('mutationsAddCount',n);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// handleReduceClick(n)&#123;</span></span><br><span class="line">    <span class="comment">//   this.$store.commit('mutationsReduceCount',n);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// handleActionsAdd(n)&#123;</span></span><br><span class="line">    <span class="comment">//   this.$store.dispatch('actionsAddCount',n)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// handleActionsReduce(n)&#123;</span></span><br><span class="line">    <span class="comment">//   this.$store.dispatch('actionsReduceCount',n)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.getterCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>同理，getters和 state也可以使用 mapState，mapGetters</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vuex是什么？&quot;&gt;&lt;a href=&quot;#vuex是什么？&quot; class=&quot;headerlink&quot; title=&quot;vuex是什么？&quot;&gt;&lt;/a&gt;vuex是什么？&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>js中对象，数组，字符串的常用操作</title>
    <link href="http://yoursite.com/2020/03/25/js%E4%B8%AD%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%95%B0%E7%BB%84%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/03/25/js中对象，数组，字符串的常用操作/</id>
    <published>2020-03-25T09:19:12.000Z</published>
    <updated>2020-03-27T04:26:19.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javaScript遍历对象总结"><a href="#javaScript遍历对象总结" class="headerlink" title="javaScript遍历对象总结"></a>javaScript遍历对象总结</h2><h4 id="1-for-…-in-循环遍历对象自身的和继承的可枚举属性"><a href="#1-for-…-in-循环遍历对象自身的和继承的可枚举属性" class="headerlink" title="1.for … in 循环遍历对象自身的和继承的可枚举属性"></a>1.for … in 循环遍历对象自身的和继承的可枚举属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">a:<span class="string">'11'</span>,</span><br><span class="line">b:<span class="string">'22'</span>,</span><br><span class="line">c:<span class="string">'33'</span>,</span><br><span class="line">d:<span class="string">'44'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj1)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i+<span class="string">':'</span>+obj1[i]);<span class="comment">//a:11 b:22 c:33 d:44</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2使用Object-keys-遍历-返回一个数组-包括对象自身的-不含继承的-所有可枚举属性"><a href="#2使用Object-keys-遍历-返回一个数组-包括对象自身的-不含继承的-所有可枚举属性" class="headerlink" title="2使用Object.keys()遍历(返回一个数组,包括对象自身的(不含继承的)所有可枚举属性"></a>2使用Object.keys()遍历(返回一个数组,包括对象自身的(不含继承的)所有可枚举属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">a:<span class="string">'11'</span>,</span><br><span class="line">b:<span class="string">'22'</span>,</span><br><span class="line">c:<span class="string">'33'</span>,</span><br><span class="line">d:<span class="string">'44'</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">var</span> result=<span class="built_in">Object</span>.keys(obj2);</span><br><span class="line"> <span class="built_in">console</span>.log(result);<span class="comment">//Array(3) [ "a", "b", "c", "d" ] obj2对象的key组成的数组</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj2).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key,obj2[key])<span class="comment">//a 11 b 22 c 33 d 44</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj2))<span class="comment">// ["11", "22", "33", "44"] obj2对象的value组成的数组</span></span><br></pre></td></tr></table></figure><h4 id="3Object-getOwnPropertyNames-obj-返回一个数组-包含对象自身的所有属性-不含Symbol属性-但是包括不可枚举属性"><a href="#3Object-getOwnPropertyNames-obj-返回一个数组-包含对象自身的所有属性-不含Symbol属性-但是包括不可枚举属性" class="headerlink" title="3Object.getOwnPropertyNames(obj),返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性)."></a>3Object.getOwnPropertyNames(obj),返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">'0'</span>:<span class="string">'a'</span>,<span class="string">'1'</span>:<span class="string">'b'</span>,<span class="string">'2'</span>:<span class="string">'c'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,obj[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="4Object-assign-可以用作对象的复制"><a href="#4Object-assign-可以用作对象的复制" class="headerlink" title="4Object.assign()可以用作对象的复制"></a>4Object.assign()可以用作对象的复制</h4><p>1、可以用作对象的复制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj3 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj3);</span><br><span class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure><p>2、可以用作对象的合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(o1, o2, o3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1);  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span></span><br></pre></td></tr></table></figure><p>上面我们看到，目标对象o1自身也发生了改变。假如我们不想让o1改变，我们可以把三个对象合并到一个空的对象中，操作如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;,o1, o2, o3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1);  <span class="comment">// &#123; a: 1 &#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：以下几个地方可能copy或者合并不成功</strong></p><p>1、继承属性和不可枚举属性是不能拷贝的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;, &#123; <span class="comment">// foo 是个继承属性。</span></span><br><span class="line">    bar: &#123;</span><br><span class="line">        value: <span class="number">2</span>  <span class="comment">// bar 是个不可枚举属性。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    baz: &#123;</span><br><span class="line">        value: <span class="number">3</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>  <span class="comment">// baz 是个自身可枚举属性。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// &#123; baz: 3 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h4><p>用来判断两个值是否是同一个值。</p><p>下面是一些例子，面试中可能会提及</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.is(<span class="string">'haorooms'</span>, <span class="string">'haorooms'</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="built_in">window</span>, <span class="built_in">window</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="string">'foo'</span>, <span class="string">'bar'</span>);     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is([], []);           <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.is(test, test);       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">null</span>, <span class="literal">null</span>);       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特例</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">0</span>, <span class="number">-0</span>);            <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="number">-0</span>, <span class="number">-0</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="number">0</span>/<span class="number">0</span>);         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="javaScript遍历数组总结"><a href="#javaScript遍历数组总结" class="headerlink" title="javaScript遍历数组总结"></a>javaScript遍历数组总结</h2><h4 id="一、一般的遍历数组的方法"><a href="#一、一般的遍历数组的方法" class="headerlink" title="一、一般的遍历数组的方法:"></a><strong>一、一般的遍历数组的方法:</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(i,array[i]);  <span class="comment">//0 1    1 2     2 3     3 4     4 5     5 6    6 7 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、用for-in的方遍历数组"><a href="#二、用for-in的方遍历数组" class="headerlink" title="二、用for in的方遍历数组"></a>二、<strong>用for in的方遍历数组</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> array) &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(index,array[index]);  </span><br><span class="line">    <span class="comment">//0 1    1 2     2 3     3 4     4 5     5 6    6 7 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="三、forEach"><a href="#三、forEach" class="headerlink" title="三、forEach"></a>三、<strong>forEach</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="params">v</span>=&gt;</span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(v);  <span class="comment">//1 2 3 4 5 6 7</span></span><br><span class="line">&#125;);</span><br><span class="line">array.forEach( <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(v);  <span class="comment">//1 2 3 4 5 6 7</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="四、用for-in不仅可以对数组-也可以对enumerable对象操作"><a href="#四、用for-in不仅可以对数组-也可以对enumerable对象操作" class="headerlink" title="四、用for in不仅可以对数组,也可以对enumerable对象操作"></a>四、<strong>用for in不仅可以对数组,也可以对enumerable对象操作</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="string">"hello world"</span>&#125;;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> A) &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(k,A[k]);  <span class="comment">//a 1  b 2  c 3  d hello world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、在ES6中-增加了一个for-of循环-使用起来很简单"><a href="#五、在ES6中-增加了一个for-of循环-使用起来很简单" class="headerlink" title="五、在ES6中,增加了一个for of循环,使用起来很简单"></a>五、<strong>在ES6中,增加了一个for of循环,使用起来很简单</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> array) &#123;  </span><br><span class="line">   <span class="built_in">console</span>.log(v);  <span class="comment">//1 2 3 4 5 6 7</span></span><br><span class="line"> &#125;;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> s = <span class="string">"helloabc"</span>;  </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">let</span> c <span class="keyword">of</span> s) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(c); <span class="comment">//h e l l o a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 总结来说:for in总是得到对像的key或数组,字符串的下标,而for of和forEach一样,是直接得到值<br>结果for of不能对象用<br>对于新出来的Map,Set上面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set();  </span><br><span class="line"><span class="keyword">set</span>.add("a").add("b").add("d").add("c");  </span><br><span class="line">console.log(<span class="keyword">set</span>);  //Set(4) &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();  </span><br><span class="line">map.set(<span class="string">"a"</span>,<span class="number">1</span>).set(<span class="string">"b"</span>,<span class="number">2</span>).set(<span class="number">999</span>,<span class="number">3</span>);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="keyword">set</span>) &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(v);  <span class="comment">// a b d c</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"--------------------"</span>);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [k,v] <span class="keyword">of</span> map) &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(k,v); <span class="comment">// a1 b2 9993</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六、map-对数组中每一项运行给定函数。返回每次函数调用的结果组成的数组。"><a href="#六、map-对数组中每一项运行给定函数。返回每次函数调用的结果组成的数组。" class="headerlink" title="六、map():对数组中每一项运行给定函数。返回每次函数调用的结果组成的数组。"></a>六、map():对数组中每一项运行给定函数。返回每次函数调用的结果组成的数组。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sporter=[&#123;</span><br><span class="line">    name:<span class="string">'aa'</span>,</span><br><span class="line">    isHell:<span class="literal">null</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    name:<span class="string">'bb'</span>,</span><br><span class="line">    isHell:<span class="literal">null</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    name:<span class="string">'bb'</span>,</span><br><span class="line">    isHell:<span class="literal">true</span></span><br><span class="line">&#125;];</span><br><span class="line">sporter.map(<span class="function"><span class="params">item</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!item.isHell)&#123;item.isHell=<span class="string">'--'</span>;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item)<span class="comment">//&#123;name: "aa", isHell: "--"&#125;  &#123;name: "bb", isHell: "--"&#125; &#123;name: "bb", isHell: true&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>格式化数组中的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kvArray = [&#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">key</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">key</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="number">30</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reformattedArray = kvArray.map(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rObj = &#123;&#125;;</span><br><span class="line">    rObj[obj.key] = obj.value;</span><br><span class="line">    <span class="keyword">return</span> rObj;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// reformattedArray 数组为： [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></span><br><span class="line"><span class="comment">// kvArray 数组未被修改: </span></span><br><span class="line"><span class="comment">// [&#123;key: 1, value: 10&#125;, </span></span><br><span class="line"><span class="comment">//  &#123;key: 2, value: 20&#125;, </span></span><br><span class="line"><span class="comment">//  &#123;key: 3, value: 30&#125;]</span></span><br></pre></td></tr></table></figure><p>反转字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'12345'</span>;</span><br><span class="line"><span class="keyword">let</span> arr =<span class="built_in">Array</span>.prototype.map.call(str, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;).reverse().join(<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// 输出: '54321'</span></span><br></pre></td></tr></table></figure><p>使用映射改善排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要被排序的数组</span></span><br><span class="line"><span class="keyword">var</span> list = [<span class="string">'Delta'</span>, <span class="string">'alpha'</span>, <span class="string">'CHARLIE'</span>, <span class="string">'bravo'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对需要排序的数字和位置的临时存储</span></span><br><span class="line"><span class="keyword">var</span> mapped = list.map(<span class="function"><span class="keyword">function</span> (<span class="params">el, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">index</span>: i, <span class="attr">value</span>: el.toLowerCase()&#125;;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mapped)<span class="comment">//[&#123;index: 0, value: "delta"&#125;,&#123;index: 1, value: "alpha"&#125;,&#123;index: 2, value: "charlie"&#125;,&#123;index: 3, value: "bravo"&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="七、filter-对数组中的每一项运行给定函数。返回该函数会返回true的项组成的数组。"><a href="#七、filter-对数组中的每一项运行给定函数。返回该函数会返回true的项组成的数组。" class="headerlink" title="七、filter():对数组中的每一项运行给定函数。返回该函数会返回true的项组成的数组。"></a>七、filter():对数组中的每一项运行给定函数。返回该函数会返回true的项组成的数组。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sporter=[&#123;</span><br><span class="line">    name:<span class="string">'aa'</span>,</span><br><span class="line">    isHell:<span class="literal">null</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    name:<span class="string">'bb'</span>,</span><br><span class="line">    isHell:<span class="literal">null</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    name:<span class="string">'bb'</span>,</span><br><span class="line">    isHell:<span class="literal">true</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">var</span> arr=sporter.filter(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="keyword">return</span> item.name===<span class="string">'bb'</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[&#123;name: "bb", isHell: null&#125;,&#123;name: "bb", isHell: true&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="八、forEach-对数组中的每一项运行给定函数，这个方法没有返回值"><a href="#八、forEach-对数组中的每一项运行给定函数，这个方法没有返回值" class="headerlink" title="八、forEach():对数组中的每一项运行给定函数，这个方法没有返回值"></a>八、forEach():对数组中的每一项运行给定函数，这个方法没有返回值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sporter=[&#123;</span><br><span class="line">    name:<span class="string">'aa'</span>,</span><br><span class="line">    isHell:<span class="literal">null</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    name:<span class="string">'bb'</span>,</span><br><span class="line">    isHell:<span class="literal">null</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    name:<span class="string">'bb'</span>,</span><br><span class="line">    isHell:<span class="literal">true</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">var</span> arr=sporter.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(item)&#125;)<span class="comment">//&#123;name: "aa", isHell: null&#125;&#123;name: "bb", isHell: null&#125;&#123;name: "bb", isHell: true&#125;</span></span><br></pre></td></tr></table></figure><h4 id="九、reduce"><a href="#九、reduce" class="headerlink" title="九、reduce"></a>九、reduce</h4><p>数组里所有值的和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>将二维数组转化为一维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.concat(b);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(flattened) <span class="comment">//[0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>计算数组中每个元素出现的次数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Tiff'</span>, <span class="string">'Bruce'</span>, <span class="string">'Alice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countedNames = names.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">allNames, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name <span class="keyword">in</span> allNames) &#123;</span><br><span class="line">        allNames[name]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        allNames[name] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> allNames;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(countedNames)<span class="comment">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br></pre></td></tr></table></figure><p>数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.sort().reduce(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">init, current</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (init.length === <span class="number">0</span> || init[init.length - <span class="number">1</span>] !== current) &#123;</span><br><span class="line">            init.push(current);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> init;</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p>数组变整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0.1</span>, <span class="number">3</span>, <span class="number">0.5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y;</span><br><span class="line">&#125;); <span class="comment">// 13579</span></span><br></pre></td></tr></table></figure><h4 id="10、find"><a href="#10、find" class="headerlink" title="10、find"></a>10、find</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inventory = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'apples'</span>, <span class="attr">quantity</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'bananas'</span>, <span class="attr">quantity</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'cherries'</span>, <span class="attr">quantity</span>: <span class="number">5</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findCherries</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fruit.name === <span class="string">'cherries'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(inventory.find(findCherries)); <span class="comment">// &#123; name: 'cherries', quantity: 5 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="11、数组的基础操作"><a href="#11、数组的基础操作" class="headerlink" title="11、数组的基础操作"></a>11、数组的基础操作</h4><h6 id="一、push-方法"><a href="#一、push-方法" class="headerlink" title="一、push()方法"></a>一、push()方法</h6><p>向数组的末尾添加元素返回值为当前操作的数组的操作以后的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1  var arr=[2,3,4,5,6,6];</span><br><span class="line">2  arr.push(8,9);//push 添加到数组末尾</span><br><span class="line">3  console.log(arr)//[ 2, 3, 4, 5, 6, 6, 8, 9 ]</span><br></pre></td></tr></table></figure><h6 id="二、pop-方法"><a href="#二、pop-方法" class="headerlink" title="二、pop()方法"></a>二、pop()方法</h6><p>删除数组的最后一项,并返回删除元素的值；如果数组为空则返回undefine</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="number">2</span>  arr.pop();    <span class="comment">//pop 删除数组末尾数据</span></span><br><span class="line"><span class="number">3</span>  <span class="keyword">var</span> a=arr.pop();</span><br><span class="line"><span class="number">4</span>  <span class="built_in">console</span>.log(arr)<span class="comment">//[ 1, 4, 5, 6, 7  ]</span></span><br><span class="line"><span class="number">5</span>  <span class="built_in">console</span>.log(a) <span class="comment">//8</span></span><br></pre></td></tr></table></figure><h6 id="三、unshift-方法"><a href="#三、unshift-方法" class="headerlink" title="三、unshift()方法"></a>三、unshift()方法</h6><p> 向数组的前面添加元素返回值为当前操作的数组的操作以后的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="number">2</span>  arr.unshift(<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>)<span class="comment">//unshift 添加到数组前面</span></span><br><span class="line"><span class="number">3</span>  <span class="built_in">console</span>.log(arr)<span class="comment">//[ 0, 1, 3, 1, 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure><h6 id="四、shitf-方法"><a href="#四、shitf-方法" class="headerlink" title="四、shitf()方法"></a>四、shitf()方法</h6><p>删除第一项,并返回删除元素的值；如果数组为空则返回undefine</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="number">2</span>  arr.shift()   <span class="comment">//shift 删除数组前面数据</span></span><br><span class="line"><span class="number">3</span>  <span class="built_in">console</span>.log(arr)<span class="comment">//[ 4, 5, 6, 7, 8, 9 ]</span></span><br></pre></td></tr></table></figure><h6 id="五、join-方法"><a href="#五、join-方法" class="headerlink" title="五、join()  方法"></a>五、join()  方法</h6><p>分割数组，(把数组转换为字符串)并返回字符串，原数组未变, join([每个字符直接的分割符号，默认值为”,”])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="number">2</span>  <span class="keyword">var</span> b=arr.join()  <span class="comment">//分割数组,但原数组不会发生改变</span></span><br><span class="line"><span class="number">3</span>  <span class="built_in">console</span>.log(b)<span class="comment">// 1,4,5,6,7,8,9</span></span><br></pre></td></tr></table></figure><h6 id="六、split-方法"><a href="#六、split-方法" class="headerlink" title="六、split()方法"></a>六、split()方法</h6><p>split根据特定的字符串切分成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> a=<span class="string">'a-j-k-j-k-k-k'</span>;</span><br><span class="line"><span class="number">2</span>  <span class="keyword">var</span> b=a.split(<span class="string">'-'</span>) </span><br><span class="line"><span class="number">3</span>  <span class="built_in">console</span>.log(b)<span class="comment">//[ 'a', 'j', 'k', 'j', 'k', 'k', 'k' ]</span></span><br></pre></td></tr></table></figure><h6 id="七、reverse-方法"><a href="#七、reverse-方法" class="headerlink" title="七、reverse()方法"></a><strong>七</strong>、<strong>reverse()方法</strong></h6><p>数组翻转并返回翻转后的原数组，原数组翻转了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="number">2</span>  arr.reverse(); <span class="comment">//反转数组</span></span><br><span class="line"><span class="number">3</span>  <span class="built_in">console</span>.log(arr)<span class="comment">//[ 9, 8, 7, 6, 5, 4, 1 ]</span></span><br></pre></td></tr></table></figure><h6 id="八、IndexOf-方法"><a href="#八、IndexOf-方法" class="headerlink" title="八、IndexOf()方法"></a>八、IndexOf()方法</h6><p>接受两个参数第一个是要查找的值，第二个是要从哪个位置开始。</p><p>数组元素索引 并返回元素索引，不存在返回-1,索引从0开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="number">2</span>  <span class="keyword">var</span> b=arr.indexOf(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span>  <span class="built_in">console</span>.log(b)<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h6 id="九、concat-方法"><a href="#九、concat-方法" class="headerlink" title="九、concat()方法"></a>九、concat()方法</h6><p>数组合并，返回合并后的新数组元素不变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="number">2</span>  <span class="keyword">var</span> a=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="number">3</span>  <span class="keyword">var</span> b=arr.concat(a)<span class="comment">//将两个数组合并,返回合并后的新数组元素不变</span></span><br><span class="line"><span class="number">4</span>  <span class="built_in">console</span>.log(b)<span class="comment">//[ 1, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c' ]</span></span><br></pre></td></tr></table></figure><h6 id="十、slice-方法"><a href="#十、slice-方法" class="headerlink" title="十、slice()方法"></a>十、slice()方法</h6><p>截取(切片)数组得到截取的数组。</p><p>返回从原数组中指定开始索引(包含)到结束索引(不包含)之间的项组成的新数组,原数组为变 ，索引从0开始</p><p>slice(start,[end])</p><p>如果没有end则从开始取到数组结尾</p><p>如果start大于end则返回空数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="number">2</span>  <span class="keyword">var</span> b = a.slice(<span class="number">0</span>,<span class="number">3</span>)<span class="comment">//从坐标为0的数开始截取到坐标为3的数字之间的数字</span></span><br><span class="line"><span class="number">3</span>  <span class="built_in">console</span>.log(b)<span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="number">4</span>  <span class="keyword">var</span> c = a.slice(<span class="number">3</span>)<span class="comment">//当只有一个参数的时候，就代表从该参数的坐标开始截取到数组末尾</span></span><br><span class="line"><span class="number">5</span>  <span class="built_in">console</span>.log(c)<span class="comment">//[ 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><h6 id="十一、splice-方法"><a href="#十一、splice-方法" class="headerlink" title="十一、splice()方法"></a>十一、splice()方法</h6><p>会改变原数组，对原数组进行增删改查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>  <span class="keyword">var</span> a1 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"> <span class="number">2</span>  <span class="keyword">var</span> b1 = a1.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'e'</span>,<span class="string">'f'</span>)<span class="comment">//把坐标为1的数组抽离出来，替换成后面的两个数字，而b1就等于抽离的数字</span></span><br><span class="line"> <span class="number">3</span>  <span class="built_in">console</span>.log(a1);<span class="comment">//['a','e','f','c']</span></span><br><span class="line"> <span class="number">4</span>  <span class="built_in">console</span>.log(b1);<span class="comment">//['b']</span></span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span>  <span class="keyword">var</span> a2 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"> <span class="number">7</span>  <span class="keyword">var</span> b2 = a2.splice(<span class="number">0</span>,<span class="number">1</span>,<span class="string">'e'</span>,<span class="string">'f'</span>);<span class="comment">//把坐标为0的数字抽离出来，替换成后面的数字，而b2就等于抽离的数字</span></span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span>  <span class="built_in">console</span>.log(a2);<span class="comment">//[ 'e', 'f', 'b', 'c' ]</span></span><br><span class="line"><span class="number">10</span>  <span class="built_in">console</span>.log(b2);<span class="comment">//[ 'a' ]</span></span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span>  <span class="keyword">var</span> a3 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];<span class="comment">//</span></span><br><span class="line"><span class="number">13</span>  <span class="keyword">var</span> b3 = a3.splice(<span class="number">0</span>,<span class="number">2</span>,<span class="string">'e'</span>,<span class="string">'f'</span>)<span class="comment">//从坐标为0的数字开始选两位</span></span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span>  <span class="built_in">console</span>.log(a3);<span class="comment">//['e','f','c','d']</span></span><br><span class="line"><span class="number">16</span>  <span class="built_in">console</span>.log(b3);<span class="comment">//['a','b']</span></span><br></pre></td></tr></table></figure><h2 id="JS字符串的操作"><a href="#JS字符串的操作" class="headerlink" title="JS字符串的操作"></a>JS字符串的操作</h2><h4 id="1、字符串转换"><a href="#1、字符串转换" class="headerlink" title="1、字符串转换"></a>1、字符串转换</h4><p>字符串转换是最基础的要求和工作，你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=num.toString();    <span class="comment">//"24"</span></span><br></pre></td></tr></table></figure><p>你同样可以这么做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="built_in">String</span>(num);    <span class="comment">//"24"</span></span><br></pre></td></tr></table></figure><p>或者，在简单点儿：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="string">""</span> + num;    <span class="comment">//"24"</span></span><br></pre></td></tr></table></figure><h4 id="2、字符串分割"><a href="#2、字符串分割" class="headerlink" title="2、字符串分割"></a>2、字符串分割</h4><p>将字符串进行拆分返回一个新的数组，JavaScript就给我们提供了一个非常方便的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>);    <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo","woaiziji"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>);        <span class="comment">//["q","i","n","g","c","h","e","n","g","h","u","w","o","g","u","o","x","i","a","n","s","h","e","n","g",",","w","o","a","i","s","h","e","n","g","h","u","o",",","w","o","a","i","z","i","j","i"];</span></span><br></pre></td></tr></table></figure><p>split()的第二个参数，表示返回的字符串数组的最大长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>,<span class="number">2</span>); <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>,<span class="number">8</span>); <span class="comment">//["q","i","n","g","c","h","e","n"]</span></span><br></pre></td></tr></table></figure><h4 id="3、字符串替换"><a href="#3、字符串替换" class="headerlink" title="3、字符串替换"></a>3、字符串替换</h4><p>仅仅查找到字符串并不会是题目的停止，一般题目还经常会要求你去进行替换操作，那就继续看以下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"wozaijinxingzifuchuantihuancaozuo,zifuchuantihuano"</span>;</span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="string">"zifuchuan"</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/g</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo, tihuano</span></span><br></pre></td></tr></table></figure><p>默认只进行第一次匹配操作的替换，想要全局替换，需要置上正则全局标识g</p><h4 id="4、获取字符串长度"><a href="#4、获取字符串长度" class="headerlink" title="4、获取字符串长度"></a>4、获取字符串长度</h4><p>获取字符串的长度经常会用到，方法很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arrLength=mystr.length;    <span class="comment">//47</span></span><br></pre></td></tr></table></figure><h4 id="5、查询子字符串"><a href="#5、查询子字符串" class="headerlink" title="5、查询子字符串"></a>5、查询子字符串</h4><p>判断字符串内是否包含子串，不少开发者会使用for循环来判断，而忘记了JavaScript提供子串函数：</p><ul><li>indexOf()，该Of() 方法对大小写敏感。返回字符串中一个子串第一处出现的索引（从左到右搜索）。如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.indexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.indexOf(<span class="string">"l"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.indexOf(<span class="string">"l"</span>,<span class="number">3</span>);    <span class="comment">//3</span></span><br></pre></td></tr></table></figure><ul><li>lastIndexOf()，该方法对大小写敏感。返回字符串中一个子串最后一处出现的索引（从右到左搜索），如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.lastIndexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.lastIndexOf(<span class="string">"l"</span>);    <span class="comment">//9</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.lastIndexOf(<span class="string">"l"</span>,<span class="number">4</span>);    <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h4 id="6、返回指定位置的字符或其字符编码值"><a href="#6、返回指定位置的字符或其字符编码值" class="headerlink" title="6、返回指定位置的字符或其字符编码值"></a>6、返回指定位置的字符或其字符编码值</h4><p>查找给定位置的字符，可以使用如下函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.charAt(<span class="number">7</span>);    <span class="comment">//o</span></span><br></pre></td></tr></table></figure><p>同样，它的一个兄弟函数就是查找对应位置的字符编码值，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> charCode=mystr. charCodeAt(<span class="number">7</span>);    <span class="comment">//111</span></span><br></pre></td></tr></table></figure><h4 id="7、-字符串匹配"><a href="#7、-字符串匹配" class="headerlink" title="7、 字符串匹配"></a>7、 字符串匹配</h4><p>可以直接通过字符串进行匹配，也可以通过正则进行匹配，可能需要你对正则表达式有一定的了解，先来看看match()函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=mystr.match(<span class="string">"guo"</span>);    <span class="comment">//guo</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=mystr.match(<span class="string">"Guo"</span>);    <span class="comment">//nullvar regexp1=/\d+/g;</span></span><br><span class="line"><span class="keyword">var</span> regexp2=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> regexp3=<span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr2=mystr.match(regexp1);    <span class="comment">//["6","33"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp2);    <span class="comment">//["guo"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp3);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr3.index    <span class="comment">//11</span></span><br><span class="line">matchStr3.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></table></figure><p>注意：1.此处使用字符串直接进行匹配，被匹配的字符串内包含要匹配的字符串时，返回所要匹配的字符串。</p><p>　　　2.如果使用正则匹配字符串时，如果正则表达式没有 g (全局标识)标志，返回与正则匹配相同的结果。而且返回的数组拥有一个额外的 input 属性，该属性包含原始字符串。另外，还拥有一个 index 属性，该属性表示匹配结果在被字符串中的索引（以0开始）。如果正则表达式包含 g 标志，则该方法返回匹配字符串的数组。</p><p>再来看看使用exec()函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=regexp1.exec(mystr);  <span class="comment">//["guo"]var regexp2=/guo/;</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=regexp2.exec(mystr);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr1.index    <span class="comment">//11</span></span><br><span class="line">matchStr1.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></table></figure><p>简单吧，仅仅是把正则和字符串换了个位置，即exec()函数是在正则上调用，传递字符串的参数。对于上面两个方法，匹配的结果都是返回第一个匹配成功的字符串，如果匹配失败则返回null。</p><p>再来看一个类似的函数search()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr = <span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1 = <span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr = mystr.search(regexp1);    <span class="comment">//11</span></span><br></pre></td></tr></table></figure><p>进行正则匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1</p><h4 id="8、字符串连接"><a href="#8、字符串连接" class="headerlink" title="8、字符串连接"></a>8、字符串连接</h4><p>可以将两个或多个字符串进行加法操作，同时可以使用JavaScript提供的concat函数：</p><p>先看加法操作进行字符串连接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">"world!"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1+<span class="string">" "</span>+mystr2;    <span class="comment">//Hello world!</span></span><br></pre></td></tr></table></figure><p>是不是很简单呀，那继续看看concat函数吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">" world,"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr3=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr4=<span class="string">"guoxiansheng"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1.concat(mystr2+mystr3+<span class="string">" "</span>+mystr4);    <span class="comment">//Hello world,Hello guoxiansheng</span></span><br></pre></td></tr></table></figure><p>concat()函数可以有多个参数，传递多个字符串，拼接多个字符串。</p><h4 id="9、字符串切割和提取"><a href="#9、字符串切割和提取" class="headerlink" title="9、字符串切割和提取"></a>9、字符串切割和提取</h4><p>有三种可以从字符串中抽取和切割的方法：</p><h6 id="第一种，slice-函数："><a href="#第一种，slice-函数：" class="headerlink" title="第一种，slice()函数："></a>第一种，slice()函数：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.slice(<span class="number">-3</span>);    <span class="comment">//ld!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.slice(<span class="number">-3</span>,<span class="number">-1</span>);    <span class="comment">//ld</span></span><br><span class="line"><span class="keyword">var</span> sliceStr3=mystr.slice(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr4=mystr.slice(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></table></figure><h6 id="第二种：substring-函数："><a href="#第二种：substring-函数：" class="headerlink" title="第二种：substring()函数："></a>第二种：substring()函数：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substring(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substring(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></table></figure><h6 id="第三种：substr-函数："><a href="#第三种：substr-函数：" class="headerlink" title="第三种：substr()函数："></a>第三种：substr()函数：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substr(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substr(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo wo</span></span><br></pre></td></tr></table></figure><p>注：1.slice() 可以为负数，如果起始位置为负数，则从字符串最后一位向前找对应位数并且向后取结束位置，如果为正整数则从前往后取起始位置到结束位置。<br>　　2.substring()只能非负整数，截取起始结束位置同slice()函数一致。</p><p>　　3.substr()与第一、第二种函数不同，从起始位置开始截取，结束位置为第二个参数截取的字符串最大长度。</p><p>以上三种函数未填第二参数时，自动截取起始位置到字符串末尾。</p><h4 id="10、字符串大小写转换"><a href="#10、字符串大小写转换" class="headerlink" title="10、字符串大小写转换"></a>10、字符串大小写转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> lowCaseStr=mystr.toLowerCase();    <span class="comment">//hello world!</span></span><br><span class="line"><span class="keyword">var</span> upCaseStr=mystr. toUpperCase();    <span class="comment">//HELLO WORLD!</span></span><br></pre></td></tr></table></figure><h4 id="11、字符串去空格"><a href="#11、字符串去空格" class="headerlink" title="11、字符串去空格"></a>11、字符串去空格</h4><p>trim方法用来删除字符串前后的空格 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"     hello world      "</span>;  </span><br><span class="line"><span class="keyword">var</span> trimStr=mystr.trim();    <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><h4 id="常用的字符串操作"><a href="#常用的字符串操作" class="headerlink" title="常用的字符串操作"></a>常用的字符串操作</h4><h6 id="1、字符串去重"><a href="#1、字符串去重" class="headerlink" title="1、字符串去重"></a>1、字符串去重</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"aahhgggsssjjj"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeRepeat</span>(<span class="params">msg</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> res=[];  </span><br><span class="line">    <span class="keyword">var</span> arr=msg.split(<span class="string">""</span>);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(res.indexOf(arr[i])==<span class="number">-1</span>)&#123;  </span><br><span class="line">            res.push(arr[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">""</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">removeRepeat(str);    <span class="comment">//ahgsj</span></span><br></pre></td></tr></table></figure><h6 id="2、判断字符串中字符出现的次数"><a href="#2、判断字符串中字符出现的次数" class="headerlink" title="2、判断字符串中字符出现的次数"></a>2、判断字符串中字符出现的次数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    1.先实现字符串去重  </span></span><br><span class="line"><span class="comment">    2.然后对去重后的数组用for循环操作，分别与原始数组中各个值进行比较，如果相等则count++,循环结束将count保存在sum数组中，然后将count重置为0  </span></span><br><span class="line"><span class="comment">    3.这样一来去重后的数组中的元素在原数组中出现的次数与sum数组中的元素是一一对应的  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"aacccbbeeeddd"</span>;  </span><br><span class="line"><span class="keyword">var</span> sum=[];  </span><br><span class="line"><span class="keyword">var</span> res=[];  </span><br><span class="line"><span class="keyword">var</span> count=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="string">""</span>);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;  </span><br><span class="line">    <span class="keyword">if</span>(res.indexOf(arr[i])==<span class="number">-1</span>)&#123;  </span><br><span class="line">        res.push(arr[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++)&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length;j++)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(arr[j]==res[i])&#123;  </span><br><span class="line">            count++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    sum.push(count);  </span><br><span class="line">    count=<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(res);    <span class="comment">//["a", "c", "b", "e", "d"]  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++)&#123;  </span><br><span class="line">    <span class="keyword">var</span> str=(sum[i]%<span class="number">2</span>==<span class="number">0</span>)?<span class="string">"偶数"</span>:<span class="string">"奇数"</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">"出现了"</span>+sum[i]+<span class="string">"次"</span>);  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">"出现了"</span>+str+<span class="string">"次"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;javaScript遍历对象总结&quot;&gt;&lt;a href=&quot;#javaScript遍历对象总结&quot; class=&quot;headerlink&quot; title=&quot;javaScript遍历对象总结&quot;&gt;&lt;/a&gt;javaScript遍历对象总结&lt;/h2&gt;&lt;h4 id=&quot;1-for-…-i
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>http讲解</title>
    <link href="http://yoursite.com/2020/03/25/http%E8%AE%B2%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/03/25/http讲解/</id>
    <published>2020-03-25T07:43:56.000Z</published>
    <updated>2020-03-25T08:40:51.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Http与Https的区别："><a href="#Http与Https的区别：" class="headerlink" title="Http与Https的区别："></a>Http与Https的区别：</h2><blockquote><p>Http与Https的区别：</p></blockquote><ol><li>HTTP 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头</li><li>HTTP 是不安全的，而 HTTPS 是安全的</li><li>HTTP 标准端口是80 ，而 HTTPS 的标准端口是443</li><li>在OSI 网络模型中，HTTP工作于应用层，而HTTPS 的安全传输机制工作在传输层</li><li>HTTP 无法加密，而HTTPS 对传输的数据进行加密</li><li>HTTP无需证书，而HTTPS 需要CA机构wosign的颁发的SSL证书</li></ol><h2 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h2><blockquote><p>URI和URL的区别</p></blockquote><p><strong>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</strong></p><p><strong>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</strong></p><h2 id="什么是Http协议无状态协议-怎么解决Http协议无状态协议"><a href="#什么是Http协议无状态协议-怎么解决Http协议无状态协议" class="headerlink" title="什么是Http协议无状态协议?怎么解决Http协议无状态协议?"></a>什么是Http协议无状态协议?怎么解决Http协议无状态协议?</h2><ul><li><strong>无状态协议对于事务处理没有记忆能力缺少状态意味着如果后续处理需要前面的信息</strong></li><li><strong>也就是说，当客户端一次HTTP请求完成以后，客户端再发送一次HTTP请求，HTTP并不知道当前客户端是一个”老用户“。</strong></li><li><strong>可以使用Cookie来解决无状态的问题，Cookie就相当于一个通行证，第一次访问的时候给客户端发送一个Cookie，当客户端再次来的时候，拿着Cookie(通行证)，那么服务器就知道这个是”老用户“。</strong></li></ul><h2 id="常用的HTTP方法有哪些？"><a href="#常用的HTTP方法有哪些？" class="headerlink" title="常用的HTTP方法有哪些？"></a>常用的HTTP方法有哪些？</h2><blockquote><p>常用的HTTP方法有哪些?</p></blockquote><ul><li>GET： 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器</li><li>POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。</li><li><strong><em>PUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。</em></strong></li><li>HEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。</li><li><strong><em>DELETE：删除文件，与PUT方法相反，删除对应URI位置的文件。</em></strong></li><li>OPTIONS：查询相应URI支持的HTTP方法。</li></ul><h2 id="Get-方法与Post方法的区别"><a href="#Get-方法与Post方法的区别" class="headerlink" title="Get 方法与Post方法的区别"></a>Get 方法与Post方法的区别</h2><p>  1) get重点在从服务器上获取资源，post重点在向服务器发送数据</p><p>  2）get传送数据是通过URL请求，以field(字段)的形式，置于URL后，并用“?”连接，多个请求数据间用”&amp;”连接，例如<a href="http://127.0.0.1:8080/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；***post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的。" target="_blank" rel="noopener">http://127.0.0.1:8080/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；***post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的。</a>***</p><p>  3）Get传输的数据量少，因为受到URL长度的限制，但效率较高；Post可以传输大量的数据，所以上传文件时只能用post方式。</p><p>  4）Get是不安全的，因为URL是可见的，可能会泄漏私密信息，如密码等；Post较Get安全性较高。</p><p>  5）Get方式只能支持ASCII字符，可以正确传递中文字符。</p><h2 id="一次完整的HTTP请求所经历的7个步骤"><a href="#一次完整的HTTP请求所经历的7个步骤" class="headerlink" title="一次完整的HTTP请求所经历的7个步骤"></a>一次完整的HTTP请求所经历的7个步骤</h2><blockquote><p>一次完整的HTTP请求所经历的7个步骤</p></blockquote><p>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p><ul><li>建立TCP连接</li></ul><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建 Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。<strong>HTTP是比TCP更高层次的应用层协议，根据规则， 只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80。</strong></p><ul><li>Web浏览器向Web服务器发送请求行</li></ul><p>一旦建立了TCP连接，<strong>Web浏览器就会向Web服务器发送请求命令</strong>。例如：GET /sample/hello.jsp HTTP/1.1。</p><ul><li>Web浏览器发送请求头<ul><li>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，<strong>之后浏览器发送了一空白行来通知服务器</strong>，它已经结束了该头信息的发送。</li></ul></li><li>Web服务器应答<ul><li>客户机向服务器发出请求后，服务器会客户机回送应答， <strong>HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。</strong></li></ul></li><li>Web服务器发送应答头<ul><li>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。</li></ul></li><li>Web服务器向浏览器发送数据<ul><li>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，<strong>它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据</strong>。</li></ul></li><li>Web服务器关闭TCP连接<ul><li>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p><p>建立TCP连接-&gt;发送请求行-&gt;发送请求头-&gt;（到达服务器）发送状态行-&gt;发送响应头-&gt;发送响应数据-&gt;断TCP连接</p><p>最具体的HTTP请求过程：<a href="http://blog.51cto.com/linux5588/1351007" target="_blank" rel="noopener">http://blog.51cto.com/linux5588/1351007</a></p><h2 id="常见的HTTP相应状态码"><a href="#常见的HTTP相应状态码" class="headerlink" title="常见的HTTP相应状态码"></a>常见的HTTP相应状态码</h2><blockquote><p>常见的HTTP相应状态码</p></blockquote><ul><li>200：请求被正常处理</li><li>204：请求被受理但没有资源可以返回</li><li>206：客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。</li><li>301：永久性重定向</li><li>302：临时重定向</li><li>303：与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上</li><li><strong><em>304：发送附带条件的请求时，条件不满足时返回，与重定向无关</em></strong></li><li>307：临时重定向，与302类似，只是强制要求使用POST方法</li><li><strong><em>400：请求报文语法有误，服务器无法识别</em></strong></li><li><strong><em>401：请求需要认证</em></strong>    （未授权：登录失败）</li><li>403：请求的对应资源禁止被访问</li><li><strong><em>404：服务器无法找到对应资源</em></strong></li><li>500：服务器内部错误</li><li>503：服务器正忙</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Http与Https的区别：&quot;&gt;&lt;a href=&quot;#Http与Https的区别：&quot; class=&quot;headerlink&quot; title=&quot;Http与Https的区别：&quot;&gt;&lt;/a&gt;Http与Https的区别：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Http与Http
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>vue首屏加载过慢是为什么？怎么解决？</title>
    <link href="http://yoursite.com/2020/03/24/vue%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E8%BF%87%E6%85%A2%E6%98%AF%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%EF%BC%9F/"/>
    <id>http://yoursite.com/2020/03/24/vue首屏加载过慢是为什么？怎么解决？/</id>
    <published>2020-03-24T13:39:34.000Z</published>
    <updated>2020-03-24T13:48:10.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、vue首屏加载过慢的原因"><a href="#一、vue首屏加载过慢的原因" class="headerlink" title="一、vue首屏加载过慢的原因"></a>一、vue首屏加载过慢的原因</h2><p>毋庸置疑的，网速慢肯定会导致首屏加载过慢，但是在这里我们不做讨论；<br>vue项目作为一个单页面应用，如果不对路由进行处理，在加载首页的时候，就会将所有组件全部加载，并向服务器请求数据，这必将拖慢加载速度；<br>通过查看Network，发现整个网站加载时间长达10几秒，加载时间最长的就是js、css文件和媒体文件及图片，如下图所示：</p><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="1-Vue-router懒加载"><a href="#1-Vue-router懒加载" class="headerlink" title="1.Vue-router懒加载"></a>1.Vue-router懒加载</h3><p>什么是Vue-router懒加载？Vue-router懒加载就是按需加载组件，只有当路由被访问时才会加载对应的组件，而不是在加载首页的时候就加载，项目越大，对首屏加载的速度提升得越明显。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首页底部导航</span></span><br><span class="line"><span class="keyword">const</span> index = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/pages/home/index/index'</span>)))</span><br><span class="line"><span class="comment">// 首页</span></span><br><span class="line"><span class="keyword">const</span> home = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/pages/home/home/home'</span>)))</span><br></pre></td></tr></table></figure><h3 id="2-使用CDN加速"><a href="#2-使用CDN加速" class="headerlink" title="2.使用CDN加速"></a>2.使用CDN加速</h3><p>在做项目时，我们会用到很多库，采用cdn加载可以加快加载速度。详情可以查看<a href="http://www.cnblogs.com/Fordestiny/p/8684556.html" target="_blank" rel="noopener">Vue项目使用CDN优化首屏加载</a>。</p><h3 id="3-gzip压缩"><a href="#3-gzip压缩" class="headerlink" title="3. gzip压缩"></a>3. gzip压缩</h3><p> 方法一：使用Nginx反向代理，配置nginx.conf文件，在http节点下加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_static on;</span><br><span class="line">gzip_buffers <span class="number">4</span> <span class="number">16</span>k;</span><br><span class="line">gzip_comp_level <span class="number">5</span>;</span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br></pre></td></tr></table></figure><p>方法二：使用node压缩，需要使用compression库，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compression = <span class="built_in">require</span>(<span class="string">'compression'</span>);</span><br><span class="line">app.use(compression());</span><br></pre></td></tr></table></figure><h3 id="4-异步加载组件"><a href="#4-异步加载组件" class="headerlink" title="4.异步加载组件"></a>4.异步加载组件</h3><p> 这里已经有前人栽好树，我们直接右转就可以了。<a href="https://segmentfault.com/a/1190000012138052" target="_blank" rel="noopener">vue异步组件(高级异步组件)使用场景及实践</a>。</p><h3 id="5-服务端渲染"><a href="#5-服务端渲染" class="headerlink" title="5.服务端渲染"></a>5.服务端渲染</h3><p>使用pug/jade、ejs、vue通用应用框架Nuxt等等都可以实现后端渲染，并且后端渲染还能对seo优化起到作用。这里配上<a href="https://zh.nuxtjs.org/" target="_blank" rel="noopener">Nuxt.js中文官网</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、vue首屏加载过慢的原因&quot;&gt;&lt;a href=&quot;#一、vue首屏加载过慢的原因&quot; class=&quot;headerlink&quot; title=&quot;一、vue首屏加载过慢的原因&quot;&gt;&lt;/a&gt;一、vue首屏加载过慢的原因&lt;/h2&gt;&lt;p&gt;毋庸置疑的，网速慢肯定会导致首屏加载过慢，但
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-router实现原理</title>
    <link href="http://yoursite.com/2020/03/24/vue-router%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/03/24/vue-router实现原理/</id>
    <published>2020-03-24T09:30:50.000Z</published>
    <updated>2020-03-24T10:42:20.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单页面应用与多页面应用"><a href="#单页面应用与多页面应用" class="headerlink" title="单页面应用与多页面应用"></a>单页面应用与多页面应用</h2><h3 id="单页面"><a href="#单页面" class="headerlink" title="单页面"></a>单页面</h3><p>即 第一次进入页面的时候会请求一个html文件，刷新清除一下。切换到其他组件，此时路径也相应变化，但是并没有新的html文件请求，页面内容也变化了。</p><p>原理是：JS会感知到url的变化，通过这一点，可以用js动态的将当前页面的内容清除掉，然后将下一个页面的内容挂载到当前页面上，这个时候的路由不是后端来做了，而是前端来做，<strong><em>判断页面到底是显示哪个组件，清除不需要的，显示需要的组件。这种过程就是单页应用，每次跳转的时候不需要再请求html文件了</em></strong>。</p><h3 id="多页面"><a href="#多页面" class="headerlink" title="多页面"></a>多页面</h3><p>即 每一次页面跳转的时候，后台服务器都会给返回一个新的html文档，这种类型的网站也就是多页网站，也叫做多页应用。<br>原理是：<strong><em>传统的页面应用，是用一些超链接来实现页面切换和跳转的</em></strong></p><p>其实刚才单页面应用跳转原理即 vue-router实现原理</p><h3 id="vue-router实现原理"><a href="#vue-router实现原理" class="headerlink" title="vue-router实现原理"></a>vue-router实现原理</h3><p><strong><em>原理核心就是 更新视图但不重新请求页面。</em></strong></p><p>vue-router实现单页面路由跳转，提供了三种方式：hash模式、history模式、abstract模式，根据mode参数来决定采用哪一种方式。</p><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>vue-router 提供了三种运行模式：<br>● hash: 使用 URL hash 值来作路由。默认模式。<br>● history: 依赖 HTML5 History API 和服务器配置。查看 HTML5 History 模式。<br>● abstract: 支持所有 JavaScript 运行环境，如 Node.js 服务器端</p><h3 id="Hash模式"><a href="#Hash模式" class="headerlink" title="Hash模式"></a>Hash模式</h3><p>hash即浏览器url中#后面的内容，包含#。hash是URL中的锚点，代表的是网页中的一个位置，单单改变#后的部分，<strong><em>浏览器只会加载相应位置的内容，不会重新加载页面。</em></strong><br>也就是说</p><ul><li>即#是用来指导浏览器动作的，对服务器端完全无用，HTTP请求中，不包含#。</li><li>每一次改变#后的部分，<strong><em>都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。</em></strong></li></ul><p>所以说<strong><em>Hash模式通过锚点值的改变，根据不同的值，渲染指定DOM位置的不同数据。</em></strong></p><h3 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h3><p>HTML5 History API提供了一种功能，能让开发人员在不刷新整个页面的情况下修改站点的URL，就是利用 <strong><em>history.pushState API 来完成 URL 跳转而无须重新加载页面；</em></strong></p><p>由于hash模式会在url中自带#，如果不想要很丑的 hash，我们可以用路由的 history 模式，只需要在配置路由规则时，<strong><em>加入”mode: ‘history’”,</em></strong>这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。</p><p>有时，history模式下也会出问题：<br>eg:<br>hash模式下：xxx.com/#/id=5 请求地址为 xxx.com,没有问题。<br>history模式下：xxx.com/id=5 请求地址为 xxx.com/id=5，如果后端没有对应的路由处理，就会返回404错误；</p><p>为了应对这种情况，需要后台配置支持：<br>在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。</p><h3 id="abstract模式"><a href="#abstract模式" class="headerlink" title="abstract模式"></a>abstract模式</h3><p>abstract模式是使用一个不依赖于浏览器的浏览历史虚拟管理后端。<br>根据平台差异可以看出，在 Weex 环境中只支持使用 abstract 模式。 不过，vue-router 自身会对环境做校验，如果发现没有浏览器的 API，vue-router 会自动强制进入 abstract 模式，所以 在使用 vue-router 时只要不写 mode 配置即可，默认会在浏览器环境中使用 hash 模式，在移动端原生环境中使用 abstract 模式。 （当然，你也可以明确指定在所有情况下都使用 abstract 模式）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;单页面应用与多页面应用&quot;&gt;&lt;a href=&quot;#单页面应用与多页面应用&quot; class=&quot;headerlink&quot; title=&quot;单页面应用与多页面应用&quot;&gt;&lt;/a&gt;单页面应用与多页面应用&lt;/h2&gt;&lt;h3 id=&quot;单页面&quot;&gt;&lt;a href=&quot;#单页面&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>axios,Ajax,Promise和fetch的区别？</title>
    <link href="http://yoursite.com/2020/03/24/axios,Ajax,Promise%E5%92%8Cfetch%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2020/03/24/axios,Ajax,Promise和fetch的区别/</id>
    <published>2020-03-24T07:01:29.000Z</published>
    <updated>2020-03-24T13:52:07.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="axios是什么呢？"><a href="#axios是什么呢？" class="headerlink" title="axios是什么呢？"></a>axios是什么呢？</h2><p>是基于promise用于浏览器和node.js是http客户端。</p><h2 id="axios的作用？"><a href="#axios的作用？" class="headerlink" title="axios的作用？"></a>axios的作用？</h2><p>axios主要是用于向后台发起请求的，还有在请求中做更多是可控功能。</p><p><strong>特点</strong>：支持浏览器和node.js</p><p>​            支持promise</p><p>​            能拦截请求和响应</p><p>​            能转换请求和响应数据</p><p>​            能取消请求</p><p>​            自动转换JSON数据</p><p>​             浏览器支持防止CSRF（跨站请求伪造）</p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在请求或响应被 then 或 catch 处理前拦截它们（拦截器可以做什么：在请求或者响应时拦截下来进行处理）</p><p>拦截器分为请求拦截器和响应拦截器</p><p>请求拦截器（interceptors.requst）是指可以拦截每次或指定HTTP请求，并可修改配置项。</p><p>响应拦截器（interceptors.response）可以在每次HTTP请求后拦截住每次或指定HTTP请求，并可修改返回结果项。</p><h2 id="axios-全局配置："><a href="#axios-全局配置：" class="headerlink" title="axios 全局配置："></a>axios 全局配置：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//axios-init.js </span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>；</span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// create an axios instance</span></span><br><span class="line"> <span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">   baseURL: process.env.BASE_API, <span class="comment">// api 的 base_url</span></span><br><span class="line">   timeout: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line"> &#125;)</span><br><span class="line"> service.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</span><br><span class="line"></span><br><span class="line">service.defaults.withCredentials = <span class="literal">true</span>;<span class="comment">//设置cross跨域 并设置访问权限 允许跨域携带cookie信息</span></span><br></pre></td></tr></table></figure><h2 id="拦截器："><a href="#拦截器：" class="headerlink" title="拦截器："></a>拦截器：</h2><p>应用场景：1：每个请求都带上的参数，比如token，时间戳等。2：对返回的状态进行判断，比如token是否过期</p><p>请求拦截器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 每次发送请求之前判断vuex中是否存在token</span></span><br><span class="line">    <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span></span><br><span class="line">    <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (store.getters.token) &#123;</span><br><span class="line">      <span class="comment">// 让每个请求携带token-- ['X-Litemall-Admin-Token']为自定义key 请根据实际情况自行修改</span></span><br><span class="line">      config.headers[<span class="string">'X-Litemall-Admin-Token'</span>] = getToken()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="响应拦截器："><a href="#响应拦截器：" class="headerlink" title="响应拦截器："></a>响应拦截器：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span></span><br><span class="line">    <span class="comment">// 否则的话抛出错误</span></span><br><span class="line">    <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 服务器状态码不是2开头的的情况</span></span><br><span class="line">  <span class="comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码</span></span><br><span class="line">  <span class="comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span><br><span class="line">  <span class="comment">// 下面列举几个常见的操作，其他需求可自行扩展</span></span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response.status) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">        <span class="comment">// 401: 未登录</span></span><br><span class="line">        <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">        <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          vant.Toast.fail(<span class="string">"身份验证失败，请关闭重新进入。"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 403 token过期</span></span><br><span class="line">        <span class="comment">// 登录过期对用户进行提示</span></span><br><span class="line">        <span class="comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">        <span class="comment">// 跳转登录页面</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">          vant.Toast.fail(<span class="string">"登录过期，请关闭重新进入。"</span>);</span><br><span class="line">          <span class="comment">// 清除token</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 404请求不存在</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">          vant.Toast.fail(<span class="string">"您访问的网页不存在。"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          vant.Toast.fail(error.response.data.message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="promise是什么："><a href="#promise是什么：" class="headerlink" title="promise是什么："></a>promise是什么：</h2><p>是一个对象用来传递异步操作的信息，它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的api，可供进一步的处理。</p><h2 id="promise的作用："><a href="#promise的作用：" class="headerlink" title="promise的作用："></a>promise的作用：</h2><p>Promise的出现主要是解决地狱回调的问题，比如你需要结果需要请求很多个接口，这些接口的参数需要另外那个的接口返回的数据作为依赖，这样就需要我们一层嵌套一层，但是有了Promise 我们就无需嵌套。</p><h2 id="promise的本质是什么："><a href="#promise的本质是什么：" class="headerlink" title="promise的本质是什么："></a><strong>promise的本质是什么</strong>：</h2><p>分离异步数据获取和业务</p><h2 id="Ajax是什么："><a href="#Ajax是什么：" class="headerlink" title="Ajax是什么："></a>Ajax是什么：</h2><p>是对原生XHR的封装，为了达到我们跨越的目的，增添了对JSONP的支持。但是随着react,vue新一代框架的兴起，以及ES规范的完善，更多API的更新，它逐渐暴露了自己的不足</p><ul><li>针对MVC的编程设计,不符合现在前端MVVM的趋势</li><li>基于原生的XHR开发，XHR本身的架构不够清晰</li><li>JQuery较大，单纯使用ajax却要引入整个JQuery非常的不合理</li><li>虽然axios不支持jsonp，但是可以通过引入jsonp模块来解决</li></ul><h2 id="Ajax过程"><a href="#Ajax过程" class="headerlink" title="Ajax过程"></a>Ajax过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-  创建XMLHttpRequest对象,也就是创建一个异步调用对象</span><br><span class="line">-  创建一个新的HTTP请求,并指定其请求的方法、URL及验证信息</span><br><span class="line">-  设置响应 HTTP 请求状态变化的函数</span><br><span class="line">-  发送 HTTP 请求</span><br><span class="line">-  获取异步调用返回的数据</span><br><span class="line">-  使用 JavaScript 和 DOM 实现局部刷新</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>; <span class="comment">// 创建异步对象</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// ie7+等现代浏览器</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123; <span class="comment">// ie6，老版Opera</span></span><br><span class="line">  xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsft.XMLHTTP'</span>);</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'http://localhost:4000/test'</span>,<span class="literal">true</span>); <span class="comment">// true是异步，可省略</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>); <span class="comment">// post 必须设置</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 若为同步，此代码不用写，直接在send后，用`xhr.responseText`即可。</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    readyState</span></span><br><span class="line"><span class="comment">        0: 请求未初始化</span></span><br><span class="line"><span class="comment">        1: 服务器连接已建立</span></span><br><span class="line"><span class="comment">        2: 请求已接收</span></span><br><span class="line"><span class="comment">        3: 请求处理中</span></span><br><span class="line"><span class="comment">        4: 请求已完成，且响应已就绪</span></span><br><span class="line"><span class="comment">    status</span></span><br><span class="line"><span class="comment">        200 OK</span></span><br><span class="line"><span class="comment">        404 Not Found</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">      xhr.responseText;</span><br><span class="line">      xhr.responseXML.children[<span class="number">0</span>].children;</span><br><span class="line">      <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="built_in">String</span>); <span class="comment">// 用于post传参，形式："a=1&amp;b=2"，而get传参就在url后面用“?”拼接</span></span><br></pre></td></tr></table></figure><h2 id="Fetch是什么？"><a href="#Fetch是什么？" class="headerlink" title="Fetch是什么？"></a>Fetch是什么？</h2><p>fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多了，参数有点像jQuery ajax。但是，一定记住fetch不是ajax的进一步封装，而是原生js。Fetch函数就是原生js，没有使用XMLHttpRequest对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;axios是什么呢？&quot;&gt;&lt;a href=&quot;#axios是什么呢？&quot; class=&quot;headerlink&quot; title=&quot;axios是什么呢？&quot;&gt;&lt;/a&gt;axios是什么呢？&lt;/h2&gt;&lt;p&gt;是基于promise用于浏览器和node.js是http客户端。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Js" scheme="http://yoursite.com/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>vue双向数据绑定的原理</title>
    <link href="http://yoursite.com/2020/03/24/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/03/24/vue双向数据绑定的原理/</id>
    <published>2020-03-24T05:16:36.000Z</published>
    <updated>2020-03-24T05:49:23.214Z</updated>
    
    <content type="html"><![CDATA[<p>vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p> vue实现双向数据绑定的原理就是利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。它接收三个参数，要操作的对象，要定义或修改的对象属性名，属性描述符。重点就是最后的属性描述符。属性描述符是一个对象，主要有两种形式：数据描述符和存取描述符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> id=<span class="string">"a"</span>&gt;</span><br><span class="line">        &lt;span id=<span class="string">"b"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;  <span class="comment">//定义一个空对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> val = <span class="string">'zhao'</span>;  <span class="comment">//赋予初始值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, <span class="string">'val'</span>, &#123;<span class="comment">//定义要修改对象的属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span>: function () &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span>: function (newVal) &#123; </span><br><span class="line"></span><br><span class="line">             val = newVal;<span class="comment">//定义val等于修改后的内容</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>).value = val;<span class="comment">//让文本框的内容等于val</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'b'</span>).innerHTML = val;<span class="comment">//让span的内容等于val</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="comment">//当在文本框输入内容时让对象里你定义的val等于文本框的值</span></span><br><span class="line"></span><br><span class="line">        obj.val = e.target.value;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过&lt;code&gt;Object.defineProperty()&lt;/code&gt;来劫持各个属性的&lt;code&gt;setter&lt;/code&gt;，&lt;code&gt;getter&lt;/code&gt;，在数据变动时发布消息给订阅者，触发相应的监
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中单向数据流</title>
    <link href="http://yoursite.com/2020/03/23/Vue%E4%B8%AD%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    <id>http://yoursite.com/2020/03/23/Vue中单向数据流/</id>
    <published>2020-03-23T10:39:07.000Z</published>
    <updated>2020-03-24T03:58:12.984Z</updated>
    
    <content type="html"><![CDATA[<p>​      数据从父组件传给子组件，只能单向绑定，子组件对父组件的数据只能访问不能修改。</p><p>​      父组件通过props传递数据给子组件，父组件是不能是直接访问子组件的数据的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​      数据从父组件传给子组件，只能单向绑定，子组件对父组件的数据只能访问不能修改。&lt;/p&gt;
&lt;p&gt;​      父组件通过props传递数据给子组件，父组件是不能是直接访问子组件的数据的。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue常见面试题</title>
    <link href="http://yoursite.com/2020/03/23/vue%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2020/03/23/vue常见面试题/</id>
    <published>2020-03-23T02:50:33.000Z</published>
    <updated>2020-04-05T05:09:13.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是单页面应用，有什么优缺点？"><a href="#1-什么是单页面应用，有什么优缺点？" class="headerlink" title="1.什么是单页面应用，有什么优缺点？"></a>1.什么是单页面应用，有什么优缺点？</h2><p>SPA——–single page application。单页面应用，即一个web项目就只有一个页面，其实，单页面应用，就是把整个项目的所有页面的所有内容分成了很多的组件，可以重复利用的，可以任意调整的组件，每个组件就是一个独立的部分（包括html，css和javascript代码）。</p><p>单页面跳转仅刷新局部资源，公共资源仅刷新一次，之后的操作交互，数据交互是通过路由、ajax来进行的，页面本身没有进行刷新。</p><p><strong>优点：</strong></p><p> ①前后端分离</p><p> ②良好的交互体验——用户不用刷新页面，页面显示流畅</p><p>  ③减轻服务器压力——服务器只出数据</p><p>  ④共用一套后端代码——多个客户端可共用一套后端代码</p><p><strong>缺点：</strong></p><p> ①seo难度高——数据渲染在前端进行，seo主要是让网站对于搜索引擎的爬虫更加友好，spa页数据动态生成，爬虫识别不了</p><p>②前进后退管理——单页面不能使用浏览器的前进后退，页面切换要自己建立堆栈管理，解决方法：利用url的散列+iframe实现</p><p>③初次加载耗时长</p><p><strong>单页面应用的优化</strong></p><p>①注意网站标题、关键字和描述的写法。</p><p> ②网页标签的合理使用——标签的规范使用可以让搜索引擎更好的理解网页内容层次。（例如：h1&gt; h2的逐级展示）尽可能使网页符合W3C的标准</p><p> ③注重外联锚文本多样化——单页面网站不代表网站只有一个关键字，避免网站的过度优化，所以要多样化外联锚文本。（外联关键词加超链接）</p><p>④增加一个二级博客目录——可通过博客内容增加单页面网站的权重</p><p> ⑤合理设置锚点——页面上合理的设置锚点，有利于用户快速到达想看的内容区域</p><p> ⑥网站内容高质量——将用户的关注点尽可能完整的展示出来，通过不同区域展示相关内容，解决用户烦恼</p><p>⑦避免全是图片展示——网站文字内容少不利于搜索引擎抓取和索引</p><h2 id="2-vue优点？"><a href="#2-vue优点？" class="headerlink" title="2.vue优点？"></a>2.vue优点？</h2><p>轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十kb；<br>简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；<br>双向数据绑定：保留了angular的特点，在数据操作方面更为简单；<br>组件化：保留了react的优点，实现了html的封装和重用，在构建单页面应用方面有着独特的优势；<br>视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；<br>虚拟DOM：dom操作是非常耗费性能的， 不再使用原生的dom操作节点，极大解放dom操作，但具体操作的还是dom不过是换了另一种方式；<br>运行速度更快:相比较与react而言，同样是操作虚拟dom，就性能而言，vue存在很大的优势。</p><h2 id="3-vue组件之间值的传递"><a href="#3-vue组件之间值的传递" class="headerlink" title="3.vue组件之间值的传递"></a>3.vue组件之间值的传递</h2><p><strong>一：父组件像子组件传值</strong></p><p>①父组件内设置要传的数据『data(){ fields: []}』</p><p>②在父组件中引用的子组件上绑定一个自定义属性并把数据绑定在自定义属性上『<add-date-set :formdata='formdata' :fields='fields' ></add-date-set>』</p><p>③在子组件添加参数props:[‘fields’],即可</p><p><strong>二：子组件像父组件传值</strong></p><p>①由于父组件需要参数，所以在父组件中的标签上定义自定义事件，在事件内部获取参数；『&lt;add-date-set @deleteField=”deleteField”&gt;</add-date-set>』</p><p>②在子组件中触发自定义事件，并传参。『deleteField(val, index){<br>      this.$emit(‘deleteField’, index, this.formdata);<br>    },』</p><p>结合的组件传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&lt;add-date-<span class="keyword">set</span> :formdata='formdata' :fields='fields' @deleteField="deleteField" styleType="field"&gt;&lt;/add-date-<span class="keyword">set</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import addDateSet from '@/components/createData/addDateSet'</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    addDateSet</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      formdata:[],</span><br><span class="line">      fields:  [&#123;</span><br><span class="line">          label: <span class="string">'热门城市'</span>,</span><br><span class="line">          options: [&#123;</span><br><span class="line">            value: <span class="string">'Shanghai'</span>,</span><br><span class="line">            label: <span class="string">'上海'</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            value: <span class="string">'Beijing'</span>,</span><br><span class="line">            label: <span class="string">'北京'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          label: <span class="string">'城市名'</span>,</span><br><span class="line">          options: [&#123;</span><br><span class="line">            value: <span class="string">'Chengdu'</span>,</span><br><span class="line">            label: <span class="string">'成都'</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            value: <span class="string">'Shenzhen'</span>,</span><br><span class="line">            label: <span class="string">'深圳'</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            value: <span class="string">'Guangzhou'</span>,</span><br><span class="line">            label: <span class="string">'广州'</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            value: <span class="string">'Dalian'</span>,</span><br><span class="line">            label: <span class="string">'大连'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        deleteField(val, index)&#123;</span><br><span class="line">        <span class="keyword">this</span>.formdata.splice(index,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">this</span>.$message.success(<span class="string">"删除成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div v-<span class="keyword">if</span>=<span class="string">"styleType == 'dataSet'"</span>&gt;</span><br><span class="line">    &lt;el-col :span=<span class="string">"24"</span>   v-<span class="keyword">for</span>=<span class="string">"(item, index) in formdataSet"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">      &lt;el-form-item label=<span class="string">"选择"</span> prop=<span class="string">"dataSet"</span>&gt;</span><br><span class="line">        &lt;el-autocomplete</span><br><span class="line">          <span class="class"><span class="keyword">class</span></span>=<span class="string">"inline-input"</span></span><br><span class="line">          v-model=<span class="string">"item.dataSet"</span></span><br><span class="line">          :fetch-suggestions=<span class="string">"querySearchData"</span></span><br><span class="line">          placeholder=<span class="string">"请输入"</span></span><br><span class="line">          @select=<span class="string">"handleSelect"</span></span><br><span class="line">          clearable</span><br><span class="line">        &gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-autocomplete</span>&gt;</span></span></span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-close"</span>  @click=<span class="string">"deleteDataSet(item, index)"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-col&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div v-else-if="styleType == 'field'"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-col :span="24" v-for="(item, index) in formdata" :key="index"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item label="选择" prop="field"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-select v-model="item.field" placeholder="请选择"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;el-option-group</span></span><br><span class="line"><span class="regexp">              v-for="group in fields"</span></span><br><span class="line"><span class="regexp">              :key="group.label"</span></span><br><span class="line"><span class="regexp">              :label="group.label"&gt;</span></span><br><span class="line"><span class="regexp">              &lt;el-option</span></span><br><span class="line"><span class="regexp">                v-for="item in group.options"</span></span><br><span class="line"><span class="regexp">                :key="item.value"</span></span><br><span class="line"><span class="regexp">                :label="item.label"</span></span><br><span class="line"><span class="regexp">                :value="item.value"&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>el-option&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-option-group&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>el-select&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-close"</span>  @click=<span class="string">"deleteField(item, index)"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-col&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  props:&#123;</span></span><br><span class="line"><span class="regexp">    styleType: &#123;</span></span><br><span class="line"><span class="regexp">      default: 'dataSet', /</span><span class="regexp">/ icon | btn</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    formdataSet:&#123;</span></span><br><span class="line"><span class="regexp">      type: Array,</span></span><br><span class="line"><span class="regexp">      default() &#123;</span></span><br><span class="line"><span class="regexp">        return []</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    formdata:&#123;</span></span><br><span class="line"><span class="regexp">      type: Array,</span></span><br><span class="line"><span class="regexp">      default() &#123;</span></span><br><span class="line"><span class="regexp">        return []</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    fields:&#123;</span></span><br><span class="line"><span class="regexp">      type: Array,</span></span><br><span class="line"><span class="regexp">      default() &#123;</span></span><br><span class="line"><span class="regexp">        return []</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    dataSetfield:&#123;</span></span><br><span class="line"><span class="regexp">      type: Array,</span></span><br><span class="line"><span class="regexp">      default() &#123;</span></span><br><span class="line"><span class="regexp">        return []</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    charsList:&#123;</span></span><br><span class="line"><span class="regexp">      type: Array,</span></span><br><span class="line"><span class="regexp">      default() &#123;</span></span><br><span class="line"><span class="regexp">        return []</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  mounted()&#123;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    deleteDataSet(val, index)&#123;</span></span><br><span class="line"><span class="regexp">      this.$emit('deleteDataSet', index, this.formdataSet);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    deleteField(val, index)&#123;</span></span><br><span class="line"><span class="regexp">      this.$emit('deleteField', index, this.formdata);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    handleSelect(item) &#123;</span></span><br><span class="line"><span class="regexp">      console.log(item);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    deleteChars(val, index)&#123;</span></span><br><span class="line"><span class="regexp">      this.$emit('deleteChars', index, this.charsList);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><strong>三： 组件之间传值</strong></p><p>对于平级组件来说其实也一样，他们也需要一个中间介质来作为一个中央事件总线,</p><p>①建立一个公共的通信组件( Vue)，需要传值的组件里引入该通信组件</p><p>②在一个中绑定一个事件this.on(‘eventname’, this. id)</p><p>③在另一个组件中触发事件this.$ emit(‘eventname’,( options)=&gt;{})</p><p>一 .我们先来创建中央事件总线，在src/assets/下创建一个eventBus.js,内容如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br><span class="line"><span class="comment">// eventBus中我们只创建了一个新的Vue实例，以后它就承担起了组件之间通信的桥梁了，也就是中央事件总线。</span></span><br></pre></td></tr></table></figure><p>二 . 创建一个firstChild组件，引入eventBus这个事件总线，接着添加一个按钮并绑定一个点击事件</p><p><img src="https://upload-images.jianshu.io/upload_images/1916203-c19c1e67938c927a.png" alt="img"></p><p>我们在响应点击事件的sendMsg函数中用$emit触发了一个自定义的userDefinedEvent事件，并传递了一个字符串参数<br>PS:$emit实例方法触发当前实例(这里的当前实例就是bus)上的事件,附加参数都会传给监听器回调。</p><p>三 . 我们再创建一个secondChild组件，引入eventBus事件总线，并用一个p标签来显示传递过来的值</p><p><img src="https://upload-images.jianshu.io/upload_images/1916203-8d804a33faf2887d.png" alt="img"></p><p>我们在mounted中，监听了userDefinedEvent,并把传递过来的字符串参数传递给了$on监听器的回调函数<br><strong>PS:</strong><br>mounted:是一个<strong>Vue生命周期中的钩子函数</strong>，简单点说就类似于jquery的ready，Vue会在文档加载完毕后调用mounted函数。<br>$on:监听当前实例上的自定义事件(此处当前实例为bus)。事件可以由$emit触发，回调函数会接收所有传入事件触发函数($emit)的额外参数。</p><p>四 . 在父组件中，注册这两个组件，并添加这两个组件的标签</p><p><img src="https://upload-images.jianshu.io/upload_images/1916203-761d1c793b3b3a97.png" alt="img"></p><ul><li>创建一个事件总线，例如demo中的eventBus，用它作为通信桥梁</li><li>在需要传值的组件中用bus.$emit触发一个自定义事件，并传递参数</li><li>在需要接收数据的组件中用bus.$on监听自定义事件，并在回调函数中处理传递过来的参</li></ul><h2 id="4-v-show和v-if指令的共同点和不同点？"><a href="#4-v-show和v-if指令的共同点和不同点？" class="headerlink" title="4.v-show和v-if指令的共同点和不同点？"></a>4.v-show和v-if指令的共同点和不同点？</h2><p>答: 共同点：都能控制元素的显示和隐藏；<br>不同点：实现本质方法不同，v-show本质就是通过控制css中的display设置为none，控制隐藏，只会编译一次；v-if是动态的向DOM树内添加或者删除DOM元素，若初始值为false，就不会编译了。而且v-if不停的销毁和创建比较消耗性能。<br>总结：如果要频繁切换某节点，使用v-show(切换开销比较小，初始开销较大)。如果不需要频繁切换某节点使用v-if（初始渲染开销较小，切换开销比较大）。</p><h2 id="5-如何让CSS只在当前组件中起作用？"><a href="#5-如何让CSS只在当前组件中起作用？" class="headerlink" title="5.如何让CSS只在当前组件中起作用？"></a>5.如何让CSS只在当前组件中起作用？</h2><p>答：在组件中的style前面加上scoped</p><h2 id="6-keep-alive的作用是什么"><a href="#6-keep-alive的作用是什么" class="headerlink" title="6.keep-alive的作用是什么?"></a>6.keep-alive的作用是什么?</h2><p>答:keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。</p><h2 id="7-如何获取dom"><a href="#7-如何获取dom" class="headerlink" title="7.如何获取dom?"></a>7.如何获取dom?</h2><p>答：ref=”domName” 用法：this.$refs.domName</p><h2 id="8-说出几种vue当中的指令和它的用法？"><a href="#8-说出几种vue当中的指令和它的用法？" class="headerlink" title="8.说出几种vue当中的指令和它的用法？"></a>8.说出几种vue当中的指令和它的用法？</h2><p>答：v-model双向数据绑定；<br>v-for循环；<br>v-if v-show 显示与隐藏；<br>v-on事件；v-once: 只绑定一次。</p><h2 id="9-vue-loader是什么？使用它的用途有哪些？"><a href="#9-vue-loader是什么？使用它的用途有哪些？" class="headerlink" title="9. vue-loader是什么？使用它的用途有哪些？"></a>9. vue-loader是什么？使用它的用途有哪些？</h2><p>答：vue文件的一个加载器，将template/js/style转换成js模块。<br>用途：js可以写es6、style样式可以scss或less、template可以加jade等</p><h2 id="10-v-for渲染列表是key是用来做什么的？"><a href="#10-v-for渲染列表是key是用来做什么的？" class="headerlink" title="10.v-for渲染列表是key是用来做什么的？?"></a>10.v-for渲染列表是key是用来做什么的？?</h2><p>答：需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点。<br>作用主要是为了高效的更新虚拟DOM。</p><p>我们知道，vue和react都实现了一套虚拟DOM，使我们可以不直接操作DOM元素，只操作数据便可以重新渲染页面。而隐藏在背后的原理便是其高效的Diff算法。</p><p>vue和react的虚拟DOM的Diff算法大致相同，其核心是基于两个简单的假设：</p><p><strong>1. 两个相同的组件产生类似的DOM结构，不同的组件产生不同的DOM结构。</strong></p><p><strong>2. 同一层级的一组节点，他们可以通过唯一的id进行区分。</strong></p><p>基于以上这两点假设，使得虚拟DOM的Diff算法的复杂度从<strong>O(n^3)</strong>降到了<strong>O(n)</strong>。</p><p><img src="https://images2017.cnblogs.com/blog/1170024/201710/1170024-20171018191016162-1229549117.png" alt="img"></p><p>当页面的数据发生变化时，Diff算法只会比较同一层级的节点：</p><p><strong>如果节点类型不同，直接干掉前面的节点，再创建并插入新的节点，不会再比较这个节点以后的子节点了。</strong></p><p><strong>如果节点类型相同，则会重新设置该节点的属性，从而实现节点的更新。</strong></p><p>当某一层有很多相同的节点时，也就是列表节点时，Diff算法的更新过程默认情况下也是遵循以上原则。</p><p>比如一下这个情况：</p><p><img src="https://images2017.cnblogs.com/blog/1170024/201710/1170024-20171018191056146-436654927.png" alt="img"></p><p>我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的：</p><p><img src="https://images2017.cnblogs.com/blog/1170024/201710/1170024-20171018191119318-368188268.png" alt="img"></p><p>即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？</p><p>所以我们<strong>需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点。</strong></p><p><img src="https://images2017.cnblogs.com/blog/1170024/201710/1170024-20171018191142334-13876328.png" alt="img"></p><p>所以一句话，<strong>key的作用主要是为了高效的更新虚拟DOM</strong>。另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，</p><p>否则vue只会替换其内部属性而不会触发过渡效果。</p><h2 id="11-axios及安装"><a href="#11-axios及安装" class="headerlink" title="11.axios及安装?"></a>11.axios及安装?</h2><p>答：请求后台资源的模块。npm install axios –save装好，<br>js中使用import进来，然后.get或.post。返回在.then函数中如果成功，失败则是在.catch函数中。</p><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><h2 id="12-v-model的使用。"><a href="#12-v-model的使用。" class="headerlink" title="12.v-model的使用。"></a>12.v-model的使用。</h2><p>答：v-model用于表单数据的双向绑定，其实它就是一个语法糖，这个背后就做了两个操作：<br>v-bind绑定一个value属性；<br>v-on指令给当前元素绑定input事件。</p><p>以 input 表单元素为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">'something'</span>&gt;</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-bind:value=<span class="string">"something"</span> v-on:input=<span class="string">"something = $event.target.value"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="13-请说出vue-cli项目中src目录每个文件夹和文件的用法？"><a href="#13-请说出vue-cli项目中src目录每个文件夹和文件的用法？" class="headerlink" title="13.请说出vue.cli项目中src目录每个文件夹和文件的用法？"></a>13.请说出vue.cli项目中src目录每个文件夹和文件的用法？</h2><p>答：assets文件夹是放静态资源；components是放组件；router是定义路由相关的配置; app.vue是一个应用主组件；main.js是入口文件。</p><h2 id="14-分别简述computed和watch的使用场景"><a href="#14-分别简述computed和watch的使用场景" class="headerlink" title="14.分别简述computed和watch的使用场景"></a>14.分别简述computed和watch的使用场景</h2><p>computed:<br>　　　　当一个属性受多个属性影响的时候就需要用到computed<br>　　　　最典型的栗子： 购物车商品结算的时候<br>watch:<br>　　　　当一条数据影响多条数据的时候就需要用watch<br>　　　　栗子：搜索数据</p><h6 id="计算属性缓存vs方法"><a href="#计算属性缓存vs方法" class="headerlink" title="计算属性缓存vs方法"></a>计算属性缓存vs方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"head"</span> @click=<span class="string">"back()"</span>&gt;</span><br><span class="line">      &lt;van-icon name=<span class="string">"arrow-left"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-left"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; msg.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&#123;&#123; reveredMessage &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">        &lt;p&gt; 调用methods中的方法 &#123;&#123; changeMsg() &#125;&#125; &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    name: 'payOrder',</span></span><br><span class="line"><span class="regexp">    components: &#123; </span></span><br><span class="line"><span class="regexp">      [Icon.name]: Icon,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    data() &#123;</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        msg: 'hello'</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    watch: &#123;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    computed: &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 计算属性的getter </span></span><br><span class="line"><span class="regexp">      reveredMessage: function () &#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ this 指向时vm的实例</span></span><br><span class="line"><span class="regexp">          return this.msg.split('').reverse().join('')</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">        changeMsg() &#123;</span></span><br><span class="line"><span class="regexp">        return this.msg.split('').reverse().join('')</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br></pre></td></tr></table></figure><p>我们可以将同一个函数定义一个方法而不是一个计算属性。两种方式的最终结果确实完全相同的，然而，不同的<strong><em>计算属性是基于他们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时，他们才会重新求值。这就意味这只要msg还没发生改变</em></strong>，<strong>多次访问<code>reveredMessage</code>计算属性会立即返回之前的计算结果，而不必再次执行函数。***</strong>方法每次都会去重新计算结果***</p><p>为什么需要缓存？假如我们有一个性能开销比较大的计算属性getCount, 它需要遍历一个巨大的数组并作出大量的计算。然后我们有可能有其他的计算属性依赖于getCount,如果没有缓存，我们将不可避免的多次去执行getCount的getter！。。。。当然了，如果你不希望有缓存，换一句话来说，你可以使用方法来代替。</p><h6 id="计算属性vs侦听属性"><a href="#计算属性vs侦听属性" class="headerlink" title="计算属性vs侦听属性"></a>计算属性vs侦听属性</h6><p>Vue提供了一种更为通用的方式来观察和响应Vue实列上的数据变化：<code>侦听属性</code>。当然你有一些数据需要随着其他数据的变化而变动时你很容易滥用<code>wathch</code>，–。我们最好的做法时使用计算属性而不是命令式的watch回调。下面我们可以想想这个例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123; fullName &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要看js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cosnt vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">''</span>,</span><br><span class="line">        lastName: <span class="string">''</span>,</span><br><span class="line">        fullName: <span class="string">''</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        firstName: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fullName = newVal + <span class="keyword">this</span>.lastVal</span><br><span class="line">        &#125;,</span><br><span class="line">        lastName: <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + newVal</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用<code>watch</code>的话每次就只能监听到一个属性。而且命令是重复的，将它和计算属性进行对比。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123; fullName &#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cosnt vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">''</span>,</span><br><span class="line">        lastName: <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// fullName: '',</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">            <span class="comment">// 只需要执行一次就OK</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>虽然计算属性在大多数情况下更加适合，但有时候也需要一个自定义的侦听器。这就是为什么Vue通过watch选项提供了一个更加通用的方法，来响应数据的变化。当需要在数据变化时执行异步或者开销较大的操作时，这个方法时最有用的。</p><p><strong>总结***</strong>watch是观察某一个属性的变化，重新计算属性值。computed是通过所依赖的属性的变化重新计算属性值。<strong>*但如果要在数据变化的同时</strong>进行异步操作或者是比较大的开销，那么watch为最佳选择**。</p><h2 id="15-v-on可以监听多个方法吗？"><a href="#15-v-on可以监听多个方法吗？" class="headerlink" title="15.v-on可以监听多个方法吗？"></a>15.v-on可以监听多个方法吗？</h2><p>可以，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> v-on=<span class="string">"&#123; input:onInput,focus:onFocus,blur:onBlur, &#125;"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="16-nextTick的使用"><a href="#16-nextTick的使用" class="headerlink" title="16.$nextTick的使用"></a>16.$nextTick的使用</h2><p>答：当你修改了data的值然后马上获取这个dom元素的值，是不能获取到更新后的值，<br>你需要使用$nextTick这个回调，让修改后的data值渲染更新到dom元素之后在获取，才能成功。<br><strong>17.vue组件中data为什么必须是一个函数？</strong><br>答：因为JavaScript的特性所导致，在component中，data必须以函数的形式存在，不可以是对象。<br>　　组建中的data写成一个函数，数据以函数返回值的形式定义，这样每次复用组件的时候，都会返回一份新的data，相当于每个组件实例都有自己私有的数据空间，它们只负责各自维护的数据，不会造成混乱。而单纯的写成对象形式，就是所有的组件实例共用了一个data，这样改一个全都改了。</p><h2 id="18-渐进式框架的理解"><a href="#18-渐进式框架的理解" class="headerlink" title="18.渐进式框架的理解"></a>18.渐进式框架的理解</h2><p>答：主张最少；可以根据不同的需求选择不同的层级；</p><h2 id="19-Vue中双向数据绑定是如何实现的？"><a href="#19-Vue中双向数据绑定是如何实现的？" class="headerlink" title="19.Vue中双向数据绑定是如何实现的？"></a>19.Vue中双向数据绑定是如何实现的？</h2><p>答：vue 双向数据绑定是通过 数据劫持 结合 发布订阅模式的方式来实现的， 也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变；<br>核心：关于VUE双向数据绑定，其核心是 Object.defineProperty()方法。</p><h2 id="20-单页面应用和多页面应用区别及优缺点"><a href="#20-单页面应用和多页面应用区别及优缺点" class="headerlink" title="20.单页面应用和多页面应用区别及优缺点"></a>20.单页面应用和多页面应用区别及优缺点</h2><p>答：单页面应用（SPA），通俗一点说就是指只有一个主页面的应用，浏览器一开始要加载所有必须的 html, js, css。所有的页面内容都包含在这个所谓的主页面中。但在写的时候，还是会分开写（页面片段），然后在交互的时候由路由程序动态载入，单页面的页面跳转，仅刷新局部资源。多应用于pc端。<br>多页面（MPA），就是指一个应用中有多个页面，页面跳转时是整页刷新<br>单页面的优点：<br>用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点spa对服务器压力较小；前后端分离；页面效果会比较炫酷（比如切换页面内容时的专场动画）。<br>单页面缺点：<br>不利于seo；导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）；初次加载时耗时多；页面复杂度提高很多。</p><h2 id="21-v-if和v-for的优先级"><a href="#21-v-if和v-for的优先级" class="headerlink" title="21.v-if和v-for的优先级"></a>21.v-if和v-for的优先级</h2><p>答：当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级，这意味着 v-if 将分别重复运行于每个 v-for 循环中。所以，不推荐v-if和v-for同时使用。<br>如果v-if和v-for一起用的话，vue中的的会自动提示v-if应该放到外层去。</p><h2 id="22-assets和static的区别"><a href="#22-assets和static的区别" class="headerlink" title="22.assets和static的区别"></a>22.assets和static的区别</h2><p>答：相同点：assets和static两个都是存放静态资源文件。项目中所需要的资源文件图片，字体图标，样式文件等都可以放在这两个文件下，这是相同点<br>不相同点：assets中存放的静态资源文件在项目打包时，也就是运行npm run build时会将assets中放置的静态资源文件进行打包上传，所谓打包简单点可以理解为压缩体积，代码格式化。而压缩后的静态资源文件最终也都会放置在static文件中跟着index.html一同上传至服务器。static中放置的静态资源文件就不会要走打包压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是static中的资源文件由于没有进行压缩等操作，所以文件的体积也就相对于assets中打包后的文件提交较大点。在服务器中就会占据更大的空间。<br>建议：将项目中template需要的样式文件js文件等都可以放置在assets中，走打包这一流程。减少体积。而项目中引入的第三方的资源文件如iconfoont.css等文件可以放置在static中，因为这些引入的第三方文件已经经过处理，我们不再需要处理，直接上传。</p><h2 id="23-vue常用的修饰符"><a href="#23-vue常用的修饰符" class="headerlink" title="23.vue常用的修饰符"></a>23.vue常用的修饰符</h2><p>答：.stop：等同于JavaScript中的event.stopPropagation()，防止事件冒泡；<br>.prevent：等同于JavaScript中的event.preventDefault()，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；<br>.capture：与事件冒泡的方向相反，事件捕获由外到内；<br>.self：只会触发自己范围内的事件，不包含子元素；<br>.once：只会触发一次。</p><h2 id="24-vue的两个核心点"><a href="#24-vue的两个核心点" class="headerlink" title="24.vue的两个核心点"></a>24.vue的两个核心点</h2><p>答：数据驱动、组件系统<br>数据驱动：ViewModel，保证数据和视图的一致性。<br>组件系统：应用类UI可以看作全部是由组件树构成的。</p><h2 id="25-vue和jQuery的区别"><a href="#25-vue和jQuery的区别" class="headerlink" title="25.vue和jQuery的区别"></a>25.vue和jQuery的区别</h2><p>答：jQuery是使用选择器（$）选取DOM对象，对其进行赋值、取值、事件绑定等操作，其实和原生的HTML的区别只在于可以更方便的选取和操作DOM对象，而数据和界面是在一起的。比如需要获取label标签的内容：$(“lable”).val();,它还是依赖DOM元素的值。<br>Vue则是通过Vue对象将数据和View完全分离开来了。对数据进行操作不再需要引用相应的DOM对象，可以说数据和View是分离的，他们通过Vue对象这个vm实现相互的绑定。这就是传说中的MVVM。</p><h2 id="26-引进组件的步骤"><a href="#26-引进组件的步骤" class="headerlink" title="26. 引进组件的步骤"></a>26. 引进组件的步骤</h2><p>答: 在template中引入组件；<br>在script的第一行用import引入路径；<br>用component中写上组件名称。</p><h2 id="27-delete和Vue-delete删除数组的区别"><a href="#27-delete和Vue-delete删除数组的区别" class="headerlink" title="27.delete和Vue.delete删除数组的区别"></a>27.delete和Vue.delete删除数组的区别</h2><p>答：delete只是被删除的元素变成了 empty/undefined 其他的元素的键值还是不变。Vue.delete 直接删除了数组 改变了数组的键值。</p><h2 id="28-SPA首屏加载慢如何解决"><a href="#28-SPA首屏加载慢如何解决" class="headerlink" title="28.SPA首屏加载慢如何解决"></a>28.SPA首屏加载慢如何解决</h2><p>答：安装动态懒加载所需插件；使用CDN资源。</p><h2 id="29-Vue-router跳转和location-href有什么区别"><a href="#29-Vue-router跳转和location-href有什么区别" class="headerlink" title="29.Vue-router跳转和location.href有什么区别"></a>29.Vue-router跳转和location.href有什么区别</h2><p>答：使用location.href=’/url’来跳转，简单方便，但是刷新了页面；<br>使用history.pushState(‘/url’)，无刷新页面，静态跳转；<br>引进router，然后使用router.push(‘/url’)来跳转，使用了diff算法，实现了按需加载，减少了dom的消耗。<br>其实使用router跳转和使用history.pushState()没什么差别的，因为vue-router就是用了history.pushState()，尤其是在history模式下。</p><h2 id="30-vue-slot插槽的作用"><a href="#30-vue-slot插槽的作用" class="headerlink" title="30. vue slot插槽的作用"></a>30. vue slot插槽的作用</h2><p>答：简单来说，假如父组件需要在子组件内放一些DOM，那么这些DOM是显示、不显示、在哪个地方显示、如何显示，就是slot分发负责的活。</p><p><strong>插槽，其实就相当于占位符。</strong>它在组件中给你的HTML模板占了一个位置，让你来传入一些东西。插槽又分为匿名插槽、具名插槽以及作用域插槽。</p><p>你可能不太明白，为什么我要给子组件中传入HTML，而不直接写在子组件中呢？答案是这样的。你可以想象一个场景，<strong>你有五个页面，这五个页面中只有一个区域的内容不一样，你会怎么去写这五个页面呢？复制粘贴是一种办法，但在vue中，插槽(slot)是更好的做法。</strong></p><p><strong>父组件向子组件传递dom时会用到插槽</strong></p><p><strong>作用域插槽：当同一个子组件想要在不同的父组件里展示不同的状态，可以使用作用域插槽。展示的状态由父组件来决定</strong></p><h6 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h6><p>我们又可以叫它单个插槽或者默认插槽。与具名插槽相对，它不需要设置name属性。（它隐藏的name属性为default。）</p><h6 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h6><p>插槽有一个name属性与匿名插槽相对，加了name属性的匿名插槽就是具名插槽。</p><h6 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h6><p>其实就是可以传递数据的插槽。子组件中的一些数据想在父组件中使用，必须通过规定的方法来传递。</p><p>父组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"crootbox"</span>&gt;</span><br><span class="line">&lt;v-anchor :list=list&gt;</span><br><span class="line">&lt;template v-slot&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div id=<span class="string">"anchor-1"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"@/assets/images/details1.jpg"</span> width=<span class="string">"100%"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"@/assets/images/details2.jpg"</span> width=<span class="string">"100%"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"@/assets/images/details3.jpg"</span> width=<span class="string">"100%"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>v-anchor&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> Vanchor <span class="keyword">from</span> <span class="string">'@/views/product/v_anchor.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">name: <span class="string">"prd-details"</span>,</span><br><span class="line">components: &#123; </span><br><span class="line">           [Vanchor.name]: Vanchor,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"anchor-box"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"anchor-nav"</span>&gt;</span><br><span class="line">&lt;a </span><br><span class="line">href=<span class="string">"javascript:void(0)"</span> </span><br><span class="line">rel=<span class="string">"external nofollow"</span> </span><br><span class="line">@click=<span class="string">"goAnchor('#anchor-'+item.index, item.index)"</span></span><br><span class="line">v-<span class="keyword">for</span>=<span class="string">"item in list"</span> </span><br><span class="line">:key=<span class="string">"item.index"</span></span><br><span class="line">:<span class="class"><span class="keyword">class</span></span>=<span class="string">"item.index == activeClass ? 'active' : ''"</span></span><br><span class="line">&gt;</span><br><span class="line">&#123;&#123;item.name&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"anchor-content"</span>&gt;</span><br><span class="line">&lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure><h2 id="31-你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？"><a href="#31-你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？" class="headerlink" title="31.你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？"></a>31.你们vue项目是打包了一个js文件，一个css文件，还是有多个文件？</h2><p>答：根据vue-cli脚手架规范，一个js文件，一个CSS文件。</p><h2 id="32-Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？"><a href="#32-Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？" class="headerlink" title="32.Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？"></a>32.Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？</h2><p>答：Vue路由在Android机上有问题，babel问题，安装babel polypill插件解决。</p><h2 id="33-Vue2中注册在router-link上事件无效解决方法"><a href="#33-Vue2中注册在router-link上事件无效解决方法" class="headerlink" title="33.Vue2中注册在router-link上事件无效解决方法"></a>33.Vue2中注册在router-link上事件无效解决方法</h2><p>答： 使用@click.native。原因：router-link会阻止click事件，.native指直接监听一个原生事件。</p><h2 id="34-RouterLink在IE和Firefox中不起作用（路由不跳转）的问题"><a href="#34-RouterLink在IE和Firefox中不起作用（路由不跳转）的问题" class="headerlink" title="34.RouterLink在IE和Firefox中不起作用（路由不跳转）的问题"></a>34.RouterLink在IE和Firefox中不起作用（路由不跳转）的问题</h2><p>答: 方法一：只用a标签，不适用button标签；方法二：使用button标签和Router.navigate方法</p><h2 id="35-axios的特点有哪些"><a href="#35-axios的特点有哪些" class="headerlink" title="35.axios的特点有哪些"></a>35.axios的特点有哪些</h2><p>答：从浏览器中创建XMLHttpRequests；<br>node.js创建http请求；<br>支持Promise API；<br>拦截请求和响应；<br>转换请求数据和响应数据；<br>取消请求；<br>自动换成json。<br>axios中的发送字段的参数是data跟params两个，两者的区别在于params是跟请求地址一起发送的，data的作为一个请求体进行发送<br>params一般适用于get请求，data一般适用于post put 请求。</p><h2 id="36-请说下封装-vue-组件的过程？"><a href="#36-请说下封装-vue-组件的过程？" class="headerlink" title="36.请说下封装 vue 组件的过程？"></a>36.请说下封装 vue 组件的过程？</h2><p>答：1. 建立组件的模板，先把架子搭起来，写写样式，考虑好组件的基本逻辑。(os：思考1小时，码码10分钟，程序猿的准则。)</p><p>　　2. 准备好组件的数据输入。即分析好逻辑，定好 props 里面的数据、类型。<br>　　3. 准备好组件的数据输出。即根据组件逻辑，做好要暴露出来的方法。<br>　　4. 封装完毕了，直接调用即可</p><h2 id="37-params和query的区别"><a href="#37-params和query的区别" class="headerlink" title="37.params和query的区别"></a>37.params和query的区别</h2><p>答：用法：query要用path来引入，params要用name来引入，接收参数都是类似的，分别是this.$route.query.name和this.$route.params.name。<br>url地址显示：query更加类似于我们ajax中get传参，params则类似于post，说的再简单一点，前者在浏览器地址栏中显示参数，后者则不显示<br>注意点：query刷新不会丢失query里面的数据<br>params刷新 会 丢失 params里面的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//query要用path来引入</span></span><br><span class="line">      <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">          path: <span class="string">"/resbindex"</span>,</span><br><span class="line">          query: &#123;</span><br><span class="line">            menuId: <span class="keyword">this</span>.searchList.menuIds,</span><br><span class="line">            parentId: <span class="keyword">this</span>.searchList.menuIds,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//params要用name来引入</span></span><br><span class="line">        <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">          name: <span class="string">"resbindex"</span>,</span><br><span class="line">          params: &#123;</span><br><span class="line">            menuId: <span class="keyword">this</span>.searchList.menuIds,</span><br><span class="line">            parentId: <span class="keyword">this</span>.searchList.menuIds,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="38-vue初始化页面闪动问题"><a href="#38-vue初始化页面闪动问题" class="headerlink" title="38.vue初始化页面闪动问题"></a>38.vue初始化页面闪动问题</h2><p>答：使用vue开发时，在vue初始化之前，由于div是不归vue管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于的字样，虽然一般情况下这个时间很短暂，但是我们还是有必要让解决这个问题的。<br>首先：在css里加上[v-cloak] {<br>display: none;<br>}。<br>如果没有彻底解决问题，则在根元素加上style=”display: none;” :style=”{display: ‘block’}”</p><h2 id="39-vue更新数组时触发视图更新的方法"><a href="#39-vue更新数组时触发视图更新的方法" class="headerlink" title="39.vue更新数组时触发视图更新的方法"></a>39.vue更新数组时触发视图更新的方法</h2><p>答:push()；pop()；shift()；unshift()；splice()； sort()；reverse()</p><h2 id="40-vue常用的UI组件库"><a href="#40-vue常用的UI组件库" class="headerlink" title="40.vue常用的UI组件库"></a>40.vue常用的UI组件库</h2><p>答：Mint UI，element，VUX</p><h2 id="41-vue修改打包后静态资源路径的修改"><a href="#41-vue修改打包后静态资源路径的修改" class="headerlink" title="41.vue修改打包后静态资源路径的修改"></a>41.vue修改打包后静态资源路径的修改</h2><p>答：cli2版本：将 config/index.js 里的 assetsPublicPath 的值改为 ‘./‘ 。<br>build: {<br>…<br>assetsPublicPath: ‘./‘,<br>…<br>}<br>cli3版本：在根目录下新建vue.config.js 文件，然后加上以下内容：（如果已经有此文件就直接修改）<br>module.exports = {<br>publicPath: ‘’, // 相对于 HTML 页面（目录相同） }</p><h2 id="42-Class-与-Style-如何动态绑定？"><a href="#42-Class-与-Style-如何动态绑定？" class="headerlink" title="42.Class 与 Style 如何动态绑定？"></a>42.Class 与 Style 如何动态绑定？</h2><p>Class 可以通过对象语法和数组语法进行动态绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"anchor-box"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"anchor-nav"</span>&gt;</span><br><span class="line">&lt;a </span><br><span class="line">href=<span class="string">"javascript:void(0)"</span> </span><br><span class="line">rel=<span class="string">"external nofollow"</span> </span><br><span class="line">@click=<span class="string">"goAnchor('#anchor-'+item.index, item.index)"</span></span><br><span class="line">v-<span class="keyword">for</span>=<span class="string">"item in list"</span> </span><br><span class="line">:key=<span class="string">"item.index"</span></span><br><span class="line">:<span class="class"><span class="keyword">class</span></span>=<span class="string">"item.index == activeClass ? 'active' : ''"</span></span><br><span class="line">&gt;</span><br><span class="line">&#123;&#123;item.name&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">name: <span class="string">'v-anchor'</span>,</span><br><span class="line">props: &#123;</span><br><span class="line">list: &#123;</span><br><span class="line">type: <span class="built_in">Array</span>,</span><br><span class="line"><span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">activeClass: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">goAnchor(selector, index) &#123;</span><br><span class="line"><span class="keyword">this</span>.activeClass = index;</span><br><span class="line"><span class="keyword">var</span> anchor = <span class="keyword">this</span>.$el.querySelector(selector)</span><br><span class="line"><span class="keyword">var</span> content = <span class="keyword">this</span>.$el.querySelector(<span class="string">'.anchor-content'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style lang="scss" scoped&gt;</span></span><br><span class="line"><span class="regexp">.anchor-nav &#123;</span></span><br><span class="line"><span class="regexp">width: 100%;</span></span><br><span class="line"><span class="regexp">height: 0.4rem;</span></span><br><span class="line"><span class="regexp">line-height: 0.4rem;</span></span><br><span class="line"><span class="regexp">display: flex;</span></span><br><span class="line"><span class="regexp">justify-content: space-between;</span></span><br><span class="line"><span class="regexp">background-color: #fff;</span></span><br><span class="line"><span class="regexp">margin-bottom: 0.1rem;</span></span><br><span class="line"><span class="regexp">position: fixed;</span></span><br><span class="line"><span class="regexp">a &#123;</span></span><br><span class="line"><span class="regexp">color: $gray-8;</span></span><br><span class="line"><span class="regexp">font-size: 0.14rem;</span></span><br><span class="line"><span class="regexp">text-align: center;</span></span><br><span class="line"><span class="regexp">display: inline-block;</span></span><br><span class="line"><span class="regexp">flex: 1;</span></span><br><span class="line"><span class="regexp">&amp;.active &#123;</span></span><br><span class="line"><span class="regexp">color: $green;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>数组语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Style 也可以通过对象语法和数组语法进行动态绑定：</p><p>对象语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=<span class="string">"[styleColor, styleSize]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  styleColor: &#123;</span><br><span class="line">     color: <span class="string">'red'</span></span><br><span class="line">   &#125;,</span><br><span class="line">  styleSize:&#123;</span><br><span class="line">     fontSize:<span class="string">'23px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="43、对于MVVM的理解？"><a href="#43、对于MVVM的理解？" class="headerlink" title="43、对于MVVM的理解？"></a>43、对于MVVM的理解？</h2><p>MVVM 是 Model-View-ViewModel 的缩写。<br><strong>Model</strong>代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。<br><strong>View</strong> 代表UI 组件，它负责将数据模型转化成UI 展现出来。<br><strong>ViewModel</strong> 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。<br>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。<br><strong>ViewModel</strong> 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p><h2 id="44、Vue路由跳转方式有哪几种？"><a href="#44、Vue路由跳转方式有哪几种？" class="headerlink" title="44、Vue路由跳转方式有哪几种？"></a>44、Vue路由跳转方式有哪几种？</h2><p>1.router-link</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">**不带参数** </span><br><span class="line">&lt;router-link :to=<span class="string">"&#123;name:'home'&#125;"</span>&gt; </span><br><span class="line">&lt;router-link :to=<span class="string">"&#123;path:'/home'&#125;"</span>&gt; <span class="comment">//name,path都行, 建议用name  </span></span><br><span class="line"><span class="comment">// 注意：router-link中链接如果是'/'开始就是从根路由开始，如果开始不带'/'，则从当前路由开始。 </span></span><br><span class="line">带参数</span><br><span class="line">&lt;router-link :to=<span class="string">"&#123;name:'home', params: &#123;id:1&#125;&#125;"</span>&gt;       </span><br><span class="line"><span class="comment">// params传参数 (类似post)</span></span><br><span class="line"><span class="comment">// 路由配置 path: "/home/:id" 或者 path: "/home:id" </span></span><br><span class="line"><span class="comment">// 不配置path ,第一次可请求,刷新页面id会消失</span></span><br><span class="line"><span class="comment">// 配置path,刷新页面id会保留     </span></span><br><span class="line"><span class="comment">// html 取参  $route.params.id</span></span><br><span class="line"><span class="comment">// script 取参  this.$route.params.id </span></span><br><span class="line">&lt;router-link :to=<span class="string">"&#123;name:'home', query: &#123;id:1&#125;&#125;"</span>&gt; </span><br><span class="line"><span class="comment">// query传参数 (类似get,url后面会显示参数)</span></span><br><span class="line"><span class="comment">// 路由可不配置</span></span><br><span class="line"><span class="comment">// html 取参  $route.query.id</span></span><br><span class="line"><span class="comment">// script 取参  this.$route.query.id</span></span><br></pre></td></tr></table></figure><p>2.this.$router.push() (函数里面调用)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">不带参数 </span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">'/home'</span>)</span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>:<span class="string">'home'</span>&#125;)</span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">'/home'</span>&#125;)</span><br><span class="line">query传参 </span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>:<span class="string">'home'</span>,<span class="attr">query</span>: &#123;<span class="attr">id</span>:<span class="string">'1'</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">'/home'</span>,<span class="attr">query</span>: &#123;<span class="attr">id</span>:<span class="string">'1'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>2.1 params传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>:<span class="string">'home'</span>,<span class="attr">params</span>: &#123;<span class="attr">id</span>:<span class="string">'1'</span>&#125;&#125;)  <span class="comment">// 只能用 name</span></span><br><span class="line"><span class="comment">// 路由配置 path: "/home/:id" 或者 path: "/home:id" ,</span></span><br><span class="line"><span class="comment">// 不配置path ,第一次可请求,刷新页面id会消失</span></span><br><span class="line"><span class="comment">// 配置path,刷新页面id会保留</span></span><br><span class="line"><span class="comment">// html 取参  $route.params.id</span></span><br><span class="line"><span class="comment">// script 取参  this.$route.params.id</span></span><br></pre></td></tr></table></figure><h2 id="45-route和router的区别"><a href="#45-route和router的区别" class="headerlink" title="45.route和router的区别"></a>45.route和router的区别</h2><p>答：是路由信息对象，包括，path，params，hash，query，fullPath，mathched,name等路由信息参数。而router是“路由实例”对象包括了路由的跳转方法，钩子函数等。</p><h2 id="46-vueAPP适配是怎么写的，用的什么单位？"><a href="#46-vueAPP适配是怎么写的，用的什么单位？" class="headerlink" title="46.vueAPP适配是怎么写的，用的什么单位？"></a>46.vueAPP适配是怎么写的，用的什么单位？</h2><p>原理是借助px2rem 插件方便的将px单位转为了rem</p><p>具体步骤：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install px2rem-loader  lib-flexible --save</span><br></pre></td></tr></table></figure><ul><li>在main.js中引入lib-flexible</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import 'lib-flexible/flexible.js'</span><br></pre></td></tr></table></figure><ul><li>在build下的 utils.js中，找到generateLoaders 方法，添加以下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> px2remLoader = &#123;    </span><br><span class="line">loader: <span class="string">'px2rem-loader'</span>,   </span><br><span class="line">options: &#123;    </span><br><span class="line">remUnit: <span class="number">37.5</span></span><br><span class="line">&#125;&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateLoaders</span> (<span class="params">loader, loaderOptions</span>) </span></span><br><span class="line"><span class="function"></span>&#123;    <span class="keyword">const</span> loaders = [cssLoader, px2remLoader]   </span><br><span class="line"><span class="keyword">if</span> (loader) &#123;        </span><br><span class="line">loaders.push(&#123;        </span><br><span class="line">loader: loader + <span class="string">'-loader'</span>,        </span><br><span class="line">options: <span class="built_in">Object</span>.assign(&#123;&#125;, loaderOptions, &#123;        </span><br><span class="line">sourceMap: options.sourceMap        </span><br><span class="line">&#125;)    </span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>重启项目，会发现自己设置的px被转为rem 了</p></li><li><p>但是有一定的局限性</p></li><li><p>以上实现转换适用于：</p><p>（1）组件中编写的<style></style>下的css</p><p>（2）从index.js或者main.js中import ‘../../static/css/reset.css’引入css</p><p>（3）在组件的&lt;script type=”text/ecmascript-6″&gt; import ‘../../static/css/reset.css’</script>中引入css</p><p>另外的情况不适用：</p><p>（1）组件<style></style>中@import “../../static/css/reset.css (可考虑上面（2）、（3）的形式引入)</p><p>（2）外部样式:<link rel="stylesheet" href="static/css/reset.css"></p><p>（3）元素内部样式：style=”height: 417px; width: 550px;”</p><p>另外我要补充的是：在做移动端适配的时候我们不建议给字体也设置rem的单位，针对这种情况，我为字体适配的解决方案是使用媒体查询，文件以</p><p>组件<style></style>中@import “../../static/css/reset.css形式引入，可完美解决移动端适配问题</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-什么是单页面应用，有什么优缺点？&quot;&gt;&lt;a href=&quot;#1-什么是单页面应用，有什么优缺点？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是单页面应用，有什么优缺点？&quot;&gt;&lt;/a&gt;1.什么是单页面应用，有什么优缺点？&lt;/h2&gt;&lt;p&gt;SPA——–
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-router导航钩子</title>
    <link href="http://yoursite.com/2020/03/21/vue-router%E5%AF%BC%E8%88%AA%E9%92%A9%E5%AD%90/"/>
    <id>http://yoursite.com/2020/03/21/vue-router导航钩子/</id>
    <published>2020-03-21T08:16:20.000Z</published>
    <updated>2020-03-22T06:51:38.158Z</updated>
    
    <content type="html"><![CDATA[<p>vue-router 的导航钩子，主要用来作用是拦截导航，判断用户是否登录跳转登录页面还是主页面，判断管理员权限，判断页面是否存在，不存在跳转404页面，<br>优点：能适用多钟情况，体验感好，。</p><p><strong>1.全局导航钩子</strong></p><p>全局导航钩子主要有两种钩子：前置守卫、后置钩子，</p><p>注册一个全局前置守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// to: Route: 即将要进入的目标 路由对象</span></span><br><span class="line"><span class="comment">// from: Route: 当前导航正要离开的路由</span></span><br><span class="line"><span class="comment">// next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</span></span><br><span class="line"><span class="keyword">const</span> token = getToken();<span class="comment">// 是否登录</span></span><br><span class="line"><span class="comment">// 未登录状态；当路由到route指定页时，跳转至login</span></span><br><span class="line"><span class="keyword">if</span> (!token &amp;&amp; to.name !==<span class="string">'login'</span>) &#123;</span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'/login'</span>, &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 已登录状态；当路由到login时，跳转至home </span></span><br><span class="line"><span class="keyword">if</span> (to.name === <span class="string">'login'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">    router.push(&#123; <span class="attr">path</span>: <span class="string">'/Home'</span>, &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>beforeEach函数有三个参数：<br>to: Route，代表要进入的目标，它是一个路由对象<br>from: Route，代表当前正要离开的路由，同样也是一个路由对象<br>next: Function，这是一个必须需要调用的方法，而具体的执行效果则依赖 next 方法调用的参数</p><ul><li><p>next()：进入管道中的下一个钩子，如果全部的钩子执行完了，则导航的状态就是 confirmed（确认的）</p></li><li><p>next(false)：这代表中断掉当前的导航，即 to 代表的路由对象不会进入，被中断，此时该表 URL 地址会被重置到 from 路由对应的地址</p></li><li><p>next(‘/’) 和 next({path: ‘/’})：在中断掉当前导航的同时，跳转到一个不同的地址</p></li><li><p>next(error)：如果传入参数是一个 Error 实例，那么导航被终止的同时会将错误传递给 router.onError() 注册过的回调</p></li></ul><p>全局后置钩子：</p><p>afterEach只有两个参数  afterEach((to,from)=&gt;{})</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(to.path === <span class="string">"/list"</span>)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"后置钩子"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2. 路由独享的钩子</strong></p><p>顾名思义，即单个路由独享的导航钩子，它是在路由配置上直接进行定义的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cont router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/order'</span>,</span><br><span class="line">            component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"@/views/payment/pay_order.vue"</span>),,</span><br><span class="line">            beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span> ,next</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// do someting</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>3.组件内的导航钩子</strong></p><p>组件内的导航钩子主要有这三种：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave。他们是直接在路由组件内部直接进行定义的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'beforeRouteEnter'</span>); <span class="comment">// undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(to, <span class="string">'组件独享守卫beforeRouteEnter第一个参数'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>, <span class="string">'组件独享守卫beforeRouteEnter第二个参数'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(next, <span class="string">'组件独享守卫beforeRouteEnter第三个参数'</span>);</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//因为当钩子执行前，组件实例还没被创建</span></span><br><span class="line">  <span class="comment">// vm 就是当前组件的实例相当于上面的 this，所以在 next 方法里你就可以把 vm 当 this 来用了。</span></span><br><span class="line">    <span class="built_in">console</span>.log(vm);<span class="comment">//当前组件的实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">from</span>.name === <span class="string">'payInfo'</span>) &#123; <span class="comment">//判断是从哪个路由过来的，若是detail页面不需要刷新获取新数据，直接用之前缓存的数据即可</span></span><br><span class="line">      to.meta.isBack = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'beforeRouteUpdate'</span>); <span class="comment">//当前组件实例</span></span><br><span class="line">  <span class="built_in">console</span>.log(to, <span class="string">'组件独享守卫beforeRouteUpdate第一个参数'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>, <span class="string">'组件独享守beforeRouteUpdate卫第二个参数'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(next, <span class="string">'组件独享守beforeRouteUpdate卫第三个参数'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'beforeRouteLeave'</span>); <span class="comment">//当前组件实例</span></span><br><span class="line">  <span class="built_in">console</span>.log(to, <span class="string">'组件独享守卫beforeRouteLeave第一个参数'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>, <span class="string">'组件独享守卫beforeRouteLeave第二个参数'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(next, <span class="string">'组件独享守卫beforeRouteLeave第三个参数'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>完整的路由导航解析流程(不包括其他生命周期)：</strong></p><ol><li>触发进入其他路由。</li><li>调用要离开路由的组件守卫<code>beforeRouteLeave</code></li><li>调用局前置守卫：<code>beforeEach</code></li><li>在重用的组件里调用 <code>beforeRouteUpdate</code></li><li>调用路由独享守卫 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在将要进入的路由组件中调用<code>beforeRouteEnter</code></li><li>调用全局解析守卫 <code>beforeResolve</code></li><li>导航被确认。</li><li>调用全局后置钩子的 <code>afterEach</code>钩子。</li><li>触发DOM更新(<code>mounted</code>)。</li><li>执行<code>beforeRouteEnter</code>守卫中传给 next 的回调函数</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue-router 的导航钩子，主要用来作用是拦截导航，判断用户是否登录跳转登录页面还是主页面，判断管理员权限，判断页面是否存在，不存在跳转404页面，&lt;br&gt;优点：能适用多钟情况，体验感好，。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.全局导航钩子&lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
</feed>
