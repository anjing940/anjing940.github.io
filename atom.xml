<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晓婷成长记录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-24T08:21:00.013Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiaoting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS数组去重的两种方法</title>
    <link href="http://yoursite.com/2019/10/24/JS%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/24/JS数组去重的两种方法/</id>
    <published>2019-10-24T08:21:00.012Z</published>
    <updated>2019-10-24T08:21:00.013Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、循环遍历法（传统思路）"><a href="#一、循环遍历法（传统思路）" class="headerlink" title="一、循环遍历法（传统思路）"></a><strong>一、循环遍历法（传统思路）</strong></h5><p>最简单粗暴的算法，新建一个空数组，然后遍历原数组，将不在新数组中的项添加到新数组，最后返回新数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> compare(arr) &#123;</span><br><span class="line">    var newarr = [];//新建空数组</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; arr.length; i++) &#123;//遍历原数组</span><br><span class="line">        var isadd = <span class="literal">true</span>;//设置标记</span><br><span class="line">        <span class="keyword">for</span> (var j = 0; j &lt; newarr.length; j++) &#123;//遍历新数组</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === newarr[j]) &#123;</span><br><span class="line">                isadd = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;//如果当前原数组中的项，在新数组中存在，则标记为‘不添加’，并跳出新数组遍历</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isadd) &#123;</span><br><span class="line">            newarr.push(arr[i]);</span><br><span class="line">        &#125;//若标记为‘添加’（即遍历新数组后，没有发现相同项），则添加进新数组</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newarr;//返回新数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [1, 4, 5, 3, 2, 4, 5, 6, 5]</span><br><span class="line">console.log(compare(arr))</span><br></pre></td></tr></table></figure><p><strong>二、排序比较法（巧妙转换）</strong></p><p>相对第一种方法，需要每次遍历新旧两个数组，效率不高的情况。此方法先对原数组进行排序，这样每次只要与新数组的最后一项比较即可，大大提高效率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> sortarr(arr) &#123;</span><br><span class="line">    var arrsort = arr.sort();//对原数组进行排序</span><br><span class="line">    var newarr = [];//新建空数组</span><br><span class="line">    newarr.push(arrsort[0]);//将排序后数值的第一项给添加到新数组</span><br><span class="line">    <span class="keyword">for</span> (var i = 1; i &lt; arrsort.length; i++) &#123;//遍历排序后的数组</span><br><span class="line">        <span class="keyword">if</span> (arrsort[i] !== newarr[newarr.length - 1]) &#123;</span><br><span class="line">            newarr.push(arrsort[i])</span><br><span class="line">        &#125;//若当前项与新数组最后一项不同，这添加到新数组</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newarr;//返回新数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [1, 4, 5, 3, 2, 4, 5, 6, 5]</span><br><span class="line">console.log(sortarr(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;一、循环遍历法（传统思路）&quot;&gt;&lt;a href=&quot;#一、循环遍历法（传统思路）&quot; class=&quot;headerlink&quot; title=&quot;一、循环遍历法（传统思路）&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、循环遍历法（传统思路）&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;最简单粗暴的算法，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>10个常用的Win键快捷键 相当实用！</title>
    <link href="http://yoursite.com/2019/10/24/10%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84Win%E9%94%AE%E5%BF%AB%E6%8D%B7%E9%94%AE%20%E7%9B%B8%E5%BD%93%E5%AE%9E%E7%94%A8%EF%BC%81/"/>
    <id>http://yoursite.com/2019/10/24/10个常用的Win键快捷键 相当实用！/</id>
    <published>2019-10-24T07:00:47.000Z</published>
    <updated>2019-10-24T07:27:56.155Z</updated>
    
    <content type="html"><![CDATA[<p>1、Win + R 运行命令窗，cmd等必备。</p><p>2、Win + E 快速打开 文件资源管理器（我的电脑）。</p><p>3、Win+D：最小化桌面</p><p>按下此组合键后，屏幕上所有窗口都会瞬间最小化，再按一次又会恢复。</p><p>4、Ctrl + Alt + Del：任务管理器菜单</p><p>5、Win+→/↑/←/↓：窗口排版</p><p>Win键的搭配下，使用↑/↓/←/→四个按键就可以生成最大化、最小化、侧屏、右侧屏四个基础的排版功能。如果当前窗口已经处在左侧屏或右侧屏状态时，按下Win+↑/↓还可以进一步将变为左上、左下、右上、右下四个高级状态。</p><p>6、Win+++：放大镜</p><p>按下Win键不放，然后+++…… 别忘了用Win+—再缩小回来。</p><p>7、Win+P：启动投影仪/无线显示器</p><p>按下此组合键后，系统会在右窗格弹出一个菜单，根据需要选择即可，非常方便。如有无线显示器，也可以使用这个功能投射。</p><p>8、Win+Home：快速清理活动窗口</p><p>窗口打开太多，一个个关闭很麻烦。按下此组合键后，除当前窗口外的所有窗口都会最小化。</p><p>9、Win + TAB：</p><p>使用Win + Tab键可以预览所有当前打开的窗口，并且可以按需进行快速切换。</p><p>10、Win + Ctrl + D：新建虚拟桌面 Win + Ctrl + F4 关闭虚拟桌面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、Win + R 运行命令窗，cmd等必备。&lt;/p&gt;
&lt;p&gt;2、Win + E 快速打开 文件资源管理器（我的电脑）。&lt;/p&gt;
&lt;p&gt;3、Win+D：最小化桌面&lt;/p&gt;
&lt;p&gt;按下此组合键后，屏幕上所有窗口都会瞬间最小化，再按一次又会恢复。&lt;/p&gt;
&lt;p&gt;4、Ctrl +
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS数组去重的两种方法</title>
    <link href="http://yoursite.com/2019/10/23/hello-world/"/>
    <id>http://yoursite.com/2019/10/23/hello-world/</id>
    <published>2019-10-23T07:45:51.253Z</published>
    <updated>2019-10-24T08:20:44.895Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、循环遍历法（传统思路）"><a href="#一、循环遍历法（传统思路）" class="headerlink" title="一、循环遍历法（传统思路）"></a><strong>一、循环遍历法（传统思路）</strong></h5><p>最简单粗暴的算法，新建一个空数组，然后遍历原数组，将不在新数组中的项添加到新数组，最后返回新数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> compare(arr) &#123;</span><br><span class="line">    var newarr = [];//新建空数组</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; arr.length; i++) &#123;//遍历原数组</span><br><span class="line">        var isadd = <span class="literal">true</span>;//设置标记</span><br><span class="line">        <span class="keyword">for</span> (var j = 0; j &lt; newarr.length; j++) &#123;//遍历新数组</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === newarr[j]) &#123;</span><br><span class="line">                isadd = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;//如果当前原数组中的项，在新数组中存在，则标记为‘不添加’，并跳出新数组遍历</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isadd) &#123;</span><br><span class="line">            newarr.push(arr[i]);</span><br><span class="line">        &#125;//若标记为‘添加’（即遍历新数组后，没有发现相同项），则添加进新数组</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newarr;//返回新数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [1, 4, 5, 3, 2, 4, 5, 6, 5]</span><br><span class="line">console.log(compare(arr))</span><br></pre></td></tr></table></figure><p><strong>二、排序比较法（巧妙转换）</strong></p><p>相对第一种方法，需要每次遍历新旧两个数组，效率不高的情况。此方法先对原数组进行排序，这样每次只要与新数组的最后一项比较即可，大大提高效率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> sortarr(arr) &#123;</span><br><span class="line">    var arrsort = arr.sort();//对原数组进行排序</span><br><span class="line">    var newarr = [];//新建空数组</span><br><span class="line">    newarr.push(arrsort[0]);//将排序后数值的第一项给添加到新数组</span><br><span class="line">    <span class="keyword">for</span> (var i = 1; i &lt; arrsort.length; i++) &#123;//遍历排序后的数组</span><br><span class="line">        <span class="keyword">if</span> (arrsort[i] !== newarr[newarr.length - 1]) &#123;</span><br><span class="line">            newarr.push(arrsort[i])</span><br><span class="line">        &#125;//若当前项与新数组最后一项不同，这添加到新数组</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> newarr;//返回新数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr = [1, 4, 5, 3, 2, 4, 5, 6, 5]</span><br><span class="line">console.log(sortarr(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;一、循环遍历法（传统思路）&quot;&gt;&lt;a href=&quot;#一、循环遍历法（传统思路）&quot; class=&quot;headerlink&quot; title=&quot;一、循环遍历法（传统思路）&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、循环遍历法（传统思路）&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;最简单粗暴的算法，
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
